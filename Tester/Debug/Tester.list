
Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d84  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005f10  08005f10  00015f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006150  08006150  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006158  08006158  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000028  20000068  20000068  00020068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000729a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a5  00000000  00000000  00027332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  000289d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000778  00000000  00000000  00029218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c73c  00000000  00000000  00029990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006516  00000000  00000000  000460cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009dd99  00000000  00000000  0004c5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ea37b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028e8  00000000  00000000  000ea3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ef4 	.word	0x08005ef4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08005ef4 	.word	0x08005ef4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b04:	f000 b974 	b.w	8000df0 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	468e      	mov	lr, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14d      	bne.n	8000bca <__udivmoddi4+0xaa>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4694      	mov	ip, r2
 8000b32:	d969      	bls.n	8000c08 <__udivmoddi4+0xe8>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b152      	cbz	r2, 8000b50 <__udivmoddi4+0x30>
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	f1c2 0120 	rsb	r1, r2, #32
 8000b42:	fa20 f101 	lsr.w	r1, r0, r1
 8000b46:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b4a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4e:	4094      	lsls	r4, r2
 8000b50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b54:	0c21      	lsrs	r1, r4, #16
 8000b56:	fbbe f6f8 	udiv	r6, lr, r8
 8000b5a:	fa1f f78c 	uxth.w	r7, ip
 8000b5e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b66:	fb06 f107 	mul.w	r1, r6, r7
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x64>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b76:	f080 811f 	bcs.w	8000db8 <__udivmoddi4+0x298>
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	f240 811c 	bls.w	8000db8 <__udivmoddi4+0x298>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1a5b      	subs	r3, r3, r1
 8000b86:	b2a4      	uxth	r4, r4
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b94:	fb00 f707 	mul.w	r7, r0, r7
 8000b98:	42a7      	cmp	r7, r4
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x92>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ba4:	f080 810a 	bcs.w	8000dbc <__udivmoddi4+0x29c>
 8000ba8:	42a7      	cmp	r7, r4
 8000baa:	f240 8107 	bls.w	8000dbc <__udivmoddi4+0x29c>
 8000bae:	4464      	add	r4, ip
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb6:	1be4      	subs	r4, r4, r7
 8000bb8:	2600      	movs	r6, #0
 8000bba:	b11d      	cbz	r5, 8000bc4 <__udivmoddi4+0xa4>
 8000bbc:	40d4      	lsrs	r4, r2
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d909      	bls.n	8000be2 <__udivmoddi4+0xc2>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	f000 80ef 	beq.w	8000db2 <__udivmoddi4+0x292>
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bda:	4630      	mov	r0, r6
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	fab3 f683 	clz	r6, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d14a      	bne.n	8000c80 <__udivmoddi4+0x160>
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xd4>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 80f9 	bhi.w	8000de6 <__udivmoddi4+0x2c6>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	469e      	mov	lr, r3
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e0      	beq.n	8000bc4 <__udivmoddi4+0xa4>
 8000c02:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c06:	e7dd      	b.n	8000bc4 <__udivmoddi4+0xa4>
 8000c08:	b902      	cbnz	r2, 8000c0c <__udivmoddi4+0xec>
 8000c0a:	deff      	udf	#255	; 0xff
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	f040 8092 	bne.w	8000d3a <__udivmoddi4+0x21a>
 8000c16:	eba1 010c 	sub.w	r1, r1, ip
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f fe8c 	uxth.w	lr, ip
 8000c22:	2601      	movs	r6, #1
 8000c24:	0c20      	lsrs	r0, r4, #16
 8000c26:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c2a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c32:	fb0e f003 	mul.w	r0, lr, r3
 8000c36:	4288      	cmp	r0, r1
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x12c>
 8000c3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x12a>
 8000c44:	4288      	cmp	r0, r1
 8000c46:	f200 80cb 	bhi.w	8000de0 <__udivmoddi4+0x2c0>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	1a09      	subs	r1, r1, r0
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1110 	mls	r1, r7, r0, r1
 8000c58:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x156>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x154>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f200 80bb 	bhi.w	8000dea <__udivmoddi4+0x2ca>
 8000c74:	4608      	mov	r0, r1
 8000c76:	eba4 040e 	sub.w	r4, r4, lr
 8000c7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7e:	e79c      	b.n	8000bba <__udivmoddi4+0x9a>
 8000c80:	f1c6 0720 	rsb	r7, r6, #32
 8000c84:	40b3      	lsls	r3, r6
 8000c86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c92:	fa01 f306 	lsl.w	r3, r1, r6
 8000c96:	431c      	orrs	r4, r3
 8000c98:	40f9      	lsrs	r1, r7
 8000c9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9e:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca6:	0c20      	lsrs	r0, r4, #16
 8000ca8:	fa1f fe8c 	uxth.w	lr, ip
 8000cac:	fb09 1118 	mls	r1, r9, r8, r1
 8000cb0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	fa02 f206 	lsl.w	r2, r2, r6
 8000cbe:	d90b      	bls.n	8000cd8 <__udivmoddi4+0x1b8>
 8000cc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cc8:	f080 8088 	bcs.w	8000ddc <__udivmoddi4+0x2bc>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f240 8085 	bls.w	8000ddc <__udivmoddi4+0x2bc>
 8000cd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ce0:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	458e      	cmp	lr, r1
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1e2>
 8000cf0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cf8:	d26c      	bcs.n	8000dd4 <__udivmoddi4+0x2b4>
 8000cfa:	458e      	cmp	lr, r1
 8000cfc:	d96a      	bls.n	8000dd4 <__udivmoddi4+0x2b4>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4461      	add	r1, ip
 8000d02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d06:	fba0 9402 	umull	r9, r4, r0, r2
 8000d0a:	eba1 010e 	sub.w	r1, r1, lr
 8000d0e:	42a1      	cmp	r1, r4
 8000d10:	46c8      	mov	r8, r9
 8000d12:	46a6      	mov	lr, r4
 8000d14:	d356      	bcc.n	8000dc4 <__udivmoddi4+0x2a4>
 8000d16:	d053      	beq.n	8000dc0 <__udivmoddi4+0x2a0>
 8000d18:	b15d      	cbz	r5, 8000d32 <__udivmoddi4+0x212>
 8000d1a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d22:	fa01 f707 	lsl.w	r7, r1, r7
 8000d26:	fa22 f306 	lsr.w	r3, r2, r6
 8000d2a:	40f1      	lsrs	r1, r6
 8000d2c:	431f      	orrs	r7, r3
 8000d2e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d32:	2600      	movs	r6, #0
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	f1c2 0320 	rsb	r3, r2, #32
 8000d3e:	40d8      	lsrs	r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa21 f303 	lsr.w	r3, r1, r3
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4301      	orrs	r1, r0
 8000d4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d58:	fb07 3610 	mls	r6, r7, r0, r3
 8000d5c:	0c0b      	lsrs	r3, r1, #16
 8000d5e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d62:	fb00 f60e 	mul.w	r6, r0, lr
 8000d66:	429e      	cmp	r6, r3
 8000d68:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x260>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d76:	d22f      	bcs.n	8000dd8 <__udivmoddi4+0x2b8>
 8000d78:	429e      	cmp	r6, r3
 8000d7a:	d92d      	bls.n	8000dd8 <__udivmoddi4+0x2b8>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	b289      	uxth	r1, r1
 8000d84:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d88:	fb07 3316 	mls	r3, r7, r6, r3
 8000d8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d90:	fb06 f30e 	mul.w	r3, r6, lr
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x28a>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000da0:	d216      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d914      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000da6:	3e02      	subs	r6, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000db0:	e738      	b.n	8000c24 <__udivmoddi4+0x104>
 8000db2:	462e      	mov	r6, r5
 8000db4:	4628      	mov	r0, r5
 8000db6:	e705      	b.n	8000bc4 <__udivmoddi4+0xa4>
 8000db8:	4606      	mov	r6, r0
 8000dba:	e6e3      	b.n	8000b84 <__udivmoddi4+0x64>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6f8      	b.n	8000bb2 <__udivmoddi4+0x92>
 8000dc0:	454b      	cmp	r3, r9
 8000dc2:	d2a9      	bcs.n	8000d18 <__udivmoddi4+0x1f8>
 8000dc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dcc:	3801      	subs	r0, #1
 8000dce:	e7a3      	b.n	8000d18 <__udivmoddi4+0x1f8>
 8000dd0:	4646      	mov	r6, r8
 8000dd2:	e7ea      	b.n	8000daa <__udivmoddi4+0x28a>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	e794      	b.n	8000d02 <__udivmoddi4+0x1e2>
 8000dd8:	4640      	mov	r0, r8
 8000dda:	e7d1      	b.n	8000d80 <__udivmoddi4+0x260>
 8000ddc:	46d0      	mov	r8, sl
 8000dde:	e77b      	b.n	8000cd8 <__udivmoddi4+0x1b8>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	e732      	b.n	8000c4c <__udivmoddi4+0x12c>
 8000de6:	4630      	mov	r0, r6
 8000de8:	e709      	b.n	8000bfe <__udivmoddi4+0xde>
 8000dea:	4464      	add	r4, ip
 8000dec:	3802      	subs	r0, #2
 8000dee:	e742      	b.n	8000c76 <__udivmoddi4+0x156>

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f14:	4907      	ldr	r1, [pc, #28]	; (8000f34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4013      	ands	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40023800 	.word	0x40023800

08000f38 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000f42:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <LL_SYSCFG_SetEXTISource+0x58>)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	0c1b      	lsrs	r3, r3, #16
 8000f52:	43db      	mvns	r3, r3
 8000f54:	ea02 0103 	and.w	r1, r2, r3
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	0c1b      	lsrs	r3, r3, #16
 8000f5c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	fab3 f383 	clz	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	fa03 f202 	lsl.w	r2, r3, r2
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <LL_SYSCFG_SetEXTISource+0x58>)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	3302      	adds	r3, #2
 8000f80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40013800 	.word	0x40013800

08000f94 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	613b      	str	r3, [r7, #16]
  return result;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2103      	movs	r1, #3
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	61bb      	str	r3, [r7, #24]
  return result;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fab3 f383 	clz	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	601a      	str	r2, [r3, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b089      	sub	sp, #36	; 0x24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	613b      	str	r3, [r7, #16]
  return result;
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2103      	movs	r1, #3
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	401a      	ands	r2, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa93 f3a3 	rbit	r3, r3
 800102c:	61bb      	str	r3, [r7, #24]
  return result;
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	431a      	orrs	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	60da      	str	r2, [r3, #12]
}
 8001044:	bf00      	nop
 8001046:	3724      	adds	r7, #36	; 0x24
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	619a      	str	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	041a      	lsls	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	619a      	str	r2, [r3, #24]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80010ac:	2010      	movs	r0, #16
 80010ae:	f7ff ff2b 	bl	8000f08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80010b2:	2004      	movs	r0, #4
 80010b4:	f7ff ff28 	bl	8000f08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80010b8:	2080      	movs	r0, #128	; 0x80
 80010ba:	f7ff ff25 	bl	8000f08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010be:	2001      	movs	r0, #1
 80010c0:	f7ff ff22 	bl	8000f08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff ff1f 	bl	8000f08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80010ca:	2008      	movs	r0, #8
 80010cc:	f7ff ff1c 	bl	8000f08 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, CS_I2C_SPI_Pin|LL_GPIO_PIN_9);
 80010d0:	f44f 7102 	mov.w	r1, #520	; 0x208
 80010d4:	488c      	ldr	r0, [pc, #560]	; (8001308 <MX_GPIO_Init+0x27c>)
 80010d6:	f7ff ffc9 	bl	800106c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
 80010da:	2104      	movs	r1, #4
 80010dc:	488b      	ldr	r0, [pc, #556]	; (800130c <MX_GPIO_Init+0x280>)
 80010de:	f7ff ffc5 	bl	800106c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010e2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80010e6:	488a      	ldr	r0, [pc, #552]	; (8001310 <MX_GPIO_Init+0x284>)
 80010e8:	f7ff ffc0 	bl	800106c <LL_GPIO_ResetOutputPin>
                          |Audio_RST_Pin);

  /**/
  LL_GPIO_SetOutputPin(GPIOC, OTG_FS_PowerSwitchOn_Pin|LL_GPIO_PIN_1);
 80010ec:	2103      	movs	r1, #3
 80010ee:	4887      	ldr	r0, [pc, #540]	; (800130c <MX_GPIO_Init+0x280>)
 80010f0:	f7ff ffae 	bl	8001050 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010f4:	2308      	movs	r3, #8
 80010f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f8:	2301      	movs	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	487e      	ldr	r0, [pc, #504]	; (8001308 <MX_GPIO_Init+0x27c>)
 800110e:	f001 ff33 	bl	8002f78 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001112:	2301      	movs	r3, #1
 8001114:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4878      	ldr	r0, [pc, #480]	; (800130c <MX_GPIO_Init+0x280>)
 800112c:	f001 ff24 	bl	8002f78 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001130:	2302      	movs	r3, #2
 8001132:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001134:	2301      	movs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4870      	ldr	r0, [pc, #448]	; (800130c <MX_GPIO_Init+0x280>)
 800114a:	f001 ff15 	bl	8002f78 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800114e:	2304      	movs	r3, #4
 8001150:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001152:	2301      	movs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800115e:	2302      	movs	r3, #2
 8001160:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4869      	ldr	r0, [pc, #420]	; (800130c <MX_GPIO_Init+0x280>)
 8001168:	f001 ff06 	bl	8002f78 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800116c:	2304      	movs	r3, #4
 800116e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4865      	ldr	r0, [pc, #404]	; (8001314 <MX_GPIO_Init+0x288>)
 800117e:	f001 fefb 	bl	8002f78 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001186:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	485a      	ldr	r0, [pc, #360]	; (8001308 <MX_GPIO_Init+0x27c>)
 800119e:	f001 feeb 	bl	8002f78 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011a6:	603b      	str	r3, [r7, #0]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011a8:	2301      	movs	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4854      	ldr	r0, [pc, #336]	; (8001310 <MX_GPIO_Init+0x284>)
 80011be:	f001 fedb 	bl	8002f78 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011c2:	2320      	movs	r3, #32
 80011c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	484f      	ldr	r0, [pc, #316]	; (8001310 <MX_GPIO_Init+0x284>)
 80011d4:	f001 fed0 	bl	8002f78 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 80011d8:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff feab 	bl	8000f38 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE9);
 80011e2:	494d      	ldr	r1, [pc, #308]	; (8001318 <MX_GPIO_Init+0x28c>)
 80011e4:	2002      	movs	r0, #2
 80011e6:	f7ff fea7 	bl	8000f38 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE15);
 80011ea:	494c      	ldr	r1, [pc, #304]	; (800131c <MX_GPIO_Init+0x290>)
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fea3 	bl	8000f38 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 80011f2:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80011f6:	2004      	movs	r0, #4
 80011f8:	f7ff fe9e 	bl	8000f38 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001200:	2301      	movs	r3, #1
 8001202:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001204:	2301      	movs	r3, #1
 8001206:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001208:	2301      	movs	r3, #1
 800120a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fd2b 	bl	8002c6c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8001216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800121c:	2301      	movs	r3, #1
 800121e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001220:	2300      	movs	r3, #0
 8001222:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001224:	2302      	movs	r3, #2
 8001226:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001228:	f107 0318 	add.w	r3, r7, #24
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fd1d 	bl	8002c6c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001236:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001238:	2301      	movs	r3, #1
 800123a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800123c:	2300      	movs	r3, #0
 800123e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001240:	2302      	movs	r3, #2
 8001242:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fd0f 	bl	8002c6c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001252:	2301      	movs	r3, #1
 8001254:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001256:	2301      	movs	r3, #1
 8001258:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800125a:	2301      	movs	r3, #1
 800125c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fd02 	bl	8002c6c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001268:	2200      	movs	r2, #0
 800126a:	2101      	movs	r1, #1
 800126c:	482c      	ldr	r0, [pc, #176]	; (8001320 <MX_GPIO_Init+0x294>)
 800126e:	f7ff fec0 	bl	8000ff2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_9, LL_GPIO_PULL_UP);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	4824      	ldr	r0, [pc, #144]	; (800130c <MX_GPIO_Init+0x280>)
 800127a:	f7ff feba 	bl	8000ff2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_15, LL_GPIO_PULL_UP);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001284:	4826      	ldr	r0, [pc, #152]	; (8001320 <MX_GPIO_Init+0x294>)
 8001286:	f7ff feb4 	bl	8000ff2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 800128a:	2200      	movs	r2, #0
 800128c:	2102      	movs	r1, #2
 800128e:	481e      	ldr	r0, [pc, #120]	; (8001308 <MX_GPIO_Init+0x27c>)
 8001290:	f7ff feaf 	bl	8000ff2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001294:	2200      	movs	r2, #0
 8001296:	2101      	movs	r1, #1
 8001298:	4821      	ldr	r0, [pc, #132]	; (8001320 <MX_GPIO_Init+0x294>)
 800129a:	f7ff fe7b 	bl	8000f94 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_9, LL_GPIO_MODE_INPUT);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a4:	4819      	ldr	r0, [pc, #100]	; (800130c <MX_GPIO_Init+0x280>)
 80012a6:	f7ff fe75 	bl	8000f94 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_15, LL_GPIO_MODE_INPUT);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <MX_GPIO_Init+0x294>)
 80012b2:	f7ff fe6f 	bl	8000f94 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2102      	movs	r1, #2
 80012ba:	4813      	ldr	r0, [pc, #76]	; (8001308 <MX_GPIO_Init+0x27c>)
 80012bc:	f7ff fe6a 	bl	8000f94 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012c0:	f7ff fd98 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fde8 	bl	8000ea0 <NVIC_EncodePriority>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	2017      	movs	r0, #23
 80012d6:	f7ff fdb9 	bl	8000e4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012da:	2017      	movs	r0, #23
 80012dc:	f7ff fd98 	bl	8000e10 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012e0:	f7ff fd88 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fdd8 	bl	8000ea0 <NVIC_EncodePriority>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4619      	mov	r1, r3
 80012f4:	2028      	movs	r0, #40	; 0x28
 80012f6:	f7ff fda9 	bl	8000e4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012fa:	2028      	movs	r0, #40	; 0x28
 80012fc:	f7ff fd88 	bl	8000e10 <__NVIC_EnableIRQ>

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	40020800 	.word	0x40020800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40020400 	.word	0x40020400
 8001318:	00f00002 	.word	0x00f00002
 800131c:	f0000003 	.word	0xf0000003
 8001320:	40020000 	.word	0x40020000

08001324 <__NVIC_SetPriorityGrouping>:
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <LL_RCC_HSE_Enable+0x1c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <LL_RCC_HSE_Enable+0x1c>)
 8001376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <LL_RCC_HSE_IsReady+0x24>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800139c:	bf0c      	ite	eq
 800139e:	2301      	moveq	r3, #1
 80013a0:	2300      	movne	r3, #0
 80013a2:	b2db      	uxtb	r3, r3
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <LL_RCC_SetSysClkSource+0x24>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f023 0203 	bic.w	r2, r3, #3
 80013c4:	4904      	ldr	r1, [pc, #16]	; (80013d8 <LL_RCC_SetSysClkSource+0x24>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40023800 	.word	0x40023800

080013dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <LL_RCC_GetSysClkSource+0x18>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 030c 	and.w	r3, r3, #12
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <LL_RCC_SetAHBPrescaler+0x24>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001408:	4904      	ldr	r1, [pc, #16]	; (800141c <LL_RCC_SetAHBPrescaler+0x24>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40023800 	.word	0x40023800

08001420 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <LL_RCC_SetAPB1Prescaler+0x24>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001430:	4904      	ldr	r1, [pc, #16]	; (8001444 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4313      	orrs	r3, r2
 8001436:	608b      	str	r3, [r1, #8]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40023800 	.word	0x40023800

08001448 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001458:	4904      	ldr	r1, [pc, #16]	; (800146c <LL_RCC_SetAPB2Prescaler+0x24>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4313      	orrs	r3, r2
 800145e:	608b      	str	r3, [r1, #8]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40023800 	.word	0x40023800

08001470 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <LL_RCC_PLL_Enable+0x1c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <LL_RCC_PLL_Enable+0x1c>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <LL_RCC_PLL_IsReady+0x24>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014a0:	bf0c      	ite	eq
 80014a2:	2301      	moveq	r3, #1
 80014a4:	2300      	movne	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	68f9      	ldr	r1, [r7, #12]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	4311      	orrs	r1, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	0192      	lsls	r2, r2, #6
 80014d8:	430a      	orrs	r2, r1
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014e8:	4904      	ldr	r1, [pc, #16]	; (80014fc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40023800 	.word	0x40023800
 8001500:	ffbf8000 	.word	0xffbf8000

08001504 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <LL_APB1_GRP1_EnableClock+0x2c>)
 800150e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4313      	orrs	r3, r2
 8001516:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <LL_APB1_GRP1_EnableClock+0x2c>)
 800151a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4013      	ands	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40023800 	.word	0x40023800

08001534 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <LL_APB2_GRP1_EnableClock+0x2c>)
 800153e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4313      	orrs	r3, r2
 8001546:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <LL_APB2_GRP1_EnableClock+0x2c>)
 800154a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40023800 	.word	0x40023800

08001564 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <LL_FLASH_SetLatency+0x24>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 0207 	bic.w	r2, r3, #7
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <LL_FLASH_SetLatency+0x24>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40023c00 	.word	0x40023c00

0800158c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <LL_FLASH_GetLatency+0x18>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023c00 	.word	0x40023c00

080015a8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80015b8:	4904      	ldr	r1, [pc, #16]	; (80015cc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40007000 	.word	0x40007000

080015d0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	621a      	str	r2, [r3, #32]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_GPIO_SetOutputPin>:
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_GPIO_ResetOutputPin>:
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	041a      	lsls	r2, r3, #16
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	4013      	ands	r3, r2
 800169a:	041a      	lsls	r2, r3, #16
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43d9      	mvns	r1, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	400b      	ands	r3, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	619a      	str	r2, [r3, #24]
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <convert_speed>:

double control_velocity = 0.0;

void SystemClock_Config(void);
//FIXME
int32_t convert_speed(double speed){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	ed87 0b00 	vstr	d0, [r7]
	return (int32_t)(speed / cart_ticks_to_m);
 80016c2:	a309      	add	r3, pc, #36	; (adr r3, 80016e8 <convert_speed+0x30>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016cc:	f7ff f862 	bl	8000794 <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff f9e2 	bl	8000aa0 <__aeabi_d2iz>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	9999999a 	.word	0x9999999a
 80016ec:	3f099999 	.word	0x3f099999

080016f0 <move_carriage>:

void move_carriage(double speed)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	ed87 0b00 	vstr	d0, [r7]
	if (fabs(speed) <= max_velocity_error)
 80016fa:	6838      	ldr	r0, [r7, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8001702:	a33a      	add	r3, pc, #232	; (adr r3, 80017ec <move_carriage+0xfc>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7ff f996 	bl	8000a38 <__aeabi_dcmple>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00e      	beq.n	8001730 <move_carriage+0x40>
	{
		LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1); // Stop moving
 8001712:	2102      	movs	r1, #2
 8001714:	4834      	ldr	r0, [pc, #208]	; (80017e8 <move_carriage+0xf8>)
 8001716:	f7ff ffa6 	bl	8001666 <LL_GPIO_ResetOutputPin>
		LL_TIM_OC_SetCompareCH3(TIM2, 0);             // Stop moving
 800171a:	2100      	movs	r1, #0
 800171c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001720:	f7ff ff85 	bl	800162e <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH2(TIM2, 0);             // Stop moving
 8001724:	2100      	movs	r1, #0
 8001726:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800172a:	f7ff ff72 	bl	8001612 <LL_TIM_OC_SetCompareCH2>
		return;
 800172e:	e04d      	b.n	80017cc <move_carriage+0xdc>
	}

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1); // Enable moving
 8001730:	2102      	movs	r1, #2
 8001732:	482d      	ldr	r0, [pc, #180]	; (80017e8 <move_carriage+0xf8>)
 8001734:	f7ff ff89 	bl	800164a <LL_GPIO_SetOutputPin>
	int32_t converted_speed = convert_speed(speed);
 8001738:	ed97 0b00 	vldr	d0, [r7]
 800173c:	f7ff ffbc 	bl	80016b8 <convert_speed>
 8001740:	60f8      	str	r0, [r7, #12]

	if (converted_speed < 0)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	da1f      	bge.n	8001788 <move_carriage+0x98>
	{
		converted_speed = fmax(converted_speed, -200);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f7fe fe8f 	bl	800046c <__aeabi_i2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80017d8 <move_carriage+0xe8>
 8001756:	ec43 2b10 	vmov	d0, r2, r3
 800175a:	f002 fc79 	bl	8004050 <fmax>
 800175e:	ec53 2b10 	vmov	r2, r3, d0
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff f99b 	bl	8000aa0 <__aeabi_d2iz>
 800176a:	4603      	mov	r3, r0
 800176c:	60fb      	str	r3, [r7, #12]
		LL_TIM_OC_SetCompareCH3(TIM2, 0);
 800176e:	2100      	movs	r1, #0
 8001770:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001774:	f7ff ff5b 	bl	800162e <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH2(TIM2, (-((int32_t)converted_speed)));
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	425b      	negs	r3, r3
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001782:	f7ff ff46 	bl	8001612 <LL_TIM_OC_SetCompareCH2>
		return;
 8001786:	e021      	b.n	80017cc <move_carriage+0xdc>
	}

	if (converted_speed > 0)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	dd1e      	ble.n	80017cc <move_carriage+0xdc>
	{
		converted_speed = fmin(converted_speed, 200);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7fe fe6c 	bl	800046c <__aeabi_i2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80017e0 <move_carriage+0xf0>
 800179c:	ec43 2b10 	vmov	d0, r2, r3
 80017a0:	f002 fc7d 	bl	800409e <fmin>
 80017a4:	ec53 2b10 	vmov	r2, r3, d0
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f978 	bl	8000aa0 <__aeabi_d2iz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]
		LL_TIM_OC_SetCompareCH2(TIM2, 0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017ba:	f7ff ff2a 	bl	8001612 <LL_TIM_OC_SetCompareCH2>
		LL_TIM_OC_SetCompareCH3(TIM2, (int32_t)(converted_speed));
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017c6:	f7ff ff32 	bl	800162e <LL_TIM_OC_SetCompareCH3>
		return;
 80017ca:	bf00      	nop
	}
}
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	00000000 	.word	0x00000000
 80017dc:	c0690000 	.word	0xc0690000
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40690000 	.word	0x40690000
 80017e8:	40020800 	.word	0x40020800
 80017ec:	d2f1a9fc 	.word	0xd2f1a9fc
 80017f0:	3f50624d 	.word	0x3f50624d

080017f4 <start_buzzer>:
void start_buzzer(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 80017f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017fc:	480f      	ldr	r0, [pc, #60]	; (800183c <start_buzzer+0x48>)
 80017fe:	f7ff ff41 	bl	8001684 <LL_GPIO_TogglePin>
	LL_mDelay(100);
 8001802:	2064      	movs	r0, #100	; 0x64
 8001804:	f002 fb66 	bl	8003ed4 <LL_mDelay>
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8001808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <start_buzzer+0x48>)
 800180e:	f7ff ff39 	bl	8001684 <LL_GPIO_TogglePin>
	LL_mDelay(100);
 8001812:	2064      	movs	r0, #100	; 0x64
 8001814:	f002 fb5e 	bl	8003ed4 <LL_mDelay>
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8001818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <start_buzzer+0x48>)
 800181e:	f7ff ff31 	bl	8001684 <LL_GPIO_TogglePin>
	LL_mDelay(100);
 8001822:	2064      	movs	r0, #100	; 0x64
 8001824:	f002 fb56 	bl	8003ed4 <LL_mDelay>
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
 8001828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <start_buzzer+0x48>)
 800182e:	f7ff ff29 	bl	8001684 <LL_GPIO_TogglePin>
	LL_mDelay(100);
 8001832:	2064      	movs	r0, #100	; 0x64
 8001834:	f002 fb4e 	bl	8003ed4 <LL_mDelay>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000

08001840 <calibration>:
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
	LL_mDelay(150);
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_9);
}
void calibration(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_1); // Left moving
 8001844:	2102      	movs	r1, #2
 8001846:	4807      	ldr	r0, [pc, #28]	; (8001864 <calibration+0x24>)
 8001848:	f7ff feff 	bl	800164a <LL_GPIO_SetOutputPin>
	LL_TIM_OC_SetCompareCH2(TIM2,0);            // Left moving
 800184c:	2100      	movs	r1, #0
 800184e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001852:	f7ff fede 	bl	8001612 <LL_TIM_OC_SetCompareCH2>
	LL_TIM_OC_SetCompareCH3(TIM2,40);           // Left moving
 8001856:	2128      	movs	r1, #40	; 0x28
 8001858:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800185c:	f7ff fee7 	bl	800162e <LL_TIM_OC_SetCompareCH3>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020800 	.word	0x40020800

08001868 <get_cart_position>:

double get_cart_position(){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	return (TIM8->CNT - 32000) * cart_ticks_to_m;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <get_cart_position+0x38>)
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fde9 	bl	800044c <__aeabi_ui2d>
 800187a:	a307      	add	r3, pc, #28	; (adr r3, 8001898 <get_cart_position+0x30>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe fe5e 	bl	8000540 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	ec43 2b17 	vmov	d7, r2, r3
}
 800188c:	eeb0 0a47 	vmov.f32	s0, s14
 8001890:	eef0 0a67 	vmov.f32	s1, s15
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	9999999a 	.word	0x9999999a
 800189c:	3f099999 	.word	0x3f099999
 80018a0:	40010400 	.word	0x40010400
 80018a4:	00000000 	.word	0x00000000

080018a8 <get_pendulum_position>:
double get_pendulum_position(){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	return (TIM4->CNT - 32000) * pend_ticks_to_rad;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <get_pendulum_position+0x38>)
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fdc9 	bl	800044c <__aeabi_ui2d>
 80018ba:	a307      	add	r3, pc, #28	; (adr r3, 80018d8 <get_pendulum_position+0x30>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe fe3e 	bl	8000540 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80018cc:	eeb0 0a47 	vmov.f32	s0, s14
 80018d0:	eef0 0a67 	vmov.f32	s1, s15
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	54442d18 	.word	0x54442d18
 80018dc:	3f6921fb 	.word	0x3f6921fb
 80018e0:	40000800 	.word	0x40000800
 80018e4:	00000000 	.word	0x00000000

080018e8 <get_cart_speed>:
// FIXME
double get_cart_speed(){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
	TIM5->CNT = 0;
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <get_cart_speed+0x60>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
	uint16_t zeroPos = TIM8->CNT;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <get_cart_speed+0x64>)
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	80fb      	strh	r3, [r7, #6]
	while (zeroPos == TIM8->CNT);
 80018fa:	bf00      	nop
 80018fc:	88fa      	ldrh	r2, [r7, #6]
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <get_cart_speed+0x64>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	429a      	cmp	r2, r3
 8001904:	d0fa      	beq.n	80018fc <get_cart_speed+0x14>
	return TIM5->CNT * (TIM8->CNT - zeroPos) * cart_ticks_to_m;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <get_cart_speed+0x60>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <get_cart_speed+0x64>)
 800190c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	1a8a      	subs	r2, r1, r2
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd98 	bl	800044c <__aeabi_ui2d>
 800191c:	a308      	add	r3, pc, #32	; (adr r3, 8001940 <get_cart_speed+0x58>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe0d 	bl	8000540 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	ec43 2b17 	vmov	d7, r2, r3
}
 800192e:	eeb0 0a47 	vmov.f32	s0, s14
 8001932:	eef0 0a67 	vmov.f32	s1, s15
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	f3af 8000 	nop.w
 8001940:	9999999a 	.word	0x9999999a
 8001944:	3f099999 	.word	0x3f099999
 8001948:	40000c00 	.word	0x40000c00
 800194c:	40010400 	.word	0x40010400

08001950 <get_pendulum_speed>:
// FIXME
double get_pendulum_speed(){
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	TIM5->CNT = 0;
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <get_pendulum_speed+0x60>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
	uint16_t zeroPos = TIM4->CNT;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <get_pendulum_speed+0x64>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	80fb      	strh	r3, [r7, #6]
	while (zeroPos == TIM4->CNT);
 8001962:	bf00      	nop
 8001964:	88fa      	ldrh	r2, [r7, #6]
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <get_pendulum_speed+0x64>)
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	429a      	cmp	r2, r3
 800196c:	d0fa      	beq.n	8001964 <get_pendulum_speed+0x14>
	return TIM5->CNT * (TIM4->CNT - zeroPos) * pend_ticks_to_rad;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <get_pendulum_speed+0x60>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <get_pendulum_speed+0x64>)
 8001974:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	1a8a      	subs	r2, r1, r2
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fd64 	bl	800044c <__aeabi_ui2d>
 8001984:	a308      	add	r3, pc, #32	; (adr r3, 80019a8 <get_pendulum_speed+0x58>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fdd9 	bl	8000540 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	ec43 2b17 	vmov	d7, r2, r3
}
 8001996:	eeb0 0a47 	vmov.f32	s0, s14
 800199a:	eef0 0a67 	vmov.f32	s1, s15
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	54442d18 	.word	0x54442d18
 80019ac:	3f6921fb 	.word	0x3f6921fb
 80019b0:	40000c00 	.word	0x40000c00
 80019b4:	40000800 	.word	0x40000800

080019b8 <get_force>:
double get_force(double x, double theta, double x_dot, double theta_dot){
 80019b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019bc:	b08c      	sub	sp, #48	; 0x30
 80019be:	af00      	add	r7, sp, #0
 80019c0:	ed87 0b06 	vstr	d0, [r7, #24]
 80019c4:	ed87 1b04 	vstr	d1, [r7, #16]
 80019c8:	ed87 2b02 	vstr	d2, [r7, #8]
 80019cc:	ed87 3b00 	vstr	d3, [r7]
	double E = m_p * l * 2 * pow(theta_dot, 2) / 2 -
 80019d0:	a1a1      	add	r1, pc, #644	; (adr r1, 8001c58 <get_force+0x2a0>)
 80019d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019d6:	a3a4      	add	r3, pc, #656	; (adr r3, 8001c68 <get_force+0x2b0>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fdb0 	bl	8000540 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	f7fe fbf2 	bl	80001d4 <__adddf3>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4614      	mov	r4, r2
 80019f6:	461d      	mov	r5, r3
 80019f8:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8001c50 <get_force+0x298>
 80019fc:	ed97 0b00 	vldr	d0, [r7]
 8001a00:	f002 fbf6 	bl	80041f0 <pow>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fd98 	bl	8000540 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a20:	f7fe feb8 	bl	8000794 <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
				m_p * g * l * (cos(theta) - 1);
 8001a2c:	a18a      	add	r1, pc, #552	; (adr r1, 8001c58 <get_force+0x2a0>)
 8001a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a32:	a38b      	add	r3, pc, #556	; (adr r3, 8001c60 <get_force+0x2a8>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fd82 	bl	8000540 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	a388      	add	r3, pc, #544	; (adr r3, 8001c68 <get_force+0x2b0>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fd79 	bl	8000540 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4690      	mov	r8, r2
 8001a54:	4699      	mov	r9, r3
 8001a56:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a5a:	f002 faa5 	bl	8003fa8 <cos>
 8001a5e:	ec51 0b10 	vmov	r0, r1, d0
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	4b82      	ldr	r3, [pc, #520]	; (8001c70 <get_force+0x2b8>)
 8001a68:	f7fe fbb2 	bl	80001d0 <__aeabi_dsub>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4640      	mov	r0, r8
 8001a72:	4649      	mov	r1, r9
 8001a74:	f7fe fd64 	bl	8000540 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
	double E = m_p * l * 2 * pow(theta_dot, 2) / 2 -
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	4629      	mov	r1, r5
 8001a80:	f7fe fba6 	bl	80001d0 <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double F = m_p * g * cos(theta) * sin(theta) -
 8001a8c:	a172      	add	r1, pc, #456	; (adr r1, 8001c58 <get_force+0x2a0>)
 8001a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a92:	a373      	add	r3, pc, #460	; (adr r3, 8001c60 <get_force+0x2a8>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fd52 	bl	8000540 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	ed97 0b04 	vldr	d0, [r7, #16]
 8001aa8:	f002 fa7e 	bl	8003fa8 <cos>
 8001aac:	ec53 2b10 	vmov	r2, r3, d0
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	f7fe fd44 	bl	8000540 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4614      	mov	r4, r2
 8001abe:	461d      	mov	r5, r3
 8001ac0:	ed97 0b04 	vldr	d0, [r7, #16]
 8001ac4:	f002 fb3c 	bl	8004140 <sin>
 8001ac8:	ec53 2b10 	vmov	r2, r3, d0
 8001acc:	4620      	mov	r0, r4
 8001ace:	4629      	mov	r1, r5
 8001ad0:	f7fe fd36 	bl	8000540 <__aeabi_dmul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4614      	mov	r4, r2
 8001ada:	461d      	mov	r5, r3
				m_p * l * pow(theta_dot, 2) * sin(theta) +
 8001adc:	a15e      	add	r1, pc, #376	; (adr r1, 8001c58 <get_force+0x2a0>)
 8001ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae2:	a361      	add	r3, pc, #388	; (adr r3, 8001c68 <get_force+0x2b0>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fd2a 	bl	8000540 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4690      	mov	r8, r2
 8001af2:	4699      	mov	r9, r3
 8001af4:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001c50 <get_force+0x298>
 8001af8:	ed97 0b00 	vldr	d0, [r7]
 8001afc:	f002 fb78 	bl	80041f0 <pow>
 8001b00:	ec53 2b10 	vmov	r2, r3, d0
 8001b04:	4640      	mov	r0, r8
 8001b06:	4649      	mov	r1, r9
 8001b08:	f7fe fd1a 	bl	8000540 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4690      	mov	r8, r2
 8001b12:	4699      	mov	r9, r3
 8001b14:	ed97 0b04 	vldr	d0, [r7, #16]
 8001b18:	f002 fb12 	bl	8004140 <sin>
 8001b1c:	ec53 2b10 	vmov	r2, r3, d0
 8001b20:	4640      	mov	r0, r8
 8001b22:	4649      	mov	r1, r9
 8001b24:	f7fe fd0c 	bl	8000540 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
	double F = m_p * g * cos(theta) * sin(theta) -
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fb4e 	bl	80001d0 <__aeabi_dsub>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
				(m_c + m_p * pow(sin(theta), 2) * 2 * g * sin(theta) / cos(theta)) +
 8001b3c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001b40:	f002 fafe 	bl	8004140 <sin>
 8001b44:	eeb0 7a40 	vmov.f32	s14, s0
 8001b48:	eef0 7a60 	vmov.f32	s15, s1
 8001b4c:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001c50 <get_force+0x298>
 8001b50:	eeb0 0a47 	vmov.f32	s0, s14
 8001b54:	eef0 0a67 	vmov.f32	s1, s15
 8001b58:	f002 fb4a 	bl	80041f0 <pow>
 8001b5c:	ec51 0b10 	vmov	r0, r1, d0
 8001b60:	a33d      	add	r3, pc, #244	; (adr r3, 8001c58 <get_force+0x2a0>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fceb 	bl	8000540 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	f7fe fb2d 	bl	80001d4 <__adddf3>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	a337      	add	r3, pc, #220	; (adr r3, 8001c60 <get_force+0x2a8>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fcda 	bl	8000540 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	ed97 0b04 	vldr	d0, [r7, #16]
 8001b98:	f002 fad2 	bl	8004140 <sin>
 8001b9c:	ec53 2b10 	vmov	r2, r3, d0
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	4649      	mov	r1, r9
 8001ba4:	f7fe fccc 	bl	8000540 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4690      	mov	r8, r2
 8001bae:	4699      	mov	r9, r3
 8001bb0:	ed97 0b04 	vldr	d0, [r7, #16]
 8001bb4:	f002 f9f8 	bl	8003fa8 <cos>
 8001bb8:	ec53 2b10 	vmov	r2, r3, d0
 8001bbc:	4640      	mov	r0, r8
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	f7fe fde8 	bl	8000794 <__aeabi_ddiv>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	a322      	add	r3, pc, #136	; (adr r3, 8001c58 <get_force+0x2a0>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe faff 	bl	80001d4 <__adddf3>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
				m_p * l * pow(theta_dot, 2) * sin(theta) +
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe faf9 	bl	80001d4 <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4614      	mov	r4, r2
 8001be8:	461d      	mov	r5, r3
				alpha * E * theta_dot * cos(theta);
 8001bea:	f04f 0000 	mov.w	r0, #0
 8001bee:	4921      	ldr	r1, [pc, #132]	; (8001c74 <get_force+0x2bc>)
 8001bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bf4:	f7fe fca4 	bl	8000540 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c04:	f7fe fc9c 	bl	8000540 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4690      	mov	r8, r2
 8001c0e:	4699      	mov	r9, r3
 8001c10:	ed97 0b04 	vldr	d0, [r7, #16]
 8001c14:	f002 f9c8 	bl	8003fa8 <cos>
 8001c18:	ec53 2b10 	vmov	r2, r3, d0
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	4649      	mov	r1, r9
 8001c20:	f7fe fc8e 	bl	8000540 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
	double F = m_p * g * cos(theta) * sin(theta) -
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fad2 	bl	80001d4 <__adddf3>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2308 	strd	r2, r3, [r7, #32]
	return F;
 8001c38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c3c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c40:	eeb0 0a47 	vmov.f32	s0, s14
 8001c44:	eef0 0a67 	vmov.f32	s1, s15
 8001c48:	3730      	adds	r7, #48	; 0x30
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c50:	00000000 	.word	0x00000000
 8001c54:	40000000 	.word	0x40000000
 8001c58:	9999999a 	.word	0x9999999a
 8001c5c:	3fc99999 	.word	0x3fc99999
 8001c60:	51eb851f 	.word	0x51eb851f
 8001c64:	40239eb8 	.word	0x40239eb8
 8001c68:	c8b43958 	.word	0xc8b43958
 8001c6c:	3fe3be76 	.word	0x3fe3be76
 8001c70:	3ff00000 	.word	0x3ff00000
 8001c74:	40240000 	.word	0x40240000

08001c78 <get_control_velocity>:
double get_control_velocity(double F){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	ed87 0b00 	vstr	d0, [r7]
	double x_ddot = F / (m_p + m_c);
 8001c82:	a11c      	add	r1, pc, #112	; (adr r1, 8001cf4 <get_control_velocity+0x7c>)
 8001c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c88:	a31a      	add	r3, pc, #104	; (adr r3, 8001cf4 <get_control_velocity+0x7c>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe faa1 	bl	80001d4 <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c9a:	f7fe fd7b 	bl	8000794 <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double v = control_velocity + x_ddot * dt;
 8001ca6:	a115      	add	r1, pc, #84	; (adr r1, 8001cfc <get_control_velocity+0x84>)
 8001ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cb0:	f7fe fc46 	bl	8000540 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <get_control_velocity+0x78>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fa87 	bl	80001d4 <__adddf3>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9c7 2302 	strd	r2, r3, [r7, #8]
	control_velocity = v;
 8001cce:	4908      	ldr	r1, [pc, #32]	; (8001cf0 <get_control_velocity+0x78>)
 8001cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cd4:	e9c1 2300 	strd	r2, r3, [r1]
	return v;
 8001cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cdc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ce0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce4:	eef0 0a67 	vmov.f32	s1, s15
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000088 	.word	0x20000088
 8001cf4:	9999999a 	.word	0x9999999a
 8001cf8:	3fc99999 	.word	0x3fc99999
 8001cfc:	9999999a 	.word	0x9999999a
 8001d00:	3fb99999 	.word	0x3fb99999
 8001d04:	00000000 	.word	0x00000000

08001d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d12:	f7ff fc0f 	bl	8001534 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d1a:	f7ff fbf3 	bl	8001504 <LL_APB1_GRP1_EnableClock>

	/* System interrupt init*/
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d1e:	2007      	movs	r0, #7
 8001d20:	f7ff fb00 	bl	8001324 <__NVIC_SetPriorityGrouping>

	/* Configure the system clock */
	SystemClock_Config();
 8001d24:	f000 f8a2 	bl	8001e6c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d28:	f7ff f9b0 	bl	800108c <MX_GPIO_Init>
	MX_TIM2_Init();
 8001d2c:	f000 fc52 	bl	80025d4 <MX_TIM2_Init>
	MX_TIM4_Init();
 8001d30:	f000 fcda 	bl	80026e8 <MX_TIM4_Init>
	MX_TIM8_Init();
 8001d34:	f000 fd98 	bl	8002868 <MX_TIM8_Init>
	MX_UART5_Init();
 8001d38:	f000 fe6e 	bl	8002a18 <MX_UART5_Init>
	MX_TIM5_Init();
 8001d3c:	f000 fd64 	bl	8002808 <MX_TIM5_Init>

	TIM4->CR1 |= (1<<0); // Start timer 4 to read encoder
 8001d40:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <main+0x150>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a44      	ldr	r2, [pc, #272]	; (8001e58 <main+0x150>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6013      	str	r3, [r2, #0]
	TIM8->CR1 |= (1<<0); // Start timer 8 to read encoder
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <main+0x154>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a42      	ldr	r2, [pc, #264]	; (8001e5c <main+0x154>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]
	TIM5->CR1 |= (1<<0); // Start timer 5
 8001d58:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <main+0x158>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a40      	ldr	r2, [pc, #256]	; (8001e60 <main+0x158>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6013      	str	r3, [r2, #0]
	UART5->CR1 |= USART_CR1_TE | USART_CR1_RE ; // Enable transmission and receiving USART data
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <main+0x15c>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4a3e      	ldr	r2, [pc, #248]	; (8001e64 <main+0x15c>)
 8001d6a:	f043 030c 	orr.w	r3, r3, #12
 8001d6e:	60d3      	str	r3, [r2, #12]
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8001d70:	2110      	movs	r1, #16
 8001d72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d76:	f7ff fc3b 	bl	80015f0 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 8001d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d82:	f7ff fc35 	bl	80015f0 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM2);
 8001d86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d8a:	f7ff fc21 	bl	80015d0 <LL_TIM_EnableCounter>

	calibration();
 8001d8e:	f7ff fd57 	bl	8001840 <calibration>
	start_buzzer();
 8001d92:	f7ff fd2f 	bl	80017f4 <start_buzzer>

	double theta = 0.0;
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double x = 0.0;
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double theta_dot = 0.0;
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double x_dot = 0.0;
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double F = 0.0;
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double v = 0.0;
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9c7 2300 	strd	r2, r3, [r7]

	while (1)
	{
		x = get_cart_position();
 8001dde:	f7ff fd43 	bl	8001868 <get_cart_position>
 8001de2:	ed87 0b08 	vstr	d0, [r7, #32]
		theta = get_pendulum_position();
 8001de6:	f7ff fd5f 	bl	80018a8 <get_pendulum_position>
 8001dea:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
		x_dot = get_cart_speed();
 8001dee:	f7ff fd7b 	bl	80018e8 <get_cart_speed>
 8001df2:	ed87 0b04 	vstr	d0, [r7, #16]
		theta_dot = get_pendulum_speed();
 8001df6:	f7ff fdab 	bl	8001950 <get_pendulum_speed>
 8001dfa:	ed87 0b06 	vstr	d0, [r7, #24]
		F = get_force(x, theta, x_dot, theta_dot);
 8001dfe:	ed97 3b06 	vldr	d3, [r7, #24]
 8001e02:	ed97 2b04 	vldr	d2, [r7, #16]
 8001e06:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001e0a:	ed97 0b08 	vldr	d0, [r7, #32]
 8001e0e:	f7ff fdd3 	bl	80019b8 <get_force>
 8001e12:	ed87 0b02 	vstr	d0, [r7, #8]
		v = get_control_velocity(F);
 8001e16:	ed97 0b02 	vldr	d0, [r7, #8]
 8001e1a:	f7ff ff2d 	bl	8001c78 <get_control_velocity>
 8001e1e:	ed87 0b00 	vstr	d0, [r7]
		move_carriage(v);
 8001e22:	ed97 0b00 	vldr	d0, [r7]
 8001e26:	f7ff fc63 	bl	80016f0 <move_carriage>
		LL_mDelay((int32_t)(dt * 1000));
 8001e2a:	a109      	add	r1, pc, #36	; (adr r1, 8001e50 <main+0x148>)
 8001e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <main+0x160>)
 8001e36:	f7fe fb83 	bl	8000540 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fe2d 	bl	8000aa0 <__aeabi_d2iz>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 f843 	bl	8003ed4 <LL_mDelay>
		x = get_cart_position();
 8001e4e:	e7c6      	b.n	8001dde <main+0xd6>
 8001e50:	9999999a 	.word	0x9999999a
 8001e54:	3fb99999 	.word	0x3fb99999
 8001e58:	40000800 	.word	0x40000800
 8001e5c:	40010400 	.word	0x40010400
 8001e60:	40000c00 	.word	0x40000c00
 8001e64:	40005000 	.word	0x40005000
 8001e68:	408f4000 	.word	0x408f4000

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001e70:	2005      	movs	r0, #5
 8001e72:	f7ff fb77 	bl	8001564 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001e76:	bf00      	nop
 8001e78:	f7ff fb88 	bl	800158c <LL_FLASH_GetLatency>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d1fa      	bne.n	8001e78 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001e82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e86:	f7ff fb8f 	bl	80015a8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8001e8a:	f7ff fa6f 	bl	800136c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001e8e:	bf00      	nop
 8001e90:	f7ff fa7c 	bl	800138c <LL_RCC_HSE_IsReady>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d1fa      	bne.n	8001e90 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001ea0:	2108      	movs	r1, #8
 8001ea2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ea6:	f7ff fb07 	bl	80014b8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001eaa:	f7ff fae1 	bl	8001470 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001eae:	bf00      	nop
 8001eb0:	f7ff faee 	bl	8001490 <LL_RCC_PLL_IsReady>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d1fa      	bne.n	8001eb0 <SystemClock_Config+0x44>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fa9c 	bl	80013f8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001ec0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001ec4:	f7ff faac 	bl	8001420 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001ec8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ecc:	f7ff fabc 	bl	8001448 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f7ff fa6f 	bl	80013b4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff fa80 	bl	80013dc <LL_RCC_GetSysClkSource>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d1fa      	bne.n	8001ed8 <SystemClock_Config+0x6c>
  {

  }
  LL_Init1msTick(168000000);
 8001ee2:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <SystemClock_Config+0x88>)
 8001ee4:	f001 ffe8 	bl	8003eb8 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <SystemClock_Config+0x88>)
 8001eea:	f002 f819 	bl	8003f20 <LL_SetSystemCoreClock>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	0a037a00 	.word	0x0a037a00

08001ef8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4013      	ands	r3, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	bf0c      	ite	eq
 8001f0e:	2301      	moveq	r3, #1
 8001f10:	2300      	movne	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6153      	str	r3, [r2, #20]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <NMI_Handler+0x4>

08001f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler+0x4>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
//	//end_sensor_signal();
//	SCB->AIRCR = 0x5FA0004; // Software reset of MCU


  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001f9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fa2:	f7ff ffa9 	bl	8001ef8 <LL_EXTI_IsActiveFlag_0_31>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <EXTI9_5_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 8001fac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fb0:	f7ff ffb8 	bl	8001f24 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0




  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001fca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fce:	f7ff ff93 	bl	8001ef8 <LL_EXTI_IsActiveFlag_0_31>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001fd8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fdc:	f7ff ffa2 	bl	8001f24 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <SystemInit+0x20>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <SystemInit+0x20>)
 8001ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_GetPriorityGrouping>:
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_EnableIRQ>:
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0b      	blt.n	800204e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <__NVIC_EnableIRQ+0x38>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <LL_AHB1_GRP1_EnableClock>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4313      	orrs	r3, r2
 800212e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40023800 	.word	0x40023800

0800214c <LL_APB1_GRP1_EnableClock>:
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <LL_APB1_GRP1_EnableClock+0x2c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4013      	ands	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40023800 	.word	0x40023800

0800217c <LL_APB2_GRP1_EnableClock>:
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4313      	orrs	r3, r2
 800218e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40023800 	.word	0x40023800

080021ac <LL_TIM_DisableARRPreload>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_TIM_OC_DisableFast>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d01c      	beq.n	8002216 <LL_TIM_OC_DisableFast+0x4a>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d017      	beq.n	8002212 <LL_TIM_OC_DisableFast+0x46>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d012      	beq.n	800220e <LL_TIM_OC_DisableFast+0x42>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b40      	cmp	r3, #64	; 0x40
 80021ec:	d00d      	beq.n	800220a <LL_TIM_OC_DisableFast+0x3e>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f4:	d007      	beq.n	8002206 <LL_TIM_OC_DisableFast+0x3a>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d101      	bne.n	8002202 <LL_TIM_OC_DisableFast+0x36>
 80021fe:	2305      	movs	r3, #5
 8002200:	e00a      	b.n	8002218 <LL_TIM_OC_DisableFast+0x4c>
 8002202:	2306      	movs	r3, #6
 8002204:	e008      	b.n	8002218 <LL_TIM_OC_DisableFast+0x4c>
 8002206:	2304      	movs	r3, #4
 8002208:	e006      	b.n	8002218 <LL_TIM_OC_DisableFast+0x4c>
 800220a:	2303      	movs	r3, #3
 800220c:	e004      	b.n	8002218 <LL_TIM_OC_DisableFast+0x4c>
 800220e:	2302      	movs	r3, #2
 8002210:	e002      	b.n	8002218 <LL_TIM_OC_DisableFast+0x4c>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <LL_TIM_OC_DisableFast+0x4c>
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3318      	adds	r3, #24
 800221e:	4619      	mov	r1, r3
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <LL_TIM_OC_DisableFast+0x84>)
 8002224:	5cd3      	ldrb	r3, [r2, r3]
 8002226:	440b      	add	r3, r1
 8002228:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	4908      	ldr	r1, [pc, #32]	; (8002254 <LL_TIM_OC_DisableFast+0x88>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	4619      	mov	r1, r3
 8002236:	2304      	movs	r3, #4
 8002238:	408b      	lsls	r3, r1
 800223a:	43db      	mvns	r3, r3
 800223c:	401a      	ands	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	601a      	str	r2, [r3, #0]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	08005f28 	.word	0x08005f28
 8002254:	08005f30 	.word	0x08005f30

08002258 <LL_TIM_OC_EnablePreload>:
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d01c      	beq.n	80022a2 <LL_TIM_OC_EnablePreload+0x4a>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d017      	beq.n	800229e <LL_TIM_OC_EnablePreload+0x46>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b10      	cmp	r3, #16
 8002272:	d012      	beq.n	800229a <LL_TIM_OC_EnablePreload+0x42>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b40      	cmp	r3, #64	; 0x40
 8002278:	d00d      	beq.n	8002296 <LL_TIM_OC_EnablePreload+0x3e>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	d007      	beq.n	8002292 <LL_TIM_OC_EnablePreload+0x3a>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002288:	d101      	bne.n	800228e <LL_TIM_OC_EnablePreload+0x36>
 800228a:	2305      	movs	r3, #5
 800228c:	e00a      	b.n	80022a4 <LL_TIM_OC_EnablePreload+0x4c>
 800228e:	2306      	movs	r3, #6
 8002290:	e008      	b.n	80022a4 <LL_TIM_OC_EnablePreload+0x4c>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <LL_TIM_OC_EnablePreload+0x4c>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <LL_TIM_OC_EnablePreload+0x4c>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <LL_TIM_OC_EnablePreload+0x4c>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_TIM_OC_EnablePreload+0x4c>
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3318      	adds	r3, #24
 80022aa:	4619      	mov	r1, r3
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <LL_TIM_OC_EnablePreload+0x80>)
 80022b0:	5cd3      	ldrb	r3, [r2, r3]
 80022b2:	440b      	add	r3, r1
 80022b4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <LL_TIM_OC_EnablePreload+0x84>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	4619      	mov	r1, r3
 80022c2:	2308      	movs	r3, #8
 80022c4:	408b      	lsls	r3, r1
 80022c6:	431a      	orrs	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	08005f28 	.word	0x08005f28
 80022dc:	08005f30 	.word	0x08005f30

080022e0 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d01c      	beq.n	800232c <LL_TIM_IC_SetActiveInput+0x4c>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d017      	beq.n	8002328 <LL_TIM_IC_SetActiveInput+0x48>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d012      	beq.n	8002324 <LL_TIM_IC_SetActiveInput+0x44>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d00d      	beq.n	8002320 <LL_TIM_IC_SetActiveInput+0x40>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800230a:	d007      	beq.n	800231c <LL_TIM_IC_SetActiveInput+0x3c>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002312:	d101      	bne.n	8002318 <LL_TIM_IC_SetActiveInput+0x38>
 8002314:	2305      	movs	r3, #5
 8002316:	e00a      	b.n	800232e <LL_TIM_IC_SetActiveInput+0x4e>
 8002318:	2306      	movs	r3, #6
 800231a:	e008      	b.n	800232e <LL_TIM_IC_SetActiveInput+0x4e>
 800231c:	2304      	movs	r3, #4
 800231e:	e006      	b.n	800232e <LL_TIM_IC_SetActiveInput+0x4e>
 8002320:	2303      	movs	r3, #3
 8002322:	e004      	b.n	800232e <LL_TIM_IC_SetActiveInput+0x4e>
 8002324:	2302      	movs	r3, #2
 8002326:	e002      	b.n	800232e <LL_TIM_IC_SetActiveInput+0x4e>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <LL_TIM_IC_SetActiveInput+0x4e>
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3318      	adds	r3, #24
 8002334:	4619      	mov	r1, r3
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <LL_TIM_IC_SetActiveInput+0x94>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	440b      	add	r3, r1
 800233e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	490c      	ldr	r1, [pc, #48]	; (8002378 <LL_TIM_IC_SetActiveInput+0x98>)
 8002348:	5ccb      	ldrb	r3, [r1, r3]
 800234a:	4619      	mov	r1, r3
 800234c:	2303      	movs	r3, #3
 800234e:	408b      	lsls	r3, r1
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0c1b      	lsrs	r3, r3, #16
 8002358:	7df9      	ldrb	r1, [r7, #23]
 800235a:	4807      	ldr	r0, [pc, #28]	; (8002378 <LL_TIM_IC_SetActiveInput+0x98>)
 800235c:	5c41      	ldrb	r1, [r0, r1]
 800235e:	408b      	lsls	r3, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	08005f28 	.word	0x08005f28
 8002378:	08005f38 	.word	0x08005f38

0800237c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d01c      	beq.n	80023c8 <LL_TIM_IC_SetPrescaler+0x4c>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d017      	beq.n	80023c4 <LL_TIM_IC_SetPrescaler+0x48>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b10      	cmp	r3, #16
 8002398:	d012      	beq.n	80023c0 <LL_TIM_IC_SetPrescaler+0x44>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d00d      	beq.n	80023bc <LL_TIM_IC_SetPrescaler+0x40>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a6:	d007      	beq.n	80023b8 <LL_TIM_IC_SetPrescaler+0x3c>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d101      	bne.n	80023b4 <LL_TIM_IC_SetPrescaler+0x38>
 80023b0:	2305      	movs	r3, #5
 80023b2:	e00a      	b.n	80023ca <LL_TIM_IC_SetPrescaler+0x4e>
 80023b4:	2306      	movs	r3, #6
 80023b6:	e008      	b.n	80023ca <LL_TIM_IC_SetPrescaler+0x4e>
 80023b8:	2304      	movs	r3, #4
 80023ba:	e006      	b.n	80023ca <LL_TIM_IC_SetPrescaler+0x4e>
 80023bc:	2303      	movs	r3, #3
 80023be:	e004      	b.n	80023ca <LL_TIM_IC_SetPrescaler+0x4e>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e002      	b.n	80023ca <LL_TIM_IC_SetPrescaler+0x4e>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_TIM_IC_SetPrescaler+0x4e>
 80023c8:	2300      	movs	r3, #0
 80023ca:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3318      	adds	r3, #24
 80023d0:	4619      	mov	r1, r3
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <LL_TIM_IC_SetPrescaler+0x94>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	440b      	add	r3, r1
 80023da:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	490c      	ldr	r1, [pc, #48]	; (8002414 <LL_TIM_IC_SetPrescaler+0x98>)
 80023e4:	5ccb      	ldrb	r3, [r1, r3]
 80023e6:	4619      	mov	r1, r3
 80023e8:	230c      	movs	r3, #12
 80023ea:	408b      	lsls	r3, r1
 80023ec:	43db      	mvns	r3, r3
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0c1b      	lsrs	r3, r3, #16
 80023f4:	7df9      	ldrb	r1, [r7, #23]
 80023f6:	4807      	ldr	r0, [pc, #28]	; (8002414 <LL_TIM_IC_SetPrescaler+0x98>)
 80023f8:	5c41      	ldrb	r1, [r0, r1]
 80023fa:	408b      	lsls	r3, r1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	601a      	str	r2, [r3, #0]
}
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	08005f28 	.word	0x08005f28
 8002414:	08005f38 	.word	0x08005f38

08002418 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d01c      	beq.n	8002464 <LL_TIM_IC_SetFilter+0x4c>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d017      	beq.n	8002460 <LL_TIM_IC_SetFilter+0x48>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b10      	cmp	r3, #16
 8002434:	d012      	beq.n	800245c <LL_TIM_IC_SetFilter+0x44>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d00d      	beq.n	8002458 <LL_TIM_IC_SetFilter+0x40>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002442:	d007      	beq.n	8002454 <LL_TIM_IC_SetFilter+0x3c>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d101      	bne.n	8002450 <LL_TIM_IC_SetFilter+0x38>
 800244c:	2305      	movs	r3, #5
 800244e:	e00a      	b.n	8002466 <LL_TIM_IC_SetFilter+0x4e>
 8002450:	2306      	movs	r3, #6
 8002452:	e008      	b.n	8002466 <LL_TIM_IC_SetFilter+0x4e>
 8002454:	2304      	movs	r3, #4
 8002456:	e006      	b.n	8002466 <LL_TIM_IC_SetFilter+0x4e>
 8002458:	2303      	movs	r3, #3
 800245a:	e004      	b.n	8002466 <LL_TIM_IC_SetFilter+0x4e>
 800245c:	2302      	movs	r3, #2
 800245e:	e002      	b.n	8002466 <LL_TIM_IC_SetFilter+0x4e>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <LL_TIM_IC_SetFilter+0x4e>
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3318      	adds	r3, #24
 800246c:	4619      	mov	r1, r3
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <LL_TIM_IC_SetFilter+0x94>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	440b      	add	r3, r1
 8002476:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	490c      	ldr	r1, [pc, #48]	; (80024b0 <LL_TIM_IC_SetFilter+0x98>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	4619      	mov	r1, r3
 8002484:	23f0      	movs	r3, #240	; 0xf0
 8002486:	408b      	lsls	r3, r1
 8002488:	43db      	mvns	r3, r3
 800248a:	401a      	ands	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	7df9      	ldrb	r1, [r7, #23]
 8002492:	4807      	ldr	r0, [pc, #28]	; (80024b0 <LL_TIM_IC_SetFilter+0x98>)
 8002494:	5c41      	ldrb	r1, [r0, r1]
 8002496:	408b      	lsls	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	601a      	str	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	08005f28 	.word	0x08005f28
 80024b0:	08005f38 	.word	0x08005f38

080024b4 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d01c      	beq.n	8002500 <LL_TIM_IC_SetPolarity+0x4c>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d017      	beq.n	80024fc <LL_TIM_IC_SetPolarity+0x48>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d012      	beq.n	80024f8 <LL_TIM_IC_SetPolarity+0x44>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d00d      	beq.n	80024f4 <LL_TIM_IC_SetPolarity+0x40>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024de:	d007      	beq.n	80024f0 <LL_TIM_IC_SetPolarity+0x3c>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e6:	d101      	bne.n	80024ec <LL_TIM_IC_SetPolarity+0x38>
 80024e8:	2305      	movs	r3, #5
 80024ea:	e00a      	b.n	8002502 <LL_TIM_IC_SetPolarity+0x4e>
 80024ec:	2306      	movs	r3, #6
 80024ee:	e008      	b.n	8002502 <LL_TIM_IC_SetPolarity+0x4e>
 80024f0:	2304      	movs	r3, #4
 80024f2:	e006      	b.n	8002502 <LL_TIM_IC_SetPolarity+0x4e>
 80024f4:	2303      	movs	r3, #3
 80024f6:	e004      	b.n	8002502 <LL_TIM_IC_SetPolarity+0x4e>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e002      	b.n	8002502 <LL_TIM_IC_SetPolarity+0x4e>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <LL_TIM_IC_SetPolarity+0x4e>
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a1a      	ldr	r2, [r3, #32]
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	490b      	ldr	r1, [pc, #44]	; (8002538 <LL_TIM_IC_SetPolarity+0x84>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	4619      	mov	r1, r3
 8002510:	230a      	movs	r3, #10
 8002512:	408b      	lsls	r3, r1
 8002514:	43db      	mvns	r3, r3
 8002516:	401a      	ands	r2, r3
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	4907      	ldr	r1, [pc, #28]	; (8002538 <LL_TIM_IC_SetPolarity+0x84>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	4619      	mov	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	408b      	lsls	r3, r1
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	08005f40 	.word	0x08005f40

0800253c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800254e:	f023 0307 	bic.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	609a      	str	r2, [r3, #8]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 0207 	bic.w	r2, r3, #7
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	609a      	str	r2, [r3, #8]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	605a      	str	r2, [r3, #4]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	609a      	str	r2, [r3, #8]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b094      	sub	sp, #80	; 0x50
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80025da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80025ea:	f107 031c 	add.w	r3, r7, #28
 80025ee:	2220      	movs	r2, #32
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f001 fcce 	bl	8003f94 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	611a      	str	r2, [r3, #16]
 8002606:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002608:	2001      	movs	r0, #1
 800260a:	f7ff fd9f 	bl	800214c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 800260e:	2304      	movs	r3, #4
 8002610:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002612:	2300      	movs	r3, #0
 8002614:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000;
 8002616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800261c:	2300      	movs	r3, #0
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002620:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800262a:	f000 fec5 	bl	80033b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800262e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002632:	f7ff fdbb 	bl	80021ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002636:	2100      	movs	r1, #0
 8002638:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800263c:	f7ff ff7e 	bl	800253c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8002640:	2110      	movs	r1, #16
 8002642:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002646:	f7ff fe07 	bl	8002258 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800264a:	2360      	movs	r3, #96	; 0x60
 800264c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	461a      	mov	r2, r3
 8002664:	2110      	movs	r1, #16
 8002666:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800266a:	f000 ff3f 	bl	80034ec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 800266e:	2110      	movs	r1, #16
 8002670:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002674:	f7ff fdaa 	bl	80021cc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8002678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800267c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002680:	f7ff fdea 	bl	8002258 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	461a      	mov	r2, r3
 800268a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002692:	f000 ff2b 	bl	80034ec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8002696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800269a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800269e:	f7ff fd95 	bl	80021cc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80026a2:	2100      	movs	r1, #0
 80026a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026a8:	f7ff ff70 	bl	800258c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80026ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026b0:	f7ff ff7f 	bl	80025b2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80026b4:	2001      	movs	r0, #1
 80026b6:	f7ff fd31 	bl	800211c <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 80026ba:	2306      	movs	r3, #6
 80026bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026be:	2302      	movs	r3, #2
 80026c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4803      	ldr	r0, [pc, #12]	; (80026e4 <MX_TIM2_Init+0x110>)
 80026d8:	f000 fc4e 	bl	8002f78 <LL_GPIO_Init>

}
 80026dc:	bf00      	nop
 80026de:	3750      	adds	r7, #80	; 0x50
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40020000 	.word	0x40020000

080026e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	; 0x30
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
 800270c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800270e:	2004      	movs	r0, #4
 8002710:	f7ff fd1c 	bl	800214c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002714:	2002      	movs	r0, #2
 8002716:	f7ff fd01 	bl	800211c <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800271a:	23c0      	movs	r3, #192	; 0xc0
 800271c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800271e:	2302      	movs	r3, #2
 8002720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002722:	2303      	movs	r3, #3
 8002724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800272a:	2301      	movs	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800272e:	2302      	movs	r3, #2
 8002730:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4832      	ldr	r0, [pc, #200]	; (8002800 <MX_TIM4_Init+0x118>)
 8002738:	f000 fc1e 	bl	8002f78 <LL_GPIO_Init>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800273c:	f7ff fc64 	bl	8002008 <__NVIC_GetPriorityGrouping>
 8002740:	4603      	mov	r3, r0
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fcb4 	bl	80020b4 <NVIC_EncodePriority>
 800274c:	4603      	mov	r3, r0
 800274e:	4619      	mov	r1, r3
 8002750:	201e      	movs	r0, #30
 8002752:	f7ff fc85 	bl	8002060 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8002756:	201e      	movs	r0, #30
 8002758:	f7ff fc64 	bl	8002024 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 800275c:	2101      	movs	r1, #1
 800275e:	4829      	ldr	r0, [pc, #164]	; (8002804 <MX_TIM4_Init+0x11c>)
 8002760:	f7ff ff01 	bl	8002566 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002764:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002768:	2101      	movs	r1, #1
 800276a:	4826      	ldr	r0, [pc, #152]	; (8002804 <MX_TIM4_Init+0x11c>)
 800276c:	f7ff fdb8 	bl	80022e0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002770:	2200      	movs	r2, #0
 8002772:	2101      	movs	r1, #1
 8002774:	4823      	ldr	r0, [pc, #140]	; (8002804 <MX_TIM4_Init+0x11c>)
 8002776:	f7ff fe01 	bl	800237c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 800277a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800277e:	2101      	movs	r1, #1
 8002780:	4820      	ldr	r0, [pc, #128]	; (8002804 <MX_TIM4_Init+0x11c>)
 8002782:	f7ff fe49 	bl	8002418 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002786:	2200      	movs	r2, #0
 8002788:	2101      	movs	r1, #1
 800278a:	481e      	ldr	r0, [pc, #120]	; (8002804 <MX_TIM4_Init+0x11c>)
 800278c:	f7ff fe92 	bl	80024b4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002794:	2110      	movs	r1, #16
 8002796:	481b      	ldr	r0, [pc, #108]	; (8002804 <MX_TIM4_Init+0x11c>)
 8002798:	f7ff fda2 	bl	80022e0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800279c:	2200      	movs	r2, #0
 800279e:	2110      	movs	r1, #16
 80027a0:	4818      	ldr	r0, [pc, #96]	; (8002804 <MX_TIM4_Init+0x11c>)
 80027a2:	f7ff fdeb 	bl	800237c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 80027a6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80027aa:	2110      	movs	r1, #16
 80027ac:	4815      	ldr	r0, [pc, #84]	; (8002804 <MX_TIM4_Init+0x11c>)
 80027ae:	f7ff fe33 	bl	8002418 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2110      	movs	r1, #16
 80027b6:	4813      	ldr	r0, [pc, #76]	; (8002804 <MX_TIM4_Init+0x11c>)
 80027b8:	f7ff fe7c 	bl	80024b4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80027c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	480b      	ldr	r0, [pc, #44]	; (8002804 <MX_TIM4_Init+0x11c>)
 80027d6:	f000 fdef 	bl	80033b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80027da:	480a      	ldr	r0, [pc, #40]	; (8002804 <MX_TIM4_Init+0x11c>)
 80027dc:	f7ff fce6 	bl	80021ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_CC1IF);
 80027e0:	2130      	movs	r1, #48	; 0x30
 80027e2:	4808      	ldr	r0, [pc, #32]	; (8002804 <MX_TIM4_Init+0x11c>)
 80027e4:	f7ff fed2 	bl	800258c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80027e8:	4806      	ldr	r0, [pc, #24]	; (8002804 <MX_TIM4_Init+0x11c>)
 80027ea:	f7ff fee2 	bl	80025b2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */
  TIM4->CNT = 32000; // Write this number to register to avoid negative numbers and overflow
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <MX_TIM4_Init+0x11c>)
 80027f0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM4_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	3730      	adds	r7, #48	; 0x30
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40020400 	.word	0x40020400
 8002804:	40000800 	.word	0x40000800

08002808 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 800281c:	2008      	movs	r0, #8
 800281e:	f7ff fc95 	bl	800214c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 42;
 8002822:	232a      	movs	r3, #42	; 0x2a
 8002824:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	4619      	mov	r1, r3
 8002838:	480a      	ldr	r0, [pc, #40]	; (8002864 <MX_TIM5_Init+0x5c>)
 800283a:	f000 fdbd 	bl	80033b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 800283e:	4809      	ldr	r0, [pc, #36]	; (8002864 <MX_TIM5_Init+0x5c>)
 8002840:	f7ff fcb4 	bl	80021ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002844:	2100      	movs	r1, #0
 8002846:	4807      	ldr	r0, [pc, #28]	; (8002864 <MX_TIM5_Init+0x5c>)
 8002848:	f7ff fe78 	bl	800253c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800284c:	2100      	movs	r1, #0
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_TIM5_Init+0x5c>)
 8002850:	f7ff fe9c 	bl	800258c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002854:	4803      	ldr	r0, [pc, #12]	; (8002864 <MX_TIM5_Init+0x5c>)
 8002856:	f7ff feac 	bl	80025b2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40000c00 	.word	0x40000c00

08002868 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08c      	sub	sp, #48	; 0x30
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800286e:	f107 031c 	add.w	r3, r7, #28
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
 800287c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
 800288c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 800288e:	2002      	movs	r0, #2
 8002890:	f7ff fc74 	bl	800217c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002894:	2004      	movs	r0, #4
 8002896:	f7ff fc41 	bl	800211c <LL_AHB1_GRP1_EnableClock>
  /**TIM8 GPIO Configuration
  PC6   ------> TIM8_CH1
  PC7   ------> TIM8_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800289a:	23c0      	movs	r3, #192	; 0xc0
 800289c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800289e:	2302      	movs	r3, #2
 80028a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 80028ae:	2303      	movs	r3, #3
 80028b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	482b      	ldr	r0, [pc, #172]	; (8002964 <MX_TIM8_Init+0xfc>)
 80028b8:	f000 fb5e 	bl	8002f78 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  LL_TIM_SetEncoderMode(TIM8, LL_TIM_ENCODERMODE_X2_TI1);
 80028bc:	2101      	movs	r1, #1
 80028be:	482a      	ldr	r0, [pc, #168]	; (8002968 <MX_TIM8_Init+0x100>)
 80028c0:	f7ff fe51 	bl	8002566 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80028c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028c8:	2101      	movs	r1, #1
 80028ca:	4827      	ldr	r0, [pc, #156]	; (8002968 <MX_TIM8_Init+0x100>)
 80028cc:	f7ff fd08 	bl	80022e0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2101      	movs	r1, #1
 80028d4:	4824      	ldr	r0, [pc, #144]	; (8002968 <MX_TIM8_Init+0x100>)
 80028d6:	f7ff fd51 	bl	800237c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 80028da:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80028de:	2101      	movs	r1, #1
 80028e0:	4821      	ldr	r0, [pc, #132]	; (8002968 <MX_TIM8_Init+0x100>)
 80028e2:	f7ff fd99 	bl	8002418 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2101      	movs	r1, #1
 80028ea:	481f      	ldr	r0, [pc, #124]	; (8002968 <MX_TIM8_Init+0x100>)
 80028ec:	f7ff fde2 	bl	80024b4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80028f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028f4:	2110      	movs	r1, #16
 80028f6:	481c      	ldr	r0, [pc, #112]	; (8002968 <MX_TIM8_Init+0x100>)
 80028f8:	f7ff fcf2 	bl	80022e0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2110      	movs	r1, #16
 8002900:	4819      	ldr	r0, [pc, #100]	; (8002968 <MX_TIM8_Init+0x100>)
 8002902:	f7ff fd3b 	bl	800237c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 8002906:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800290a:	2110      	movs	r1, #16
 800290c:	4816      	ldr	r0, [pc, #88]	; (8002968 <MX_TIM8_Init+0x100>)
 800290e:	f7ff fd83 	bl	8002418 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002912:	2200      	movs	r2, #0
 8002914:	2110      	movs	r1, #16
 8002916:	4814      	ldr	r0, [pc, #80]	; (8002968 <MX_TIM8_Init+0x100>)
 8002918:	f7ff fdcc 	bl	80024b4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002920:	2300      	movs	r3, #0
 8002922:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800292a:	2300      	movs	r3, #0
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	480b      	ldr	r0, [pc, #44]	; (8002968 <MX_TIM8_Init+0x100>)
 800293a:	f000 fd3d 	bl	80033b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 800293e:	480a      	ldr	r0, [pc, #40]	; (8002968 <MX_TIM8_Init+0x100>)
 8002940:	f7ff fc34 	bl	80021ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8002944:	2100      	movs	r1, #0
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <MX_TIM8_Init+0x100>)
 8002948:	f7ff fe20 	bl	800258c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 800294c:	4806      	ldr	r0, [pc, #24]	; (8002968 <MX_TIM8_Init+0x100>)
 800294e:	f7ff fe30 	bl	80025b2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM8_Init 2 */
  TIM8->CNT = 32000; // Write this number to register to avoid negative numbers and overflow
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <MX_TIM8_Init+0x100>)
 8002954:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM8_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	3730      	adds	r7, #48	; 0x30
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40020800 	.word	0x40020800
 8002968:	40010400 	.word	0x40010400

0800296c <LL_AHB1_GRP1_EnableClock>:
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4313      	orrs	r3, r2
 800297e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40023800 	.word	0x40023800

0800299c <LL_APB1_GRP1_EnableClock>:
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ba:	68fb      	ldr	r3, [r7, #12]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40023800 	.word	0x40023800

080029cc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	615a      	str	r2, [r3, #20]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]
 8002a2e:	615a      	str	r2, [r3, #20]
 8002a30:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
 8002a40:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8002a42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a46:	f7ff ffa9 	bl	800299c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002a4a:	2004      	movs	r0, #4
 8002a4c:	f7ff ff8e 	bl	800296c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002a50:	2008      	movs	r0, #8
 8002a52:	f7ff ff8b 	bl	800296c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8002a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	4619      	mov	r1, r3
 8002a74:	4819      	ldr	r0, [pc, #100]	; (8002adc <MX_UART5_Init+0xc4>)
 8002a76:	f000 fa7f 	bl	8002f78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <MX_UART5_Init+0xc8>)
 8002a98:	f000 fa6e 	bl	8002f78 <LL_GPIO_Init>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002a9c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002aa0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002aae:	230c      	movs	r3, #12
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4808      	ldr	r0, [pc, #32]	; (8002ae4 <MX_UART5_Init+0xcc>)
 8002ac2:	f001 f95f 	bl	8003d84 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002ac6:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <MX_UART5_Init+0xcc>)
 8002ac8:	f7ff ff90 	bl	80029ec <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8002acc:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_UART5_Init+0xcc>)
 8002ace:	f7ff ff7d 	bl	80029cc <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	3738      	adds	r7, #56	; 0x38
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40020800 	.word	0x40020800
 8002ae0:	40020c00 	.word	0x40020c00
 8002ae4:	40005000 	.word	0x40005000

08002ae8 <Reset_Handler>:
 8002ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b20 <LoopFillZerobss+0x12>
 8002aec:	480d      	ldr	r0, [pc, #52]	; (8002b24 <LoopFillZerobss+0x16>)
 8002aee:	490e      	ldr	r1, [pc, #56]	; (8002b28 <LoopFillZerobss+0x1a>)
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <LoopFillZerobss+0x1e>)
 8002af2:	2300      	movs	r3, #0
 8002af4:	e002      	b.n	8002afc <LoopCopyDataInit>

08002af6 <CopyDataInit>:
 8002af6:	58d4      	ldr	r4, [r2, r3]
 8002af8:	50c4      	str	r4, [r0, r3]
 8002afa:	3304      	adds	r3, #4

08002afc <LoopCopyDataInit>:
 8002afc:	18c4      	adds	r4, r0, r3
 8002afe:	428c      	cmp	r4, r1
 8002b00:	d3f9      	bcc.n	8002af6 <CopyDataInit>
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <LoopFillZerobss+0x22>)
 8002b04:	4c0b      	ldr	r4, [pc, #44]	; (8002b34 <LoopFillZerobss+0x26>)
 8002b06:	2300      	movs	r3, #0
 8002b08:	e001      	b.n	8002b0e <LoopFillZerobss>

08002b0a <FillZerobss>:
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	3204      	adds	r2, #4

08002b0e <LoopFillZerobss>:
 8002b0e:	42a2      	cmp	r2, r4
 8002b10:	d3fb      	bcc.n	8002b0a <FillZerobss>
 8002b12:	f7ff fa67 	bl	8001fe4 <SystemInit>
 8002b16:	f001 fa19 	bl	8003f4c <__libc_init_array>
 8002b1a:	f7ff f8f5 	bl	8001d08 <main>
 8002b1e:	4770      	bx	lr
 8002b20:	20020000 	.word	0x20020000
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000068 	.word	0x20000068
 8002b2c:	08006160 	.word	0x08006160
 8002b30:	20000068 	.word	0x20000068
 8002b34:	20000090 	.word	0x20000090

08002b38 <ADC_IRQHandler>:
 8002b38:	e7fe      	b.n	8002b38 <ADC_IRQHandler>
	...

08002b3c <LL_EXTI_EnableIT_0_31>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <LL_EXTI_EnableIT_0_31+0x20>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4904      	ldr	r1, [pc, #16]	; (8002b5c <LL_EXTI_EnableIT_0_31+0x20>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <LL_EXTI_DisableIT_0_31>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <LL_EXTI_DisableIT_0_31+0x24>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	4904      	ldr	r1, [pc, #16]	; (8002b84 <LL_EXTI_DisableIT_0_31+0x24>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40013c00 	.word	0x40013c00

08002b88 <LL_EXTI_EnableEvent_0_31>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4904      	ldr	r1, [pc, #16]	; (8002ba8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	40013c00 	.word	0x40013c00

08002bac <LL_EXTI_DisableEvent_0_31>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	4904      	ldr	r1, [pc, #16]	; (8002bd0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	4904      	ldr	r1, [pc, #16]	; (8002bf4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40013c00 	.word	0x40013c00

08002bf8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	4904      	ldr	r1, [pc, #16]	; (8002c1c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	4904      	ldr	r1, [pc, #16]	; (8002c40 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60cb      	str	r3, [r1, #12]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40013c00 	.word	0x40013c00

08002c44 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	4904      	ldr	r1, [pc, #16]	; (8002c68 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	60cb      	str	r3, [r1, #12]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40013c00 	.word	0x40013c00

08002c6c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	791b      	ldrb	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d065      	beq.n	8002d4c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d06c      	beq.n	8002d62 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	795b      	ldrb	r3, [r3, #5]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d01c      	beq.n	8002cca <LL_EXTI_Init+0x5e>
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	dc25      	bgt.n	8002ce0 <LL_EXTI_Init+0x74>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <LL_EXTI_Init+0x32>
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d00b      	beq.n	8002cb4 <LL_EXTI_Init+0x48>
 8002c9c:	e020      	b.n	8002ce0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ff82 	bl	8002bac <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff45 	bl	8002b3c <LL_EXTI_EnableIT_0_31>
          break;
 8002cb2:	e018      	b.n	8002ce6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff51 	bl	8002b60 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff60 	bl	8002b88 <LL_EXTI_EnableEvent_0_31>
          break;
 8002cc8:	e00d      	b.n	8002ce6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff34 	bl	8002b3c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff55 	bl	8002b88 <LL_EXTI_EnableEvent_0_31>
          break;
 8002cde:	e002      	b.n	8002ce6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ce4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	799b      	ldrb	r3, [r3, #6]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d039      	beq.n	8002d62 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	799b      	ldrb	r3, [r3, #6]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d01c      	beq.n	8002d30 <LL_EXTI_Init+0xc4>
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	dc25      	bgt.n	8002d46 <LL_EXTI_Init+0xda>
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d002      	beq.n	8002d04 <LL_EXTI_Init+0x98>
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d00b      	beq.n	8002d1a <LL_EXTI_Init+0xae>
 8002d02:	e020      	b.n	8002d46 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff9b 	bl	8002c44 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff5e 	bl	8002bd4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002d18:	e024      	b.n	8002d64 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff6a 	bl	8002bf8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff79 	bl	8002c20 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d2e:	e019      	b.n	8002d64 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff4d 	bl	8002bd4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff6e 	bl	8002c20 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d44:	e00e      	b.n	8002d64 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
            break;
 8002d4a:	e00b      	b.n	8002d64 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff05 	bl	8002b60 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff26 	bl	8002bac <LL_EXTI_DisableEvent_0_31>
 8002d60:	e000      	b.n	8002d64 <LL_EXTI_Init+0xf8>
      }
 8002d62:	bf00      	nop
  }
  return status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <LL_GPIO_SetPinMode>:
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b089      	sub	sp, #36	; 0x24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	613b      	str	r3, [r7, #16]
  return result;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2103      	movs	r1, #3
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	61bb      	str	r3, [r7, #24]
  return result;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	3724      	adds	r7, #36	; 0x24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_GPIO_SetPinOutputType>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	401a      	ands	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	605a      	str	r2, [r3, #4]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_GPIO_SetPinSpeed>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	613b      	str	r3, [r7, #16]
  return result;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2103      	movs	r1, #3
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	61bb      	str	r3, [r7, #24]
  return result;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	609a      	str	r2, [r3, #8]
}
 8002e4e:	bf00      	nop
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_GPIO_SetPinPull>:
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b089      	sub	sp, #36	; 0x24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	613b      	str	r3, [r7, #16]
  return result;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2103      	movs	r1, #3
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	61bb      	str	r3, [r7, #24]
  return result;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	60da      	str	r2, [r3, #12]
}
 8002eac:	bf00      	nop
 8002eae:	3724      	adds	r7, #36	; 0x24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_GPIO_SetAFPin_0_7>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	613b      	str	r3, [r7, #16]
  return result;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	210f      	movs	r1, #15
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_GPIO_SetAFPin_8_15>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	b089      	sub	sp, #36	; 0x24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	613b      	str	r3, [r7, #16]
  return result;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	210f      	movs	r1, #15
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	61bb      	str	r3, [r7, #24]
  return result;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f6c:	bf00      	nop
 8002f6e:	3724      	adds	r7, #36	; 0x24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	613b      	str	r3, [r7, #16]
  return result;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002fa2:	e050      	b.n	8003046 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d042      	beq.n	8003040 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d003      	beq.n	8002fca <LL_GPIO_Init+0x52>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d10d      	bne.n	8002fe6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	69b9      	ldr	r1, [r7, #24]
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ff12 	bl	8002dfc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	69b9      	ldr	r1, [r7, #24]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fef3 	bl	8002dcc <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	461a      	mov	r2, r3
 8002fec:	69b9      	ldr	r1, [r7, #24]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff33 	bl	8002e5a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d11a      	bne.n	8003032 <LL_GPIO_Init+0xba>
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	60bb      	str	r3, [r7, #8]
  return result;
 8003008:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b07      	cmp	r3, #7
 8003012:	d807      	bhi.n	8003024 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	461a      	mov	r2, r3
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff4b 	bl	8002eb8 <LL_GPIO_SetAFPin_0_7>
 8003022:	e006      	b.n	8003032 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	461a      	mov	r2, r3
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff72 	bl	8002f16 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	69b9      	ldr	r1, [r7, #24]
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fe97 	bl	8002d6e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	3301      	adds	r3, #1
 8003044:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1a7      	bne.n	8002fa4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <LL_RCC_GetSysClkSource>:
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <LL_RCC_GetSysClkSource+0x18>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800

0800307c <LL_RCC_GetAHBPrescaler>:
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <LL_RCC_GetAHBPrescaler+0x18>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <LL_RCC_GetAPB1Prescaler>:
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800

080030b4 <LL_RCC_GetAPB2Prescaler>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <LL_RCC_GetAPB2Prescaler+0x18>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <LL_RCC_PLL_GetMainSource+0x18>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800

080030ec <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <LL_RCC_PLL_GetN+0x18>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40023800 	.word	0x40023800

08003108 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <LL_RCC_PLL_GetP+0x18>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800

08003124 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <LL_RCC_PLL_GetDivider+0x18>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800

08003140 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003148:	f000 f820 	bl	800318c <RCC_GetSystemClockFreq>
 800314c:	4602      	mov	r2, r0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f840 	bl	80031dc <RCC_GetHCLKClockFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f84e 	bl	8003208 <RCC_GetPCLK1ClockFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f85a 	bl	8003230 <RCC_GetPCLK2ClockFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60da      	str	r2, [r3, #12]
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003196:	f7ff ff63 	bl	8003060 <LL_RCC_GetSysClkSource>
 800319a:	4603      	mov	r3, r0
 800319c:	2b08      	cmp	r3, #8
 800319e:	d00c      	beq.n	80031ba <RCC_GetSystemClockFreq+0x2e>
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d80f      	bhi.n	80031c4 <RCC_GetSystemClockFreq+0x38>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <RCC_GetSystemClockFreq+0x22>
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d003      	beq.n	80031b4 <RCC_GetSystemClockFreq+0x28>
 80031ac:	e00a      	b.n	80031c4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <RCC_GetSystemClockFreq+0x48>)
 80031b0:	607b      	str	r3, [r7, #4]
      break;
 80031b2:	e00a      	b.n	80031ca <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <RCC_GetSystemClockFreq+0x4c>)
 80031b6:	607b      	str	r3, [r7, #4]
      break;
 80031b8:	e007      	b.n	80031ca <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80031ba:	2008      	movs	r0, #8
 80031bc:	f000 f84c 	bl	8003258 <RCC_PLL_GetFreqDomain_SYS>
 80031c0:	6078      	str	r0, [r7, #4]
      break;
 80031c2:	e002      	b.n	80031ca <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <RCC_GetSystemClockFreq+0x48>)
 80031c6:	607b      	str	r3, [r7, #4]
      break;
 80031c8:	bf00      	nop
  }

  return frequency;
 80031ca:	687b      	ldr	r3, [r7, #4]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	00f42400 	.word	0x00f42400
 80031d8:	007a1200 	.word	0x007a1200

080031dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80031e4:	f7ff ff4a 	bl	800307c <LL_RCC_GetAHBPrescaler>
 80031e8:	4603      	mov	r3, r0
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <RCC_GetHCLKClockFreq+0x28>)
 80031f2:	5cd3      	ldrb	r3, [r2, r3]
 80031f4:	461a      	mov	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	40d3      	lsrs	r3, r2
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	08005f10 	.word	0x08005f10

08003208 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003210:	f7ff ff42 	bl	8003098 <LL_RCC_GetAPB1Prescaler>
 8003214:	4603      	mov	r3, r0
 8003216:	0a9b      	lsrs	r3, r3, #10
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <RCC_GetPCLK1ClockFreq+0x24>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	40d3      	lsrs	r3, r2
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	08005f20 	.word	0x08005f20

08003230 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003238:	f7ff ff3c 	bl	80030b4 <LL_RCC_GetAPB2Prescaler>
 800323c:	4603      	mov	r3, r0
 800323e:	0b5b      	lsrs	r3, r3, #13
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <RCC_GetPCLK2ClockFreq+0x24>)
 8003242:	5cd3      	ldrb	r3, [r2, r3]
 8003244:	461a      	mov	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	40d3      	lsrs	r3, r2
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	08005f20 	.word	0x08005f20

08003258 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800326c:	f7ff ff30 	bl	80030d0 <LL_RCC_PLL_GetMainSource>
 8003270:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d004      	beq.n	8003282 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800327e:	d003      	beq.n	8003288 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003280:	e005      	b.n	800328e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003284:	617b      	str	r3, [r7, #20]
      break;
 8003286:	e005      	b.n	8003294 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800328a:	617b      	str	r3, [r7, #20]
      break;
 800328c:	e002      	b.n	8003294 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800328e:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003290:	617b      	str	r3, [r7, #20]
      break;
 8003292:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d113      	bne.n	80032c2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800329a:	f7ff ff43 	bl	8003124 <LL_RCC_PLL_GetDivider>
 800329e:	4602      	mov	r2, r0
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fbb3 f4f2 	udiv	r4, r3, r2
 80032a6:	f7ff ff21 	bl	80030ec <LL_RCC_PLL_GetN>
 80032aa:	4603      	mov	r3, r0
 80032ac:	fb03 f404 	mul.w	r4, r3, r4
 80032b0:	f7ff ff2a 	bl	8003108 <LL_RCC_PLL_GetP>
 80032b4:	4603      	mov	r3, r0
 80032b6:	0c1b      	lsrs	r3, r3, #16
 80032b8:	3301      	adds	r3, #1
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fbb4 f3f3 	udiv	r3, r4, r3
 80032c0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80032c2:	693b      	ldr	r3, [r7, #16]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd90      	pop	{r4, r7, pc}
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <LL_TIM_SetPrescaler>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_TIM_SetAutoReload>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_TIM_SetRepetitionCounter>:
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_TIM_OC_SetCompareCH1>:
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_TIM_OC_SetCompareCH2>:
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_TIM_OC_SetCompareCH3>:
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_TIM_OC_SetCompareCH4>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	615a      	str	r2, [r3, #20]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3d      	ldr	r2, [pc, #244]	; (80034c0 <LL_TIM_Init+0x108>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <LL_TIM_Init+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d6:	d00f      	beq.n	80033f8 <LL_TIM_Init+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <LL_TIM_Init+0x10c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00b      	beq.n	80033f8 <LL_TIM_Init+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a39      	ldr	r2, [pc, #228]	; (80034c8 <LL_TIM_Init+0x110>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <LL_TIM_Init+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a38      	ldr	r2, [pc, #224]	; (80034cc <LL_TIM_Init+0x114>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <LL_TIM_Init+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a37      	ldr	r2, [pc, #220]	; (80034d0 <LL_TIM_Init+0x118>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d106      	bne.n	8003406 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2d      	ldr	r2, [pc, #180]	; (80034c0 <LL_TIM_Init+0x108>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d02b      	beq.n	8003466 <LL_TIM_Init+0xae>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d027      	beq.n	8003466 <LL_TIM_Init+0xae>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2a      	ldr	r2, [pc, #168]	; (80034c4 <LL_TIM_Init+0x10c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d023      	beq.n	8003466 <LL_TIM_Init+0xae>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <LL_TIM_Init+0x110>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01f      	beq.n	8003466 <LL_TIM_Init+0xae>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a28      	ldr	r2, [pc, #160]	; (80034cc <LL_TIM_Init+0x114>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01b      	beq.n	8003466 <LL_TIM_Init+0xae>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <LL_TIM_Init+0x118>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d017      	beq.n	8003466 <LL_TIM_Init+0xae>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <LL_TIM_Init+0x11c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <LL_TIM_Init+0xae>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <LL_TIM_Init+0x120>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00f      	beq.n	8003466 <LL_TIM_Init+0xae>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a24      	ldr	r2, [pc, #144]	; (80034dc <LL_TIM_Init+0x124>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00b      	beq.n	8003466 <LL_TIM_Init+0xae>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a23      	ldr	r2, [pc, #140]	; (80034e0 <LL_TIM_Init+0x128>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <LL_TIM_Init+0xae>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <LL_TIM_Init+0x12c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <LL_TIM_Init+0xae>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <LL_TIM_Init+0x130>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d106      	bne.n	8003474 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff35 	bl	80032f0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ff21 	bl	80032d4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <LL_TIM_Init+0x108>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d003      	beq.n	80034a2 <LL_TIM_Init+0xea>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <LL_TIM_Init+0x118>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d105      	bne.n	80034ae <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff2f 	bl	800330c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ff72 	bl	8003398 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40000400 	.word	0x40000400
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	40010400 	.word	0x40010400
 80034d4:	40014000 	.word	0x40014000
 80034d8:	40014400 	.word	0x40014400
 80034dc:	40014800 	.word	0x40014800
 80034e0:	40001800 	.word	0x40001800
 80034e4:	40001c00 	.word	0x40001c00
 80034e8:	40002000 	.word	0x40002000

080034ec <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003502:	d027      	beq.n	8003554 <LL_TIM_OC_Init+0x68>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350a:	d82a      	bhi.n	8003562 <LL_TIM_OC_Init+0x76>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003512:	d018      	beq.n	8003546 <LL_TIM_OC_Init+0x5a>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d822      	bhi.n	8003562 <LL_TIM_OC_Init+0x76>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d003      	beq.n	800352a <LL_TIM_OC_Init+0x3e>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b10      	cmp	r3, #16
 8003526:	d007      	beq.n	8003538 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003528:	e01b      	b.n	8003562 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f81f 	bl	8003570 <OC1Config>
 8003532:	4603      	mov	r3, r0
 8003534:	75fb      	strb	r3, [r7, #23]
      break;
 8003536:	e015      	b.n	8003564 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f884 	bl	8003648 <OC2Config>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]
      break;
 8003544:	e00e      	b.n	8003564 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f8ed 	bl	8003728 <OC3Config>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
      break;
 8003552:	e007      	b.n	8003564 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f956 	bl	8003808 <OC4Config>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]
      break;
 8003560:	e000      	b.n	8003564 <LL_TIM_OC_Init+0x78>
      break;
 8003562:	bf00      	nop
  }

  return result;
 8003564:	7dfb      	ldrb	r3, [r7, #23]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f023 0201 	bic.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 0202 	bic.w	r2, r3, #2
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0201 	bic.w	r2, r3, #1
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <OC1Config+0xd0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <OC1Config+0x6a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a1b      	ldr	r2, [pc, #108]	; (8003644 <OC1Config+0xd4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d11e      	bne.n	8003618 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 0208 	bic.w	r2, r3, #8
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 0204 	bic.w	r2, r3, #4
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fe7c 	bl	8003328 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40010000 	.word	0x40010000
 8003644:	40010400 	.word	0x40010400

08003648 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f023 0210 	bic.w	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0220 	bic.w	r2, r3, #32
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0210 	bic.w	r2, r3, #16
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <OC2Config+0xd8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <OC2Config+0x70>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <OC2Config+0xdc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d11f      	bne.n	80036f8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	019b      	lsls	r3, r3, #6
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	019b      	lsls	r3, r3, #6
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fe1a 	bl	8003344 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400

08003728 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <OC3Config+0xd8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <OC3Config+0x6e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <OC3Config+0xdc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d11f      	bne.n	80037d6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	029b      	lsls	r3, r3, #10
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	029b      	lsls	r3, r3, #10
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	015b      	lsls	r3, r3, #5
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fdb9 	bl	8003360 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40010400 	.word	0x40010400

08003808 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	031b      	lsls	r3, r3, #12
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a11      	ldr	r2, [pc, #68]	; (80038b0 <OC4Config+0xa8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <OC4Config+0x70>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <OC4Config+0xac>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d107      	bne.n	8003888 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	019b      	lsls	r3, r3, #6
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fd6e 	bl	800337c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40010400 	.word	0x40010400

080038b8 <LL_USART_IsEnabled>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_USART_SetStopBitsLength>:
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	611a      	str	r2, [r3, #16]
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <LL_USART_SetHWFlowCtrl>:
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	615a      	str	r2, [r3, #20]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_USART_SetBaudRate>:
{
 800392c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003930:	b0c0      	sub	sp, #256	; 0x100
 8003932:	af00      	add	r7, sp, #0
 8003934:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003938:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800393c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003940:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394c:	f040 810c 	bne.w	8003b68 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003950:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003954:	2200      	movs	r2, #0
 8003956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800395a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800395e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003962:	4622      	mov	r2, r4
 8003964:	462b      	mov	r3, r5
 8003966:	1891      	adds	r1, r2, r2
 8003968:	6639      	str	r1, [r7, #96]	; 0x60
 800396a:	415b      	adcs	r3, r3
 800396c:	667b      	str	r3, [r7, #100]	; 0x64
 800396e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003972:	4621      	mov	r1, r4
 8003974:	eb12 0801 	adds.w	r8, r2, r1
 8003978:	4629      	mov	r1, r5
 800397a:	eb43 0901 	adc.w	r9, r3, r1
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800398e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003992:	4690      	mov	r8, r2
 8003994:	4699      	mov	r9, r3
 8003996:	4623      	mov	r3, r4
 8003998:	eb18 0303 	adds.w	r3, r8, r3
 800399c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039a0:	462b      	mov	r3, r5
 80039a2:	eb49 0303 	adc.w	r3, r9, r3
 80039a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80039ae:	2200      	movs	r2, #0
 80039b0:	469a      	mov	sl, r3
 80039b2:	4693      	mov	fp, r2
 80039b4:	eb1a 030a 	adds.w	r3, sl, sl
 80039b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80039ba:	eb4b 030b 	adc.w	r3, fp, fp
 80039be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039c8:	f7fd f892 	bl	8000af0 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <LL_USART_SetBaudRate+0x238>)
 80039d2:	fba3 2302 	umull	r2, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	b29b      	uxth	r3, r3
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	b29c      	uxth	r4, r3
 80039de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039e8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ec:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	1891      	adds	r1, r2, r2
 80039f6:	6539      	str	r1, [r7, #80]	; 0x50
 80039f8:	415b      	adcs	r3, r3
 80039fa:	657b      	str	r3, [r7, #84]	; 0x54
 80039fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a00:	4641      	mov	r1, r8
 8003a02:	1851      	adds	r1, r2, r1
 8003a04:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a06:	4649      	mov	r1, r9
 8003a08:	414b      	adcs	r3, r1
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003a18:	4659      	mov	r1, fp
 8003a1a:	00cb      	lsls	r3, r1, #3
 8003a1c:	4651      	mov	r1, sl
 8003a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a22:	4651      	mov	r1, sl
 8003a24:	00ca      	lsls	r2, r1, #3
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	464b      	mov	r3, r9
 8003a36:	460a      	mov	r2, r1
 8003a38:	eb42 0303 	adc.w	r3, r2, r3
 8003a3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a4a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003a4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a52:	460b      	mov	r3, r1
 8003a54:	18db      	adds	r3, r3, r3
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40
 8003a58:	4613      	mov	r3, r2
 8003a5a:	eb42 0303 	adc.w	r3, r2, r3
 8003a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a64:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003a68:	f7fd f842 	bl	8000af0 <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4611      	mov	r1, r2
 8003a72:	4b3c      	ldr	r3, [pc, #240]	; (8003b64 <LL_USART_SetBaudRate+0x238>)
 8003a74:	fba3 2301 	umull	r2, r3, r3, r1
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	2264      	movs	r2, #100	; 0x64
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	1acb      	subs	r3, r1, r3
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <LL_USART_SetBaudRate+0x238>)
 8003a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	4423      	add	r3, r4
 8003a9e:	b29c      	uxth	r4, r3
 8003aa0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aaa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003aae:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	1891      	adds	r1, r2, r2
 8003ab8:	63b9      	str	r1, [r7, #56]	; 0x38
 8003aba:	415b      	adcs	r3, r3
 8003abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003abe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	1851      	adds	r1, r2, r1
 8003ac6:	6339      	str	r1, [r7, #48]	; 0x30
 8003ac8:	4649      	mov	r1, r9
 8003aca:	414b      	adcs	r3, r1
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ada:	4659      	mov	r1, fp
 8003adc:	00cb      	lsls	r3, r1, #3
 8003ade:	4651      	mov	r1, sl
 8003ae0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ae4:	4651      	mov	r1, sl
 8003ae6:	00ca      	lsls	r2, r1, #3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	4603      	mov	r3, r0
 8003aee:	4642      	mov	r2, r8
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af6:	464b      	mov	r3, r9
 8003af8:	460a      	mov	r2, r1
 8003afa:	eb42 0303 	adc.w	r3, r2, r3
 8003afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b0c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003b10:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b14:	460b      	mov	r3, r1
 8003b16:	18db      	adds	r3, r3, r3
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	eb42 0303 	adc.w	r3, r2, r3
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b26:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003b2a:	f7fc ffe1 	bl	8000af0 <__aeabi_uldivmod>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <LL_USART_SetBaudRate+0x238>)
 8003b34:	fba3 1302 	umull	r1, r3, r3, r2
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	2164      	movs	r1, #100	; 0x64
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	3332      	adds	r3, #50	; 0x32
 8003b46:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <LL_USART_SetBaudRate+0x238>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	4423      	add	r3, r4
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b60:	609a      	str	r2, [r3, #8]
}
 8003b62:	e107      	b.n	8003d74 <LL_USART_SetBaudRate+0x448>
 8003b64:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003b68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b72:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b76:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003b7a:	4642      	mov	r2, r8
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	1891      	adds	r1, r2, r2
 8003b80:	6239      	str	r1, [r7, #32]
 8003b82:	415b      	adcs	r3, r3
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b8a:	4641      	mov	r1, r8
 8003b8c:	1854      	adds	r4, r2, r1
 8003b8e:	4649      	mov	r1, r9
 8003b90:	eb43 0501 	adc.w	r5, r3, r1
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	00eb      	lsls	r3, r5, #3
 8003b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba2:	00e2      	lsls	r2, r4, #3
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	4643      	mov	r3, r8
 8003baa:	18e3      	adds	r3, r4, r3
 8003bac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	eb45 0303 	adc.w	r3, r5, r3
 8003bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bc4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	008b      	lsls	r3, r1, #2
 8003bd8:	4621      	mov	r1, r4
 8003bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bde:	4621      	mov	r1, r4
 8003be0:	008a      	lsls	r2, r1, #2
 8003be2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003be6:	f7fc ff83 	bl	8000af0 <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4b64      	ldr	r3, [pc, #400]	; (8003d80 <LL_USART_SetBaudRate+0x454>)
 8003bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	b29c      	uxth	r4, r3
 8003bfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c00:	2200      	movs	r2, #0
 8003c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c0a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003c0e:	4642      	mov	r2, r8
 8003c10:	464b      	mov	r3, r9
 8003c12:	1891      	adds	r1, r2, r2
 8003c14:	61b9      	str	r1, [r7, #24]
 8003c16:	415b      	adcs	r3, r3
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c1e:	4641      	mov	r1, r8
 8003c20:	1851      	adds	r1, r2, r1
 8003c22:	6139      	str	r1, [r7, #16]
 8003c24:	4649      	mov	r1, r9
 8003c26:	414b      	adcs	r3, r1
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c36:	4659      	mov	r1, fp
 8003c38:	00cb      	lsls	r3, r1, #3
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c40:	4651      	mov	r1, sl
 8003c42:	00ca      	lsls	r2, r1, #3
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	189b      	adds	r3, r3, r2
 8003c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c52:	464b      	mov	r3, r9
 8003c54:	460a      	mov	r2, r1
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003c78:	4649      	mov	r1, r9
 8003c7a:	008b      	lsls	r3, r1, #2
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c82:	4641      	mov	r1, r8
 8003c84:	008a      	lsls	r2, r1, #2
 8003c86:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003c8a:	f7fc ff31 	bl	8000af0 <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <LL_USART_SetBaudRate+0x454>)
 8003c94:	fba3 1302 	umull	r1, r3, r3, r2
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	2164      	movs	r1, #100	; 0x64
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	3332      	adds	r3, #50	; 0x32
 8003ca6:	4a36      	ldr	r2, [pc, #216]	; (8003d80 <LL_USART_SetBaudRate+0x454>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4423      	add	r3, r4
 8003cb8:	b29c      	uxth	r4, r3
 8003cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cc8:	4642      	mov	r2, r8
 8003cca:	464b      	mov	r3, r9
 8003ccc:	1891      	adds	r1, r2, r2
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	415b      	adcs	r3, r3
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cd8:	4641      	mov	r1, r8
 8003cda:	1851      	adds	r1, r2, r1
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	4649      	mov	r1, r9
 8003ce0:	414b      	adcs	r3, r1
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cf0:	4659      	mov	r1, fp
 8003cf2:	00cb      	lsls	r3, r1, #3
 8003cf4:	4651      	mov	r1, sl
 8003cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	00ca      	lsls	r2, r1, #3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4642      	mov	r2, r8
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	673b      	str	r3, [r7, #112]	; 0x70
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	eb42 0303 	adc.w	r3, r2, r3
 8003d12:	677b      	str	r3, [r7, #116]	; 0x74
 8003d14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d18:	2200      	movs	r2, #0
 8003d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	008b      	lsls	r3, r1, #2
 8003d2e:	4641      	mov	r1, r8
 8003d30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d34:	4641      	mov	r1, r8
 8003d36:	008a      	lsls	r2, r1, #2
 8003d38:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d3c:	f7fc fed8 	bl	8000af0 <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <LL_USART_SetBaudRate+0x454>)
 8003d46:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2164      	movs	r1, #100	; 0x64
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	3332      	adds	r3, #50	; 0x32
 8003d58:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <LL_USART_SetBaudRate+0x454>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4423      	add	r3, r4
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d72:	609a      	str	r2, [r3, #8]
}
 8003d74:	bf00      	nop
 8003d76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d80:	51eb851f 	.word	0x51eb851f

08003d84 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fd8e 	bl	80038b8 <LL_USART_IsEnabled>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d15e      	bne.n	8003e60 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003daa:	f023 030c 	bic.w	r3, r3, #12
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	6851      	ldr	r1, [r2, #4]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	68d2      	ldr	r2, [r2, #12]
 8003db6:	4311      	orrs	r1, r2
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	6912      	ldr	r2, [r2, #16]
 8003dbc:	4311      	orrs	r1, r2
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	6992      	ldr	r2, [r2, #24]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fd85 	bl	80038e0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fd92 	bl	8003906 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f9aa 	bl	8003140 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <LL_USART_Init+0xe8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d102      	bne.n	8003dfa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	e021      	b.n	8003e3e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <LL_USART_Init+0xec>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d102      	bne.n	8003e08 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e01a      	b.n	8003e3e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <LL_USART_Init+0xf0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d102      	bne.n	8003e16 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e013      	b.n	8003e3e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <LL_USART_Init+0xf4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d102      	bne.n	8003e24 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e00c      	b.n	8003e3e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <LL_USART_Init+0xf8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d102      	bne.n	8003e32 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	e005      	b.n	8003e3e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <LL_USART_Init+0xfc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d101      	bne.n	8003e3e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69b9      	ldr	r1, [r7, #24]
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fd66 	bl	800392c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	40004400 	.word	0x40004400
 8003e74:	40004800 	.word	0x40004800
 8003e78:	40011400 	.word	0x40011400
 8003e7c:	40004c00 	.word	0x40004c00
 8003e80:	40005000 	.word	0x40005000

08003e84 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <LL_InitTick+0x30>)
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <LL_InitTick+0x30>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <LL_InitTick+0x30>)
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000e010 	.word	0xe000e010

08003eb8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003ec0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ffdd 	bl	8003e84 <LL_InitTick>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <LL_mDelay+0x48>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003ee2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eea:	d00c      	beq.n	8003f06 <LL_mDelay+0x32>
  {
    Delay++;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003ef2:	e008      	b.n	8003f06 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <LL_mDelay+0x48>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <LL_mDelay+0x32>
    {
      Delay--;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f3      	bne.n	8003ef4 <LL_mDelay+0x20>
    }
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e010 	.word	0xe000e010

08003f20 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <LL_SetSystemCoreClock+0x1c>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6013      	str	r3, [r2, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000000 	.word	0x20000000

08003f40 <__errno>:
 8003f40:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <__errno+0x8>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000004 	.word	0x20000004

08003f4c <__libc_init_array>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	4d0d      	ldr	r5, [pc, #52]	; (8003f84 <__libc_init_array+0x38>)
 8003f50:	4c0d      	ldr	r4, [pc, #52]	; (8003f88 <__libc_init_array+0x3c>)
 8003f52:	1b64      	subs	r4, r4, r5
 8003f54:	10a4      	asrs	r4, r4, #2
 8003f56:	2600      	movs	r6, #0
 8003f58:	42a6      	cmp	r6, r4
 8003f5a:	d109      	bne.n	8003f70 <__libc_init_array+0x24>
 8003f5c:	4d0b      	ldr	r5, [pc, #44]	; (8003f8c <__libc_init_array+0x40>)
 8003f5e:	4c0c      	ldr	r4, [pc, #48]	; (8003f90 <__libc_init_array+0x44>)
 8003f60:	f001 ffc8 	bl	8005ef4 <_init>
 8003f64:	1b64      	subs	r4, r4, r5
 8003f66:	10a4      	asrs	r4, r4, #2
 8003f68:	2600      	movs	r6, #0
 8003f6a:	42a6      	cmp	r6, r4
 8003f6c:	d105      	bne.n	8003f7a <__libc_init_array+0x2e>
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f74:	4798      	blx	r3
 8003f76:	3601      	adds	r6, #1
 8003f78:	e7ee      	b.n	8003f58 <__libc_init_array+0xc>
 8003f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7e:	4798      	blx	r3
 8003f80:	3601      	adds	r6, #1
 8003f82:	e7f2      	b.n	8003f6a <__libc_init_array+0x1e>
 8003f84:	08006158 	.word	0x08006158
 8003f88:	08006158 	.word	0x08006158
 8003f8c:	08006158 	.word	0x08006158
 8003f90:	0800615c 	.word	0x0800615c

08003f94 <memset>:
 8003f94:	4402      	add	r2, r0
 8003f96:	4603      	mov	r3, r0
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d100      	bne.n	8003f9e <memset+0xa>
 8003f9c:	4770      	bx	lr
 8003f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa2:	e7f9      	b.n	8003f98 <memset+0x4>
 8003fa4:	0000      	movs	r0, r0
	...

08003fa8 <cos>:
 8003fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003faa:	ec53 2b10 	vmov	r2, r3, d0
 8003fae:	4826      	ldr	r0, [pc, #152]	; (8004048 <cos+0xa0>)
 8003fb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003fb4:	4281      	cmp	r1, r0
 8003fb6:	dc06      	bgt.n	8003fc6 <cos+0x1e>
 8003fb8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004040 <cos+0x98>
 8003fbc:	b005      	add	sp, #20
 8003fbe:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fc2:	f001 b975 	b.w	80052b0 <__kernel_cos>
 8003fc6:	4821      	ldr	r0, [pc, #132]	; (800404c <cos+0xa4>)
 8003fc8:	4281      	cmp	r1, r0
 8003fca:	dd09      	ble.n	8003fe0 <cos+0x38>
 8003fcc:	ee10 0a10 	vmov	r0, s0
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f7fc f8fd 	bl	80001d0 <__aeabi_dsub>
 8003fd6:	ec41 0b10 	vmov	d0, r0, r1
 8003fda:	b005      	add	sp, #20
 8003fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fe0:	4668      	mov	r0, sp
 8003fe2:	f000 fea5 	bl	8004d30 <__ieee754_rem_pio2>
 8003fe6:	f000 0003 	and.w	r0, r0, #3
 8003fea:	2801      	cmp	r0, #1
 8003fec:	d00b      	beq.n	8004006 <cos+0x5e>
 8003fee:	2802      	cmp	r0, #2
 8003ff0:	d016      	beq.n	8004020 <cos+0x78>
 8003ff2:	b9e0      	cbnz	r0, 800402e <cos+0x86>
 8003ff4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ff8:	ed9d 0b00 	vldr	d0, [sp]
 8003ffc:	f001 f958 	bl	80052b0 <__kernel_cos>
 8004000:	ec51 0b10 	vmov	r0, r1, d0
 8004004:	e7e7      	b.n	8003fd6 <cos+0x2e>
 8004006:	ed9d 1b02 	vldr	d1, [sp, #8]
 800400a:	ed9d 0b00 	vldr	d0, [sp]
 800400e:	f001 fd67 	bl	8005ae0 <__kernel_sin>
 8004012:	ec53 2b10 	vmov	r2, r3, d0
 8004016:	ee10 0a10 	vmov	r0, s0
 800401a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800401e:	e7da      	b.n	8003fd6 <cos+0x2e>
 8004020:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004024:	ed9d 0b00 	vldr	d0, [sp]
 8004028:	f001 f942 	bl	80052b0 <__kernel_cos>
 800402c:	e7f1      	b.n	8004012 <cos+0x6a>
 800402e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004032:	ed9d 0b00 	vldr	d0, [sp]
 8004036:	2001      	movs	r0, #1
 8004038:	f001 fd52 	bl	8005ae0 <__kernel_sin>
 800403c:	e7e0      	b.n	8004000 <cos+0x58>
 800403e:	bf00      	nop
	...
 8004048:	3fe921fb 	.word	0x3fe921fb
 800404c:	7fefffff 	.word	0x7fefffff

08004050 <fmax>:
 8004050:	b508      	push	{r3, lr}
 8004052:	ed2d 8b04 	vpush	{d8-d9}
 8004056:	eeb0 8a40 	vmov.f32	s16, s0
 800405a:	eef0 8a60 	vmov.f32	s17, s1
 800405e:	eeb0 9a41 	vmov.f32	s18, s2
 8004062:	eef0 9a61 	vmov.f32	s19, s3
 8004066:	f000 f841 	bl	80040ec <__fpclassifyd>
 800406a:	b168      	cbz	r0, 8004088 <fmax+0x38>
 800406c:	eeb0 0a49 	vmov.f32	s0, s18
 8004070:	eef0 0a69 	vmov.f32	s1, s19
 8004074:	f000 f83a 	bl	80040ec <__fpclassifyd>
 8004078:	b150      	cbz	r0, 8004090 <fmax+0x40>
 800407a:	ec53 2b19 	vmov	r2, r3, d9
 800407e:	ec51 0b18 	vmov	r0, r1, d8
 8004082:	f7fc fced 	bl	8000a60 <__aeabi_dcmpgt>
 8004086:	b918      	cbnz	r0, 8004090 <fmax+0x40>
 8004088:	eeb0 8a49 	vmov.f32	s16, s18
 800408c:	eef0 8a69 	vmov.f32	s17, s19
 8004090:	eeb0 0a48 	vmov.f32	s0, s16
 8004094:	eef0 0a68 	vmov.f32	s1, s17
 8004098:	ecbd 8b04 	vpop	{d8-d9}
 800409c:	bd08      	pop	{r3, pc}

0800409e <fmin>:
 800409e:	b508      	push	{r3, lr}
 80040a0:	ed2d 8b04 	vpush	{d8-d9}
 80040a4:	eeb0 8a40 	vmov.f32	s16, s0
 80040a8:	eef0 8a60 	vmov.f32	s17, s1
 80040ac:	eeb0 9a41 	vmov.f32	s18, s2
 80040b0:	eef0 9a61 	vmov.f32	s19, s3
 80040b4:	f000 f81a 	bl	80040ec <__fpclassifyd>
 80040b8:	b168      	cbz	r0, 80040d6 <fmin+0x38>
 80040ba:	eeb0 0a49 	vmov.f32	s0, s18
 80040be:	eef0 0a69 	vmov.f32	s1, s19
 80040c2:	f000 f813 	bl	80040ec <__fpclassifyd>
 80040c6:	b150      	cbz	r0, 80040de <fmin+0x40>
 80040c8:	ec53 2b19 	vmov	r2, r3, d9
 80040cc:	ec51 0b18 	vmov	r0, r1, d8
 80040d0:	f7fc fca8 	bl	8000a24 <__aeabi_dcmplt>
 80040d4:	b918      	cbnz	r0, 80040de <fmin+0x40>
 80040d6:	eeb0 8a49 	vmov.f32	s16, s18
 80040da:	eef0 8a69 	vmov.f32	s17, s19
 80040de:	eeb0 0a48 	vmov.f32	s0, s16
 80040e2:	eef0 0a68 	vmov.f32	s1, s17
 80040e6:	ecbd 8b04 	vpop	{d8-d9}
 80040ea:	bd08      	pop	{r3, pc}

080040ec <__fpclassifyd>:
 80040ec:	ec51 0b10 	vmov	r0, r1, d0
 80040f0:	b510      	push	{r4, lr}
 80040f2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80040f6:	460b      	mov	r3, r1
 80040f8:	d019      	beq.n	800412e <__fpclassifyd+0x42>
 80040fa:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80040fe:	490e      	ldr	r1, [pc, #56]	; (8004138 <__fpclassifyd+0x4c>)
 8004100:	428a      	cmp	r2, r1
 8004102:	d90e      	bls.n	8004122 <__fpclassifyd+0x36>
 8004104:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8004108:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800410c:	428a      	cmp	r2, r1
 800410e:	d908      	bls.n	8004122 <__fpclassifyd+0x36>
 8004110:	4a0a      	ldr	r2, [pc, #40]	; (800413c <__fpclassifyd+0x50>)
 8004112:	4213      	tst	r3, r2
 8004114:	d007      	beq.n	8004126 <__fpclassifyd+0x3a>
 8004116:	4294      	cmp	r4, r2
 8004118:	d107      	bne.n	800412a <__fpclassifyd+0x3e>
 800411a:	fab0 f080 	clz	r0, r0
 800411e:	0940      	lsrs	r0, r0, #5
 8004120:	bd10      	pop	{r4, pc}
 8004122:	2004      	movs	r0, #4
 8004124:	e7fc      	b.n	8004120 <__fpclassifyd+0x34>
 8004126:	2003      	movs	r0, #3
 8004128:	e7fa      	b.n	8004120 <__fpclassifyd+0x34>
 800412a:	2000      	movs	r0, #0
 800412c:	e7f8      	b.n	8004120 <__fpclassifyd+0x34>
 800412e:	2800      	cmp	r0, #0
 8004130:	d1ee      	bne.n	8004110 <__fpclassifyd+0x24>
 8004132:	2002      	movs	r0, #2
 8004134:	e7f4      	b.n	8004120 <__fpclassifyd+0x34>
 8004136:	bf00      	nop
 8004138:	7fdfffff 	.word	0x7fdfffff
 800413c:	7ff00000 	.word	0x7ff00000

08004140 <sin>:
 8004140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004142:	ec53 2b10 	vmov	r2, r3, d0
 8004146:	4828      	ldr	r0, [pc, #160]	; (80041e8 <sin+0xa8>)
 8004148:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800414c:	4281      	cmp	r1, r0
 800414e:	dc07      	bgt.n	8004160 <sin+0x20>
 8004150:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80041e0 <sin+0xa0>
 8004154:	2000      	movs	r0, #0
 8004156:	b005      	add	sp, #20
 8004158:	f85d eb04 	ldr.w	lr, [sp], #4
 800415c:	f001 bcc0 	b.w	8005ae0 <__kernel_sin>
 8004160:	4822      	ldr	r0, [pc, #136]	; (80041ec <sin+0xac>)
 8004162:	4281      	cmp	r1, r0
 8004164:	dd09      	ble.n	800417a <sin+0x3a>
 8004166:	ee10 0a10 	vmov	r0, s0
 800416a:	4619      	mov	r1, r3
 800416c:	f7fc f830 	bl	80001d0 <__aeabi_dsub>
 8004170:	ec41 0b10 	vmov	d0, r0, r1
 8004174:	b005      	add	sp, #20
 8004176:	f85d fb04 	ldr.w	pc, [sp], #4
 800417a:	4668      	mov	r0, sp
 800417c:	f000 fdd8 	bl	8004d30 <__ieee754_rem_pio2>
 8004180:	f000 0003 	and.w	r0, r0, #3
 8004184:	2801      	cmp	r0, #1
 8004186:	d00c      	beq.n	80041a2 <sin+0x62>
 8004188:	2802      	cmp	r0, #2
 800418a:	d011      	beq.n	80041b0 <sin+0x70>
 800418c:	b9f0      	cbnz	r0, 80041cc <sin+0x8c>
 800418e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004192:	ed9d 0b00 	vldr	d0, [sp]
 8004196:	2001      	movs	r0, #1
 8004198:	f001 fca2 	bl	8005ae0 <__kernel_sin>
 800419c:	ec51 0b10 	vmov	r0, r1, d0
 80041a0:	e7e6      	b.n	8004170 <sin+0x30>
 80041a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041a6:	ed9d 0b00 	vldr	d0, [sp]
 80041aa:	f001 f881 	bl	80052b0 <__kernel_cos>
 80041ae:	e7f5      	b.n	800419c <sin+0x5c>
 80041b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041b4:	ed9d 0b00 	vldr	d0, [sp]
 80041b8:	2001      	movs	r0, #1
 80041ba:	f001 fc91 	bl	8005ae0 <__kernel_sin>
 80041be:	ec53 2b10 	vmov	r2, r3, d0
 80041c2:	ee10 0a10 	vmov	r0, s0
 80041c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80041ca:	e7d1      	b.n	8004170 <sin+0x30>
 80041cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041d0:	ed9d 0b00 	vldr	d0, [sp]
 80041d4:	f001 f86c 	bl	80052b0 <__kernel_cos>
 80041d8:	e7f1      	b.n	80041be <sin+0x7e>
 80041da:	bf00      	nop
 80041dc:	f3af 8000 	nop.w
	...
 80041e8:	3fe921fb 	.word	0x3fe921fb
 80041ec:	7fefffff 	.word	0x7fefffff

080041f0 <pow>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	ed2d 8b02 	vpush	{d8}
 80041f6:	eeb0 8a40 	vmov.f32	s16, s0
 80041fa:	eef0 8a60 	vmov.f32	s17, s1
 80041fe:	ec55 4b11 	vmov	r4, r5, d1
 8004202:	f000 f865 	bl	80042d0 <__ieee754_pow>
 8004206:	4622      	mov	r2, r4
 8004208:	462b      	mov	r3, r5
 800420a:	4620      	mov	r0, r4
 800420c:	4629      	mov	r1, r5
 800420e:	ec57 6b10 	vmov	r6, r7, d0
 8004212:	f7fc fc2f 	bl	8000a74 <__aeabi_dcmpun>
 8004216:	2800      	cmp	r0, #0
 8004218:	d13b      	bne.n	8004292 <pow+0xa2>
 800421a:	ec51 0b18 	vmov	r0, r1, d8
 800421e:	2200      	movs	r2, #0
 8004220:	2300      	movs	r3, #0
 8004222:	f7fc fbf5 	bl	8000a10 <__aeabi_dcmpeq>
 8004226:	b1b8      	cbz	r0, 8004258 <pow+0x68>
 8004228:	2200      	movs	r2, #0
 800422a:	2300      	movs	r3, #0
 800422c:	4620      	mov	r0, r4
 800422e:	4629      	mov	r1, r5
 8004230:	f7fc fbee 	bl	8000a10 <__aeabi_dcmpeq>
 8004234:	2800      	cmp	r0, #0
 8004236:	d146      	bne.n	80042c6 <pow+0xd6>
 8004238:	ec45 4b10 	vmov	d0, r4, r5
 800423c:	f001 fd47 	bl	8005cce <finite>
 8004240:	b338      	cbz	r0, 8004292 <pow+0xa2>
 8004242:	2200      	movs	r2, #0
 8004244:	2300      	movs	r3, #0
 8004246:	4620      	mov	r0, r4
 8004248:	4629      	mov	r1, r5
 800424a:	f7fc fbeb 	bl	8000a24 <__aeabi_dcmplt>
 800424e:	b300      	cbz	r0, 8004292 <pow+0xa2>
 8004250:	f7ff fe76 	bl	8003f40 <__errno>
 8004254:	2322      	movs	r3, #34	; 0x22
 8004256:	e01b      	b.n	8004290 <pow+0xa0>
 8004258:	ec47 6b10 	vmov	d0, r6, r7
 800425c:	f001 fd37 	bl	8005cce <finite>
 8004260:	b9e0      	cbnz	r0, 800429c <pow+0xac>
 8004262:	eeb0 0a48 	vmov.f32	s0, s16
 8004266:	eef0 0a68 	vmov.f32	s1, s17
 800426a:	f001 fd30 	bl	8005cce <finite>
 800426e:	b1a8      	cbz	r0, 800429c <pow+0xac>
 8004270:	ec45 4b10 	vmov	d0, r4, r5
 8004274:	f001 fd2b 	bl	8005cce <finite>
 8004278:	b180      	cbz	r0, 800429c <pow+0xac>
 800427a:	4632      	mov	r2, r6
 800427c:	463b      	mov	r3, r7
 800427e:	4630      	mov	r0, r6
 8004280:	4639      	mov	r1, r7
 8004282:	f7fc fbf7 	bl	8000a74 <__aeabi_dcmpun>
 8004286:	2800      	cmp	r0, #0
 8004288:	d0e2      	beq.n	8004250 <pow+0x60>
 800428a:	f7ff fe59 	bl	8003f40 <__errno>
 800428e:	2321      	movs	r3, #33	; 0x21
 8004290:	6003      	str	r3, [r0, #0]
 8004292:	ecbd 8b02 	vpop	{d8}
 8004296:	ec47 6b10 	vmov	d0, r6, r7
 800429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800429c:	2200      	movs	r2, #0
 800429e:	2300      	movs	r3, #0
 80042a0:	4630      	mov	r0, r6
 80042a2:	4639      	mov	r1, r7
 80042a4:	f7fc fbb4 	bl	8000a10 <__aeabi_dcmpeq>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d0f2      	beq.n	8004292 <pow+0xa2>
 80042ac:	eeb0 0a48 	vmov.f32	s0, s16
 80042b0:	eef0 0a68 	vmov.f32	s1, s17
 80042b4:	f001 fd0b 	bl	8005cce <finite>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d0ea      	beq.n	8004292 <pow+0xa2>
 80042bc:	ec45 4b10 	vmov	d0, r4, r5
 80042c0:	f001 fd05 	bl	8005cce <finite>
 80042c4:	e7c3      	b.n	800424e <pow+0x5e>
 80042c6:	4f01      	ldr	r7, [pc, #4]	; (80042cc <pow+0xdc>)
 80042c8:	2600      	movs	r6, #0
 80042ca:	e7e2      	b.n	8004292 <pow+0xa2>
 80042cc:	3ff00000 	.word	0x3ff00000

080042d0 <__ieee754_pow>:
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	ed2d 8b06 	vpush	{d8-d10}
 80042d8:	b089      	sub	sp, #36	; 0x24
 80042da:	ed8d 1b00 	vstr	d1, [sp]
 80042de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80042e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80042e6:	ea58 0102 	orrs.w	r1, r8, r2
 80042ea:	ec57 6b10 	vmov	r6, r7, d0
 80042ee:	d115      	bne.n	800431c <__ieee754_pow+0x4c>
 80042f0:	19b3      	adds	r3, r6, r6
 80042f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80042f6:	4152      	adcs	r2, r2
 80042f8:	4299      	cmp	r1, r3
 80042fa:	4b89      	ldr	r3, [pc, #548]	; (8004520 <__ieee754_pow+0x250>)
 80042fc:	4193      	sbcs	r3, r2
 80042fe:	f080 84d2 	bcs.w	8004ca6 <__ieee754_pow+0x9d6>
 8004302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004306:	4630      	mov	r0, r6
 8004308:	4639      	mov	r1, r7
 800430a:	f7fb ff63 	bl	80001d4 <__adddf3>
 800430e:	ec41 0b10 	vmov	d0, r0, r1
 8004312:	b009      	add	sp, #36	; 0x24
 8004314:	ecbd 8b06 	vpop	{d8-d10}
 8004318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800431c:	4b81      	ldr	r3, [pc, #516]	; (8004524 <__ieee754_pow+0x254>)
 800431e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004322:	429c      	cmp	r4, r3
 8004324:	ee10 aa10 	vmov	sl, s0
 8004328:	463d      	mov	r5, r7
 800432a:	dc06      	bgt.n	800433a <__ieee754_pow+0x6a>
 800432c:	d101      	bne.n	8004332 <__ieee754_pow+0x62>
 800432e:	2e00      	cmp	r6, #0
 8004330:	d1e7      	bne.n	8004302 <__ieee754_pow+0x32>
 8004332:	4598      	cmp	r8, r3
 8004334:	dc01      	bgt.n	800433a <__ieee754_pow+0x6a>
 8004336:	d10f      	bne.n	8004358 <__ieee754_pow+0x88>
 8004338:	b172      	cbz	r2, 8004358 <__ieee754_pow+0x88>
 800433a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800433e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004342:	ea55 050a 	orrs.w	r5, r5, sl
 8004346:	d1dc      	bne.n	8004302 <__ieee754_pow+0x32>
 8004348:	e9dd 3200 	ldrd	r3, r2, [sp]
 800434c:	18db      	adds	r3, r3, r3
 800434e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004352:	4152      	adcs	r2, r2
 8004354:	429d      	cmp	r5, r3
 8004356:	e7d0      	b.n	80042fa <__ieee754_pow+0x2a>
 8004358:	2d00      	cmp	r5, #0
 800435a:	da3b      	bge.n	80043d4 <__ieee754_pow+0x104>
 800435c:	4b72      	ldr	r3, [pc, #456]	; (8004528 <__ieee754_pow+0x258>)
 800435e:	4598      	cmp	r8, r3
 8004360:	dc51      	bgt.n	8004406 <__ieee754_pow+0x136>
 8004362:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004366:	4598      	cmp	r8, r3
 8004368:	f340 84ac 	ble.w	8004cc4 <__ieee754_pow+0x9f4>
 800436c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004370:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004374:	2b14      	cmp	r3, #20
 8004376:	dd0f      	ble.n	8004398 <__ieee754_pow+0xc8>
 8004378:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800437c:	fa22 f103 	lsr.w	r1, r2, r3
 8004380:	fa01 f303 	lsl.w	r3, r1, r3
 8004384:	4293      	cmp	r3, r2
 8004386:	f040 849d 	bne.w	8004cc4 <__ieee754_pow+0x9f4>
 800438a:	f001 0101 	and.w	r1, r1, #1
 800438e:	f1c1 0302 	rsb	r3, r1, #2
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	b182      	cbz	r2, 80043b8 <__ieee754_pow+0xe8>
 8004396:	e05f      	b.n	8004458 <__ieee754_pow+0x188>
 8004398:	2a00      	cmp	r2, #0
 800439a:	d15b      	bne.n	8004454 <__ieee754_pow+0x184>
 800439c:	f1c3 0314 	rsb	r3, r3, #20
 80043a0:	fa48 f103 	asr.w	r1, r8, r3
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	4543      	cmp	r3, r8
 80043aa:	f040 8488 	bne.w	8004cbe <__ieee754_pow+0x9ee>
 80043ae:	f001 0101 	and.w	r1, r1, #1
 80043b2:	f1c1 0302 	rsb	r3, r1, #2
 80043b6:	9304      	str	r3, [sp, #16]
 80043b8:	4b5c      	ldr	r3, [pc, #368]	; (800452c <__ieee754_pow+0x25c>)
 80043ba:	4598      	cmp	r8, r3
 80043bc:	d132      	bne.n	8004424 <__ieee754_pow+0x154>
 80043be:	f1b9 0f00 	cmp.w	r9, #0
 80043c2:	f280 8478 	bge.w	8004cb6 <__ieee754_pow+0x9e6>
 80043c6:	4959      	ldr	r1, [pc, #356]	; (800452c <__ieee754_pow+0x25c>)
 80043c8:	4632      	mov	r2, r6
 80043ca:	463b      	mov	r3, r7
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7fc f9e1 	bl	8000794 <__aeabi_ddiv>
 80043d2:	e79c      	b.n	800430e <__ieee754_pow+0x3e>
 80043d4:	2300      	movs	r3, #0
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	2a00      	cmp	r2, #0
 80043da:	d13d      	bne.n	8004458 <__ieee754_pow+0x188>
 80043dc:	4b51      	ldr	r3, [pc, #324]	; (8004524 <__ieee754_pow+0x254>)
 80043de:	4598      	cmp	r8, r3
 80043e0:	d1ea      	bne.n	80043b8 <__ieee754_pow+0xe8>
 80043e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80043e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80043ea:	ea53 030a 	orrs.w	r3, r3, sl
 80043ee:	f000 845a 	beq.w	8004ca6 <__ieee754_pow+0x9d6>
 80043f2:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <__ieee754_pow+0x260>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	dd08      	ble.n	800440a <__ieee754_pow+0x13a>
 80043f8:	f1b9 0f00 	cmp.w	r9, #0
 80043fc:	f2c0 8457 	blt.w	8004cae <__ieee754_pow+0x9de>
 8004400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004404:	e783      	b.n	800430e <__ieee754_pow+0x3e>
 8004406:	2302      	movs	r3, #2
 8004408:	e7e5      	b.n	80043d6 <__ieee754_pow+0x106>
 800440a:	f1b9 0f00 	cmp.w	r9, #0
 800440e:	f04f 0000 	mov.w	r0, #0
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	f6bf af7a 	bge.w	800430e <__ieee754_pow+0x3e>
 800441a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800441e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004422:	e774      	b.n	800430e <__ieee754_pow+0x3e>
 8004424:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004428:	d106      	bne.n	8004438 <__ieee754_pow+0x168>
 800442a:	4632      	mov	r2, r6
 800442c:	463b      	mov	r3, r7
 800442e:	4630      	mov	r0, r6
 8004430:	4639      	mov	r1, r7
 8004432:	f7fc f885 	bl	8000540 <__aeabi_dmul>
 8004436:	e76a      	b.n	800430e <__ieee754_pow+0x3e>
 8004438:	4b3e      	ldr	r3, [pc, #248]	; (8004534 <__ieee754_pow+0x264>)
 800443a:	4599      	cmp	r9, r3
 800443c:	d10c      	bne.n	8004458 <__ieee754_pow+0x188>
 800443e:	2d00      	cmp	r5, #0
 8004440:	db0a      	blt.n	8004458 <__ieee754_pow+0x188>
 8004442:	ec47 6b10 	vmov	d0, r6, r7
 8004446:	b009      	add	sp, #36	; 0x24
 8004448:	ecbd 8b06 	vpop	{d8-d10}
 800444c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004450:	f000 be7a 	b.w	8005148 <__ieee754_sqrt>
 8004454:	2300      	movs	r3, #0
 8004456:	9304      	str	r3, [sp, #16]
 8004458:	ec47 6b10 	vmov	d0, r6, r7
 800445c:	f001 fc2e 	bl	8005cbc <fabs>
 8004460:	ec51 0b10 	vmov	r0, r1, d0
 8004464:	f1ba 0f00 	cmp.w	sl, #0
 8004468:	d129      	bne.n	80044be <__ieee754_pow+0x1ee>
 800446a:	b124      	cbz	r4, 8004476 <__ieee754_pow+0x1a6>
 800446c:	4b2f      	ldr	r3, [pc, #188]	; (800452c <__ieee754_pow+0x25c>)
 800446e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004472:	429a      	cmp	r2, r3
 8004474:	d123      	bne.n	80044be <__ieee754_pow+0x1ee>
 8004476:	f1b9 0f00 	cmp.w	r9, #0
 800447a:	da05      	bge.n	8004488 <__ieee754_pow+0x1b8>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	2000      	movs	r0, #0
 8004482:	492a      	ldr	r1, [pc, #168]	; (800452c <__ieee754_pow+0x25c>)
 8004484:	f7fc f986 	bl	8000794 <__aeabi_ddiv>
 8004488:	2d00      	cmp	r5, #0
 800448a:	f6bf af40 	bge.w	800430e <__ieee754_pow+0x3e>
 800448e:	9b04      	ldr	r3, [sp, #16]
 8004490:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004494:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004498:	4323      	orrs	r3, r4
 800449a:	d108      	bne.n	80044ae <__ieee754_pow+0x1de>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7fb fe94 	bl	80001d0 <__aeabi_dsub>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	e78f      	b.n	80043ce <__ieee754_pow+0xfe>
 80044ae:	9b04      	ldr	r3, [sp, #16]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	f47f af2c 	bne.w	800430e <__ieee754_pow+0x3e>
 80044b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044ba:	4619      	mov	r1, r3
 80044bc:	e727      	b.n	800430e <__ieee754_pow+0x3e>
 80044be:	0feb      	lsrs	r3, r5, #31
 80044c0:	3b01      	subs	r3, #1
 80044c2:	9306      	str	r3, [sp, #24]
 80044c4:	9a06      	ldr	r2, [sp, #24]
 80044c6:	9b04      	ldr	r3, [sp, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d102      	bne.n	80044d2 <__ieee754_pow+0x202>
 80044cc:	4632      	mov	r2, r6
 80044ce:	463b      	mov	r3, r7
 80044d0:	e7e6      	b.n	80044a0 <__ieee754_pow+0x1d0>
 80044d2:	4b19      	ldr	r3, [pc, #100]	; (8004538 <__ieee754_pow+0x268>)
 80044d4:	4598      	cmp	r8, r3
 80044d6:	f340 80fb 	ble.w	80046d0 <__ieee754_pow+0x400>
 80044da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80044de:	4598      	cmp	r8, r3
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <__ieee754_pow+0x260>)
 80044e2:	dd0c      	ble.n	80044fe <__ieee754_pow+0x22e>
 80044e4:	429c      	cmp	r4, r3
 80044e6:	dc0f      	bgt.n	8004508 <__ieee754_pow+0x238>
 80044e8:	f1b9 0f00 	cmp.w	r9, #0
 80044ec:	da0f      	bge.n	800450e <__ieee754_pow+0x23e>
 80044ee:	2000      	movs	r0, #0
 80044f0:	b009      	add	sp, #36	; 0x24
 80044f2:	ecbd 8b06 	vpop	{d8-d10}
 80044f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	f001 bbd6 	b.w	8005caa <__math_oflow>
 80044fe:	429c      	cmp	r4, r3
 8004500:	dbf2      	blt.n	80044e8 <__ieee754_pow+0x218>
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <__ieee754_pow+0x25c>)
 8004504:	429c      	cmp	r4, r3
 8004506:	dd19      	ble.n	800453c <__ieee754_pow+0x26c>
 8004508:	f1b9 0f00 	cmp.w	r9, #0
 800450c:	dcef      	bgt.n	80044ee <__ieee754_pow+0x21e>
 800450e:	2000      	movs	r0, #0
 8004510:	b009      	add	sp, #36	; 0x24
 8004512:	ecbd 8b06 	vpop	{d8-d10}
 8004516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451a:	f001 bbbd 	b.w	8005c98 <__math_uflow>
 800451e:	bf00      	nop
 8004520:	fff00000 	.word	0xfff00000
 8004524:	7ff00000 	.word	0x7ff00000
 8004528:	433fffff 	.word	0x433fffff
 800452c:	3ff00000 	.word	0x3ff00000
 8004530:	3fefffff 	.word	0x3fefffff
 8004534:	3fe00000 	.word	0x3fe00000
 8004538:	41e00000 	.word	0x41e00000
 800453c:	4b60      	ldr	r3, [pc, #384]	; (80046c0 <__ieee754_pow+0x3f0>)
 800453e:	2200      	movs	r2, #0
 8004540:	f7fb fe46 	bl	80001d0 <__aeabi_dsub>
 8004544:	a354      	add	r3, pc, #336	; (adr r3, 8004698 <__ieee754_pow+0x3c8>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	4604      	mov	r4, r0
 800454c:	460d      	mov	r5, r1
 800454e:	f7fb fff7 	bl	8000540 <__aeabi_dmul>
 8004552:	a353      	add	r3, pc, #332	; (adr r3, 80046a0 <__ieee754_pow+0x3d0>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	4606      	mov	r6, r0
 800455a:	460f      	mov	r7, r1
 800455c:	4620      	mov	r0, r4
 800455e:	4629      	mov	r1, r5
 8004560:	f7fb ffee 	bl	8000540 <__aeabi_dmul>
 8004564:	4b57      	ldr	r3, [pc, #348]	; (80046c4 <__ieee754_pow+0x3f4>)
 8004566:	4682      	mov	sl, r0
 8004568:	468b      	mov	fp, r1
 800456a:	2200      	movs	r2, #0
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7fb ffe6 	bl	8000540 <__aeabi_dmul>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	a14b      	add	r1, pc, #300	; (adr r1, 80046a8 <__ieee754_pow+0x3d8>)
 800457a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800457e:	f7fb fe27 	bl	80001d0 <__aeabi_dsub>
 8004582:	4622      	mov	r2, r4
 8004584:	462b      	mov	r3, r5
 8004586:	f7fb ffdb 	bl	8000540 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	2000      	movs	r0, #0
 8004590:	494d      	ldr	r1, [pc, #308]	; (80046c8 <__ieee754_pow+0x3f8>)
 8004592:	f7fb fe1d 	bl	80001d0 <__aeabi_dsub>
 8004596:	4622      	mov	r2, r4
 8004598:	4680      	mov	r8, r0
 800459a:	4689      	mov	r9, r1
 800459c:	462b      	mov	r3, r5
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	f7fb ffcd 	bl	8000540 <__aeabi_dmul>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4640      	mov	r0, r8
 80045ac:	4649      	mov	r1, r9
 80045ae:	f7fb ffc7 	bl	8000540 <__aeabi_dmul>
 80045b2:	a33f      	add	r3, pc, #252	; (adr r3, 80046b0 <__ieee754_pow+0x3e0>)
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f7fb ffc2 	bl	8000540 <__aeabi_dmul>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4650      	mov	r0, sl
 80045c2:	4659      	mov	r1, fp
 80045c4:	f7fb fe04 	bl	80001d0 <__aeabi_dsub>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4680      	mov	r8, r0
 80045ce:	4689      	mov	r9, r1
 80045d0:	4630      	mov	r0, r6
 80045d2:	4639      	mov	r1, r7
 80045d4:	f7fb fdfe 	bl	80001d4 <__adddf3>
 80045d8:	2000      	movs	r0, #0
 80045da:	4632      	mov	r2, r6
 80045dc:	463b      	mov	r3, r7
 80045de:	4604      	mov	r4, r0
 80045e0:	460d      	mov	r5, r1
 80045e2:	f7fb fdf5 	bl	80001d0 <__aeabi_dsub>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4640      	mov	r0, r8
 80045ec:	4649      	mov	r1, r9
 80045ee:	f7fb fdef 	bl	80001d0 <__aeabi_dsub>
 80045f2:	9b04      	ldr	r3, [sp, #16]
 80045f4:	9a06      	ldr	r2, [sp, #24]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	4682      	mov	sl, r0
 80045fc:	468b      	mov	fp, r1
 80045fe:	f040 81e7 	bne.w	80049d0 <__ieee754_pow+0x700>
 8004602:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80046b8 <__ieee754_pow+0x3e8>
 8004606:	eeb0 8a47 	vmov.f32	s16, s14
 800460a:	eef0 8a67 	vmov.f32	s17, s15
 800460e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004612:	2600      	movs	r6, #0
 8004614:	4632      	mov	r2, r6
 8004616:	463b      	mov	r3, r7
 8004618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800461c:	f7fb fdd8 	bl	80001d0 <__aeabi_dsub>
 8004620:	4622      	mov	r2, r4
 8004622:	462b      	mov	r3, r5
 8004624:	f7fb ff8c 	bl	8000540 <__aeabi_dmul>
 8004628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800462c:	4680      	mov	r8, r0
 800462e:	4689      	mov	r9, r1
 8004630:	4650      	mov	r0, sl
 8004632:	4659      	mov	r1, fp
 8004634:	f7fb ff84 	bl	8000540 <__aeabi_dmul>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4640      	mov	r0, r8
 800463e:	4649      	mov	r1, r9
 8004640:	f7fb fdc8 	bl	80001d4 <__adddf3>
 8004644:	4632      	mov	r2, r6
 8004646:	463b      	mov	r3, r7
 8004648:	4680      	mov	r8, r0
 800464a:	4689      	mov	r9, r1
 800464c:	4620      	mov	r0, r4
 800464e:	4629      	mov	r1, r5
 8004650:	f7fb ff76 	bl	8000540 <__aeabi_dmul>
 8004654:	460b      	mov	r3, r1
 8004656:	4604      	mov	r4, r0
 8004658:	460d      	mov	r5, r1
 800465a:	4602      	mov	r2, r0
 800465c:	4649      	mov	r1, r9
 800465e:	4640      	mov	r0, r8
 8004660:	f7fb fdb8 	bl	80001d4 <__adddf3>
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <__ieee754_pow+0x3fc>)
 8004666:	4299      	cmp	r1, r3
 8004668:	ec45 4b19 	vmov	d9, r4, r5
 800466c:	4606      	mov	r6, r0
 800466e:	460f      	mov	r7, r1
 8004670:	468b      	mov	fp, r1
 8004672:	f340 82f1 	ble.w	8004c58 <__ieee754_pow+0x988>
 8004676:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800467a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800467e:	4303      	orrs	r3, r0
 8004680:	f000 81e4 	beq.w	8004a4c <__ieee754_pow+0x77c>
 8004684:	ec51 0b18 	vmov	r0, r1, d8
 8004688:	2200      	movs	r2, #0
 800468a:	2300      	movs	r3, #0
 800468c:	f7fc f9ca 	bl	8000a24 <__aeabi_dcmplt>
 8004690:	3800      	subs	r0, #0
 8004692:	bf18      	it	ne
 8004694:	2001      	movne	r0, #1
 8004696:	e72b      	b.n	80044f0 <__ieee754_pow+0x220>
 8004698:	60000000 	.word	0x60000000
 800469c:	3ff71547 	.word	0x3ff71547
 80046a0:	f85ddf44 	.word	0xf85ddf44
 80046a4:	3e54ae0b 	.word	0x3e54ae0b
 80046a8:	55555555 	.word	0x55555555
 80046ac:	3fd55555 	.word	0x3fd55555
 80046b0:	652b82fe 	.word	0x652b82fe
 80046b4:	3ff71547 	.word	0x3ff71547
 80046b8:	00000000 	.word	0x00000000
 80046bc:	bff00000 	.word	0xbff00000
 80046c0:	3ff00000 	.word	0x3ff00000
 80046c4:	3fd00000 	.word	0x3fd00000
 80046c8:	3fe00000 	.word	0x3fe00000
 80046cc:	408fffff 	.word	0x408fffff
 80046d0:	4bd5      	ldr	r3, [pc, #852]	; (8004a28 <__ieee754_pow+0x758>)
 80046d2:	402b      	ands	r3, r5
 80046d4:	2200      	movs	r2, #0
 80046d6:	b92b      	cbnz	r3, 80046e4 <__ieee754_pow+0x414>
 80046d8:	4bd4      	ldr	r3, [pc, #848]	; (8004a2c <__ieee754_pow+0x75c>)
 80046da:	f7fb ff31 	bl	8000540 <__aeabi_dmul>
 80046de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80046e2:	460c      	mov	r4, r1
 80046e4:	1523      	asrs	r3, r4, #20
 80046e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80046ea:	4413      	add	r3, r2
 80046ec:	9305      	str	r3, [sp, #20]
 80046ee:	4bd0      	ldr	r3, [pc, #832]	; (8004a30 <__ieee754_pow+0x760>)
 80046f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80046f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80046f8:	429c      	cmp	r4, r3
 80046fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80046fe:	dd08      	ble.n	8004712 <__ieee754_pow+0x442>
 8004700:	4bcc      	ldr	r3, [pc, #816]	; (8004a34 <__ieee754_pow+0x764>)
 8004702:	429c      	cmp	r4, r3
 8004704:	f340 8162 	ble.w	80049cc <__ieee754_pow+0x6fc>
 8004708:	9b05      	ldr	r3, [sp, #20]
 800470a:	3301      	adds	r3, #1
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004712:	2400      	movs	r4, #0
 8004714:	00e3      	lsls	r3, r4, #3
 8004716:	9307      	str	r3, [sp, #28]
 8004718:	4bc7      	ldr	r3, [pc, #796]	; (8004a38 <__ieee754_pow+0x768>)
 800471a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800471e:	ed93 7b00 	vldr	d7, [r3]
 8004722:	4629      	mov	r1, r5
 8004724:	ec53 2b17 	vmov	r2, r3, d7
 8004728:	eeb0 9a47 	vmov.f32	s18, s14
 800472c:	eef0 9a67 	vmov.f32	s19, s15
 8004730:	4682      	mov	sl, r0
 8004732:	f7fb fd4d 	bl	80001d0 <__aeabi_dsub>
 8004736:	4652      	mov	r2, sl
 8004738:	4606      	mov	r6, r0
 800473a:	460f      	mov	r7, r1
 800473c:	462b      	mov	r3, r5
 800473e:	ec51 0b19 	vmov	r0, r1, d9
 8004742:	f7fb fd47 	bl	80001d4 <__adddf3>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	2000      	movs	r0, #0
 800474c:	49bb      	ldr	r1, [pc, #748]	; (8004a3c <__ieee754_pow+0x76c>)
 800474e:	f7fc f821 	bl	8000794 <__aeabi_ddiv>
 8004752:	ec41 0b1a 	vmov	d10, r0, r1
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4630      	mov	r0, r6
 800475c:	4639      	mov	r1, r7
 800475e:	f7fb feef 	bl	8000540 <__aeabi_dmul>
 8004762:	2300      	movs	r3, #0
 8004764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004768:	9302      	str	r3, [sp, #8]
 800476a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800476e:	46ab      	mov	fp, r5
 8004770:	106d      	asrs	r5, r5, #1
 8004772:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004776:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800477a:	ec41 0b18 	vmov	d8, r0, r1
 800477e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004782:	2200      	movs	r2, #0
 8004784:	4640      	mov	r0, r8
 8004786:	4649      	mov	r1, r9
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	f7fb fed8 	bl	8000540 <__aeabi_dmul>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4630      	mov	r0, r6
 8004796:	4639      	mov	r1, r7
 8004798:	f7fb fd1a 	bl	80001d0 <__aeabi_dsub>
 800479c:	ec53 2b19 	vmov	r2, r3, d9
 80047a0:	4606      	mov	r6, r0
 80047a2:	460f      	mov	r7, r1
 80047a4:	4620      	mov	r0, r4
 80047a6:	4629      	mov	r1, r5
 80047a8:	f7fb fd12 	bl	80001d0 <__aeabi_dsub>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4650      	mov	r0, sl
 80047b2:	4659      	mov	r1, fp
 80047b4:	f7fb fd0c 	bl	80001d0 <__aeabi_dsub>
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	f7fb fec0 	bl	8000540 <__aeabi_dmul>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4630      	mov	r0, r6
 80047c6:	4639      	mov	r1, r7
 80047c8:	f7fb fd02 	bl	80001d0 <__aeabi_dsub>
 80047cc:	ec53 2b1a 	vmov	r2, r3, d10
 80047d0:	f7fb feb6 	bl	8000540 <__aeabi_dmul>
 80047d4:	ec53 2b18 	vmov	r2, r3, d8
 80047d8:	ec41 0b19 	vmov	d9, r0, r1
 80047dc:	ec51 0b18 	vmov	r0, r1, d8
 80047e0:	f7fb feae 	bl	8000540 <__aeabi_dmul>
 80047e4:	a37c      	add	r3, pc, #496	; (adr r3, 80049d8 <__ieee754_pow+0x708>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	4604      	mov	r4, r0
 80047ec:	460d      	mov	r5, r1
 80047ee:	f7fb fea7 	bl	8000540 <__aeabi_dmul>
 80047f2:	a37b      	add	r3, pc, #492	; (adr r3, 80049e0 <__ieee754_pow+0x710>)
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f7fb fcec 	bl	80001d4 <__adddf3>
 80047fc:	4622      	mov	r2, r4
 80047fe:	462b      	mov	r3, r5
 8004800:	f7fb fe9e 	bl	8000540 <__aeabi_dmul>
 8004804:	a378      	add	r3, pc, #480	; (adr r3, 80049e8 <__ieee754_pow+0x718>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f7fb fce3 	bl	80001d4 <__adddf3>
 800480e:	4622      	mov	r2, r4
 8004810:	462b      	mov	r3, r5
 8004812:	f7fb fe95 	bl	8000540 <__aeabi_dmul>
 8004816:	a376      	add	r3, pc, #472	; (adr r3, 80049f0 <__ieee754_pow+0x720>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f7fb fcda 	bl	80001d4 <__adddf3>
 8004820:	4622      	mov	r2, r4
 8004822:	462b      	mov	r3, r5
 8004824:	f7fb fe8c 	bl	8000540 <__aeabi_dmul>
 8004828:	a373      	add	r3, pc, #460	; (adr r3, 80049f8 <__ieee754_pow+0x728>)
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f7fb fcd1 	bl	80001d4 <__adddf3>
 8004832:	4622      	mov	r2, r4
 8004834:	462b      	mov	r3, r5
 8004836:	f7fb fe83 	bl	8000540 <__aeabi_dmul>
 800483a:	a371      	add	r3, pc, #452	; (adr r3, 8004a00 <__ieee754_pow+0x730>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f7fb fcc8 	bl	80001d4 <__adddf3>
 8004844:	4622      	mov	r2, r4
 8004846:	4606      	mov	r6, r0
 8004848:	460f      	mov	r7, r1
 800484a:	462b      	mov	r3, r5
 800484c:	4620      	mov	r0, r4
 800484e:	4629      	mov	r1, r5
 8004850:	f7fb fe76 	bl	8000540 <__aeabi_dmul>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	f7fb fe70 	bl	8000540 <__aeabi_dmul>
 8004860:	4642      	mov	r2, r8
 8004862:	4604      	mov	r4, r0
 8004864:	460d      	mov	r5, r1
 8004866:	464b      	mov	r3, r9
 8004868:	ec51 0b18 	vmov	r0, r1, d8
 800486c:	f7fb fcb2 	bl	80001d4 <__adddf3>
 8004870:	ec53 2b19 	vmov	r2, r3, d9
 8004874:	f7fb fe64 	bl	8000540 <__aeabi_dmul>
 8004878:	4622      	mov	r2, r4
 800487a:	462b      	mov	r3, r5
 800487c:	f7fb fcaa 	bl	80001d4 <__adddf3>
 8004880:	4642      	mov	r2, r8
 8004882:	4682      	mov	sl, r0
 8004884:	468b      	mov	fp, r1
 8004886:	464b      	mov	r3, r9
 8004888:	4640      	mov	r0, r8
 800488a:	4649      	mov	r1, r9
 800488c:	f7fb fe58 	bl	8000540 <__aeabi_dmul>
 8004890:	4b6b      	ldr	r3, [pc, #428]	; (8004a40 <__ieee754_pow+0x770>)
 8004892:	2200      	movs	r2, #0
 8004894:	4606      	mov	r6, r0
 8004896:	460f      	mov	r7, r1
 8004898:	f7fb fc9c 	bl	80001d4 <__adddf3>
 800489c:	4652      	mov	r2, sl
 800489e:	465b      	mov	r3, fp
 80048a0:	f7fb fc98 	bl	80001d4 <__adddf3>
 80048a4:	2000      	movs	r0, #0
 80048a6:	4604      	mov	r4, r0
 80048a8:	460d      	mov	r5, r1
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4640      	mov	r0, r8
 80048b0:	4649      	mov	r1, r9
 80048b2:	f7fb fe45 	bl	8000540 <__aeabi_dmul>
 80048b6:	4b62      	ldr	r3, [pc, #392]	; (8004a40 <__ieee754_pow+0x770>)
 80048b8:	4680      	mov	r8, r0
 80048ba:	4689      	mov	r9, r1
 80048bc:	2200      	movs	r2, #0
 80048be:	4620      	mov	r0, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	f7fb fc85 	bl	80001d0 <__aeabi_dsub>
 80048c6:	4632      	mov	r2, r6
 80048c8:	463b      	mov	r3, r7
 80048ca:	f7fb fc81 	bl	80001d0 <__aeabi_dsub>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4650      	mov	r0, sl
 80048d4:	4659      	mov	r1, fp
 80048d6:	f7fb fc7b 	bl	80001d0 <__aeabi_dsub>
 80048da:	ec53 2b18 	vmov	r2, r3, d8
 80048de:	f7fb fe2f 	bl	8000540 <__aeabi_dmul>
 80048e2:	4622      	mov	r2, r4
 80048e4:	4606      	mov	r6, r0
 80048e6:	460f      	mov	r7, r1
 80048e8:	462b      	mov	r3, r5
 80048ea:	ec51 0b19 	vmov	r0, r1, d9
 80048ee:	f7fb fe27 	bl	8000540 <__aeabi_dmul>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4630      	mov	r0, r6
 80048f8:	4639      	mov	r1, r7
 80048fa:	f7fb fc6b 	bl	80001d4 <__adddf3>
 80048fe:	4606      	mov	r6, r0
 8004900:	460f      	mov	r7, r1
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4640      	mov	r0, r8
 8004908:	4649      	mov	r1, r9
 800490a:	f7fb fc63 	bl	80001d4 <__adddf3>
 800490e:	a33e      	add	r3, pc, #248	; (adr r3, 8004a08 <__ieee754_pow+0x738>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	2000      	movs	r0, #0
 8004916:	4604      	mov	r4, r0
 8004918:	460d      	mov	r5, r1
 800491a:	f7fb fe11 	bl	8000540 <__aeabi_dmul>
 800491e:	4642      	mov	r2, r8
 8004920:	ec41 0b18 	vmov	d8, r0, r1
 8004924:	464b      	mov	r3, r9
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	f7fb fc51 	bl	80001d0 <__aeabi_dsub>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4630      	mov	r0, r6
 8004934:	4639      	mov	r1, r7
 8004936:	f7fb fc4b 	bl	80001d0 <__aeabi_dsub>
 800493a:	a335      	add	r3, pc, #212	; (adr r3, 8004a10 <__ieee754_pow+0x740>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f7fb fdfe 	bl	8000540 <__aeabi_dmul>
 8004944:	a334      	add	r3, pc, #208	; (adr r3, 8004a18 <__ieee754_pow+0x748>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	4606      	mov	r6, r0
 800494c:	460f      	mov	r7, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f7fb fdf5 	bl	8000540 <__aeabi_dmul>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4630      	mov	r0, r6
 800495c:	4639      	mov	r1, r7
 800495e:	f7fb fc39 	bl	80001d4 <__adddf3>
 8004962:	9a07      	ldr	r2, [sp, #28]
 8004964:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <__ieee754_pow+0x774>)
 8004966:	4413      	add	r3, r2
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f7fb fc32 	bl	80001d4 <__adddf3>
 8004970:	4682      	mov	sl, r0
 8004972:	9805      	ldr	r0, [sp, #20]
 8004974:	468b      	mov	fp, r1
 8004976:	f7fb fd79 	bl	800046c <__aeabi_i2d>
 800497a:	9a07      	ldr	r2, [sp, #28]
 800497c:	4b32      	ldr	r3, [pc, #200]	; (8004a48 <__ieee754_pow+0x778>)
 800497e:	4413      	add	r3, r2
 8004980:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004984:	4606      	mov	r6, r0
 8004986:	460f      	mov	r7, r1
 8004988:	4652      	mov	r2, sl
 800498a:	465b      	mov	r3, fp
 800498c:	ec51 0b18 	vmov	r0, r1, d8
 8004990:	f7fb fc20 	bl	80001d4 <__adddf3>
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	f7fb fc1c 	bl	80001d4 <__adddf3>
 800499c:	4632      	mov	r2, r6
 800499e:	463b      	mov	r3, r7
 80049a0:	f7fb fc18 	bl	80001d4 <__adddf3>
 80049a4:	2000      	movs	r0, #0
 80049a6:	4632      	mov	r2, r6
 80049a8:	463b      	mov	r3, r7
 80049aa:	4604      	mov	r4, r0
 80049ac:	460d      	mov	r5, r1
 80049ae:	f7fb fc0f 	bl	80001d0 <__aeabi_dsub>
 80049b2:	4642      	mov	r2, r8
 80049b4:	464b      	mov	r3, r9
 80049b6:	f7fb fc0b 	bl	80001d0 <__aeabi_dsub>
 80049ba:	ec53 2b18 	vmov	r2, r3, d8
 80049be:	f7fb fc07 	bl	80001d0 <__aeabi_dsub>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4650      	mov	r0, sl
 80049c8:	4659      	mov	r1, fp
 80049ca:	e610      	b.n	80045ee <__ieee754_pow+0x31e>
 80049cc:	2401      	movs	r4, #1
 80049ce:	e6a1      	b.n	8004714 <__ieee754_pow+0x444>
 80049d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004a20 <__ieee754_pow+0x750>
 80049d4:	e617      	b.n	8004606 <__ieee754_pow+0x336>
 80049d6:	bf00      	nop
 80049d8:	4a454eef 	.word	0x4a454eef
 80049dc:	3fca7e28 	.word	0x3fca7e28
 80049e0:	93c9db65 	.word	0x93c9db65
 80049e4:	3fcd864a 	.word	0x3fcd864a
 80049e8:	a91d4101 	.word	0xa91d4101
 80049ec:	3fd17460 	.word	0x3fd17460
 80049f0:	518f264d 	.word	0x518f264d
 80049f4:	3fd55555 	.word	0x3fd55555
 80049f8:	db6fabff 	.word	0xdb6fabff
 80049fc:	3fdb6db6 	.word	0x3fdb6db6
 8004a00:	33333303 	.word	0x33333303
 8004a04:	3fe33333 	.word	0x3fe33333
 8004a08:	e0000000 	.word	0xe0000000
 8004a0c:	3feec709 	.word	0x3feec709
 8004a10:	dc3a03fd 	.word	0xdc3a03fd
 8004a14:	3feec709 	.word	0x3feec709
 8004a18:	145b01f5 	.word	0x145b01f5
 8004a1c:	be3e2fe0 	.word	0xbe3e2fe0
 8004a20:	00000000 	.word	0x00000000
 8004a24:	3ff00000 	.word	0x3ff00000
 8004a28:	7ff00000 	.word	0x7ff00000
 8004a2c:	43400000 	.word	0x43400000
 8004a30:	0003988e 	.word	0x0003988e
 8004a34:	000bb679 	.word	0x000bb679
 8004a38:	08005f48 	.word	0x08005f48
 8004a3c:	3ff00000 	.word	0x3ff00000
 8004a40:	40080000 	.word	0x40080000
 8004a44:	08005f68 	.word	0x08005f68
 8004a48:	08005f58 	.word	0x08005f58
 8004a4c:	a3b5      	add	r3, pc, #724	; (adr r3, 8004d24 <__ieee754_pow+0xa54>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	4640      	mov	r0, r8
 8004a54:	4649      	mov	r1, r9
 8004a56:	f7fb fbbd 	bl	80001d4 <__adddf3>
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	ec41 0b1a 	vmov	d10, r0, r1
 8004a60:	462b      	mov	r3, r5
 8004a62:	4630      	mov	r0, r6
 8004a64:	4639      	mov	r1, r7
 8004a66:	f7fb fbb3 	bl	80001d0 <__aeabi_dsub>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	ec51 0b1a 	vmov	r0, r1, d10
 8004a72:	f7fb fff5 	bl	8000a60 <__aeabi_dcmpgt>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	f47f ae04 	bne.w	8004684 <__ieee754_pow+0x3b4>
 8004a7c:	4aa4      	ldr	r2, [pc, #656]	; (8004d10 <__ieee754_pow+0xa40>)
 8004a7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a82:	4293      	cmp	r3, r2
 8004a84:	f340 8108 	ble.w	8004c98 <__ieee754_pow+0x9c8>
 8004a88:	151b      	asrs	r3, r3, #20
 8004a8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004a8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004a92:	fa4a f303 	asr.w	r3, sl, r3
 8004a96:	445b      	add	r3, fp
 8004a98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004a9c:	4e9d      	ldr	r6, [pc, #628]	; (8004d14 <__ieee754_pow+0xa44>)
 8004a9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004aa2:	4116      	asrs	r6, r2
 8004aa4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	ea23 0106 	bic.w	r1, r3, r6
 8004aae:	f1c2 0214 	rsb	r2, r2, #20
 8004ab2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004ab6:	fa4a fa02 	asr.w	sl, sl, r2
 8004aba:	f1bb 0f00 	cmp.w	fp, #0
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	bfb8      	it	lt
 8004ac8:	f1ca 0a00 	rsblt	sl, sl, #0
 8004acc:	f7fb fb80 	bl	80001d0 <__aeabi_dsub>
 8004ad0:	ec41 0b19 	vmov	d9, r0, r1
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	ec51 0b19 	vmov	r0, r1, d9
 8004adc:	f7fb fb7a 	bl	80001d4 <__adddf3>
 8004ae0:	a37b      	add	r3, pc, #492	; (adr r3, 8004cd0 <__ieee754_pow+0xa00>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	4604      	mov	r4, r0
 8004aea:	460d      	mov	r5, r1
 8004aec:	f7fb fd28 	bl	8000540 <__aeabi_dmul>
 8004af0:	ec53 2b19 	vmov	r2, r3, d9
 8004af4:	4606      	mov	r6, r0
 8004af6:	460f      	mov	r7, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fb fb68 	bl	80001d0 <__aeabi_dsub>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	f7fb fb62 	bl	80001d0 <__aeabi_dsub>
 8004b0c:	a372      	add	r3, pc, #456	; (adr r3, 8004cd8 <__ieee754_pow+0xa08>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fd15 	bl	8000540 <__aeabi_dmul>
 8004b16:	a372      	add	r3, pc, #456	; (adr r3, 8004ce0 <__ieee754_pow+0xa10>)
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	4680      	mov	r8, r0
 8004b1e:	4689      	mov	r9, r1
 8004b20:	4620      	mov	r0, r4
 8004b22:	4629      	mov	r1, r5
 8004b24:	f7fb fd0c 	bl	8000540 <__aeabi_dmul>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	4649      	mov	r1, r9
 8004b30:	f7fb fb50 	bl	80001d4 <__adddf3>
 8004b34:	4604      	mov	r4, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	4639      	mov	r1, r7
 8004b40:	f7fb fb48 	bl	80001d4 <__adddf3>
 8004b44:	4632      	mov	r2, r6
 8004b46:	463b      	mov	r3, r7
 8004b48:	4680      	mov	r8, r0
 8004b4a:	4689      	mov	r9, r1
 8004b4c:	f7fb fb40 	bl	80001d0 <__aeabi_dsub>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4620      	mov	r0, r4
 8004b56:	4629      	mov	r1, r5
 8004b58:	f7fb fb3a 	bl	80001d0 <__aeabi_dsub>
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	4606      	mov	r6, r0
 8004b60:	460f      	mov	r7, r1
 8004b62:	464b      	mov	r3, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	4649      	mov	r1, r9
 8004b68:	f7fb fcea 	bl	8000540 <__aeabi_dmul>
 8004b6c:	a35e      	add	r3, pc, #376	; (adr r3, 8004ce8 <__ieee754_pow+0xa18>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	4604      	mov	r4, r0
 8004b74:	460d      	mov	r5, r1
 8004b76:	f7fb fce3 	bl	8000540 <__aeabi_dmul>
 8004b7a:	a35d      	add	r3, pc, #372	; (adr r3, 8004cf0 <__ieee754_pow+0xa20>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fb26 	bl	80001d0 <__aeabi_dsub>
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	f7fb fcda 	bl	8000540 <__aeabi_dmul>
 8004b8c:	a35a      	add	r3, pc, #360	; (adr r3, 8004cf8 <__ieee754_pow+0xa28>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f7fb fb1f 	bl	80001d4 <__adddf3>
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	f7fb fcd1 	bl	8000540 <__aeabi_dmul>
 8004b9e:	a358      	add	r3, pc, #352	; (adr r3, 8004d00 <__ieee754_pow+0xa30>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fb14 	bl	80001d0 <__aeabi_dsub>
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	f7fb fcc8 	bl	8000540 <__aeabi_dmul>
 8004bb0:	a355      	add	r3, pc, #340	; (adr r3, 8004d08 <__ieee754_pow+0xa38>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fb0d 	bl	80001d4 <__adddf3>
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f7fb fcbf 	bl	8000540 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	4649      	mov	r1, r9
 8004bca:	f7fb fb01 	bl	80001d0 <__aeabi_dsub>
 8004bce:	4604      	mov	r4, r0
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	4649      	mov	r1, r9
 8004bda:	f7fb fcb1 	bl	8000540 <__aeabi_dmul>
 8004bde:	2200      	movs	r2, #0
 8004be0:	ec41 0b19 	vmov	d9, r0, r1
 8004be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004be8:	4620      	mov	r0, r4
 8004bea:	4629      	mov	r1, r5
 8004bec:	f7fb faf0 	bl	80001d0 <__aeabi_dsub>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	ec51 0b19 	vmov	r0, r1, d9
 8004bf8:	f7fb fdcc 	bl	8000794 <__aeabi_ddiv>
 8004bfc:	4632      	mov	r2, r6
 8004bfe:	4604      	mov	r4, r0
 8004c00:	460d      	mov	r5, r1
 8004c02:	463b      	mov	r3, r7
 8004c04:	4640      	mov	r0, r8
 8004c06:	4649      	mov	r1, r9
 8004c08:	f7fb fc9a 	bl	8000540 <__aeabi_dmul>
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	463b      	mov	r3, r7
 8004c10:	f7fb fae0 	bl	80001d4 <__adddf3>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	f7fb fad8 	bl	80001d0 <__aeabi_dsub>
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	f7fb fad4 	bl	80001d0 <__aeabi_dsub>
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	493a      	ldr	r1, [pc, #232]	; (8004d18 <__ieee754_pow+0xa48>)
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f7fb face 	bl	80001d0 <__aeabi_dsub>
 8004c34:	ec41 0b10 	vmov	d0, r0, r1
 8004c38:	ee10 3a90 	vmov	r3, s1
 8004c3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004c40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c44:	da2b      	bge.n	8004c9e <__ieee754_pow+0x9ce>
 8004c46:	4650      	mov	r0, sl
 8004c48:	f001 f8ce 	bl	8005de8 <scalbn>
 8004c4c:	ec51 0b10 	vmov	r0, r1, d0
 8004c50:	ec53 2b18 	vmov	r2, r3, d8
 8004c54:	f7ff bbed 	b.w	8004432 <__ieee754_pow+0x162>
 8004c58:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <__ieee754_pow+0xa4c>)
 8004c5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004c5e:	429e      	cmp	r6, r3
 8004c60:	f77f af0c 	ble.w	8004a7c <__ieee754_pow+0x7ac>
 8004c64:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <__ieee754_pow+0xa50>)
 8004c66:	440b      	add	r3, r1
 8004c68:	4303      	orrs	r3, r0
 8004c6a:	d009      	beq.n	8004c80 <__ieee754_pow+0x9b0>
 8004c6c:	ec51 0b18 	vmov	r0, r1, d8
 8004c70:	2200      	movs	r2, #0
 8004c72:	2300      	movs	r3, #0
 8004c74:	f7fb fed6 	bl	8000a24 <__aeabi_dcmplt>
 8004c78:	3800      	subs	r0, #0
 8004c7a:	bf18      	it	ne
 8004c7c:	2001      	movne	r0, #1
 8004c7e:	e447      	b.n	8004510 <__ieee754_pow+0x240>
 8004c80:	4622      	mov	r2, r4
 8004c82:	462b      	mov	r3, r5
 8004c84:	f7fb faa4 	bl	80001d0 <__aeabi_dsub>
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	f7fb fede 	bl	8000a4c <__aeabi_dcmpge>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	f43f aef3 	beq.w	8004a7c <__ieee754_pow+0x7ac>
 8004c96:	e7e9      	b.n	8004c6c <__ieee754_pow+0x99c>
 8004c98:	f04f 0a00 	mov.w	sl, #0
 8004c9c:	e71a      	b.n	8004ad4 <__ieee754_pow+0x804>
 8004c9e:	ec51 0b10 	vmov	r0, r1, d0
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	e7d4      	b.n	8004c50 <__ieee754_pow+0x980>
 8004ca6:	491c      	ldr	r1, [pc, #112]	; (8004d18 <__ieee754_pow+0xa48>)
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f7ff bb30 	b.w	800430e <__ieee754_pow+0x3e>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	f7ff bb2c 	b.w	800430e <__ieee754_pow+0x3e>
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	4639      	mov	r1, r7
 8004cba:	f7ff bb28 	b.w	800430e <__ieee754_pow+0x3e>
 8004cbe:	9204      	str	r2, [sp, #16]
 8004cc0:	f7ff bb7a 	b.w	80043b8 <__ieee754_pow+0xe8>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f7ff bb64 	b.w	8004392 <__ieee754_pow+0xc2>
 8004cca:	bf00      	nop
 8004ccc:	f3af 8000 	nop.w
 8004cd0:	00000000 	.word	0x00000000
 8004cd4:	3fe62e43 	.word	0x3fe62e43
 8004cd8:	fefa39ef 	.word	0xfefa39ef
 8004cdc:	3fe62e42 	.word	0x3fe62e42
 8004ce0:	0ca86c39 	.word	0x0ca86c39
 8004ce4:	be205c61 	.word	0xbe205c61
 8004ce8:	72bea4d0 	.word	0x72bea4d0
 8004cec:	3e663769 	.word	0x3e663769
 8004cf0:	c5d26bf1 	.word	0xc5d26bf1
 8004cf4:	3ebbbd41 	.word	0x3ebbbd41
 8004cf8:	af25de2c 	.word	0xaf25de2c
 8004cfc:	3f11566a 	.word	0x3f11566a
 8004d00:	16bebd93 	.word	0x16bebd93
 8004d04:	3f66c16c 	.word	0x3f66c16c
 8004d08:	5555553e 	.word	0x5555553e
 8004d0c:	3fc55555 	.word	0x3fc55555
 8004d10:	3fe00000 	.word	0x3fe00000
 8004d14:	000fffff 	.word	0x000fffff
 8004d18:	3ff00000 	.word	0x3ff00000
 8004d1c:	4090cbff 	.word	0x4090cbff
 8004d20:	3f6f3400 	.word	0x3f6f3400
 8004d24:	652b82fe 	.word	0x652b82fe
 8004d28:	3c971547 	.word	0x3c971547
 8004d2c:	00000000 	.word	0x00000000

08004d30 <__ieee754_rem_pio2>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	ed2d 8b02 	vpush	{d8}
 8004d38:	ec55 4b10 	vmov	r4, r5, d0
 8004d3c:	4bca      	ldr	r3, [pc, #808]	; (8005068 <__ieee754_rem_pio2+0x338>)
 8004d3e:	b08b      	sub	sp, #44	; 0x2c
 8004d40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004d44:	4598      	cmp	r8, r3
 8004d46:	4682      	mov	sl, r0
 8004d48:	9502      	str	r5, [sp, #8]
 8004d4a:	dc08      	bgt.n	8004d5e <__ieee754_rem_pio2+0x2e>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2300      	movs	r3, #0
 8004d50:	ed80 0b00 	vstr	d0, [r0]
 8004d54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d58:	f04f 0b00 	mov.w	fp, #0
 8004d5c:	e028      	b.n	8004db0 <__ieee754_rem_pio2+0x80>
 8004d5e:	4bc3      	ldr	r3, [pc, #780]	; (800506c <__ieee754_rem_pio2+0x33c>)
 8004d60:	4598      	cmp	r8, r3
 8004d62:	dc78      	bgt.n	8004e56 <__ieee754_rem_pio2+0x126>
 8004d64:	9b02      	ldr	r3, [sp, #8]
 8004d66:	4ec2      	ldr	r6, [pc, #776]	; (8005070 <__ieee754_rem_pio2+0x340>)
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	ee10 0a10 	vmov	r0, s0
 8004d6e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005030 <__ieee754_rem_pio2+0x300>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	4629      	mov	r1, r5
 8004d76:	dd39      	ble.n	8004dec <__ieee754_rem_pio2+0xbc>
 8004d78:	f7fb fa2a 	bl	80001d0 <__aeabi_dsub>
 8004d7c:	45b0      	cmp	r8, r6
 8004d7e:	4604      	mov	r4, r0
 8004d80:	460d      	mov	r5, r1
 8004d82:	d01b      	beq.n	8004dbc <__ieee754_rem_pio2+0x8c>
 8004d84:	a3ac      	add	r3, pc, #688	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb fa21 	bl	80001d0 <__aeabi_dsub>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	e9ca 2300 	strd	r2, r3, [sl]
 8004d96:	4620      	mov	r0, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f7fb fa19 	bl	80001d0 <__aeabi_dsub>
 8004d9e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fa14 	bl	80001d0 <__aeabi_dsub>
 8004da8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004dac:	f04f 0b01 	mov.w	fp, #1
 8004db0:	4658      	mov	r0, fp
 8004db2:	b00b      	add	sp, #44	; 0x2c
 8004db4:	ecbd 8b02 	vpop	{d8}
 8004db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dbc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005040 <__ieee754_rem_pio2+0x310>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fa05 	bl	80001d0 <__aeabi_dsub>
 8004dc6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	4604      	mov	r4, r0
 8004dce:	460d      	mov	r5, r1
 8004dd0:	f7fb f9fe 	bl	80001d0 <__aeabi_dsub>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	e9ca 2300 	strd	r2, r3, [sl]
 8004ddc:	4620      	mov	r0, r4
 8004dde:	4629      	mov	r1, r5
 8004de0:	f7fb f9f6 	bl	80001d0 <__aeabi_dsub>
 8004de4:	a398      	add	r3, pc, #608	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	e7db      	b.n	8004da4 <__ieee754_rem_pio2+0x74>
 8004dec:	f7fb f9f2 	bl	80001d4 <__adddf3>
 8004df0:	45b0      	cmp	r8, r6
 8004df2:	4604      	mov	r4, r0
 8004df4:	460d      	mov	r5, r1
 8004df6:	d016      	beq.n	8004e26 <__ieee754_rem_pio2+0xf6>
 8004df8:	a38f      	add	r3, pc, #572	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb f9e9 	bl	80001d4 <__adddf3>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	e9ca 2300 	strd	r2, r3, [sl]
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f7fb f9df 	bl	80001d0 <__aeabi_dsub>
 8004e12:	a389      	add	r3, pc, #548	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f7fb f9dc 	bl	80001d4 <__adddf3>
 8004e1c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8004e20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e24:	e7c4      	b.n	8004db0 <__ieee754_rem_pio2+0x80>
 8004e26:	a386      	add	r3, pc, #536	; (adr r3, 8005040 <__ieee754_rem_pio2+0x310>)
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f7fb f9d2 	bl	80001d4 <__adddf3>
 8004e30:	a385      	add	r3, pc, #532	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	4604      	mov	r4, r0
 8004e38:	460d      	mov	r5, r1
 8004e3a:	f7fb f9cb 	bl	80001d4 <__adddf3>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	e9ca 2300 	strd	r2, r3, [sl]
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f7fb f9c1 	bl	80001d0 <__aeabi_dsub>
 8004e4e:	a37e      	add	r3, pc, #504	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	e7e0      	b.n	8004e18 <__ieee754_rem_pio2+0xe8>
 8004e56:	4b87      	ldr	r3, [pc, #540]	; (8005074 <__ieee754_rem_pio2+0x344>)
 8004e58:	4598      	cmp	r8, r3
 8004e5a:	f300 80d9 	bgt.w	8005010 <__ieee754_rem_pio2+0x2e0>
 8004e5e:	f000 ff2d 	bl	8005cbc <fabs>
 8004e62:	ec55 4b10 	vmov	r4, r5, d0
 8004e66:	ee10 0a10 	vmov	r0, s0
 8004e6a:	a379      	add	r3, pc, #484	; (adr r3, 8005050 <__ieee754_rem_pio2+0x320>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	4629      	mov	r1, r5
 8004e72:	f7fb fb65 	bl	8000540 <__aeabi_dmul>
 8004e76:	4b80      	ldr	r3, [pc, #512]	; (8005078 <__ieee754_rem_pio2+0x348>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f7fb f9ab 	bl	80001d4 <__adddf3>
 8004e7e:	f7fb fe0f 	bl	8000aa0 <__aeabi_d2iz>
 8004e82:	4683      	mov	fp, r0
 8004e84:	f7fb faf2 	bl	800046c <__aeabi_i2d>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	ec43 2b18 	vmov	d8, r2, r3
 8004e90:	a367      	add	r3, pc, #412	; (adr r3, 8005030 <__ieee754_rem_pio2+0x300>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f7fb fb53 	bl	8000540 <__aeabi_dmul>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7fb f995 	bl	80001d0 <__aeabi_dsub>
 8004ea6:	a364      	add	r3, pc, #400	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	4606      	mov	r6, r0
 8004eae:	460f      	mov	r7, r1
 8004eb0:	ec51 0b18 	vmov	r0, r1, d8
 8004eb4:	f7fb fb44 	bl	8000540 <__aeabi_dmul>
 8004eb8:	f1bb 0f1f 	cmp.w	fp, #31
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	460d      	mov	r5, r1
 8004ec0:	dc0d      	bgt.n	8004ede <__ieee754_rem_pio2+0x1ae>
 8004ec2:	4b6e      	ldr	r3, [pc, #440]	; (800507c <__ieee754_rem_pio2+0x34c>)
 8004ec4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8004ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ecc:	4543      	cmp	r3, r8
 8004ece:	d006      	beq.n	8004ede <__ieee754_rem_pio2+0x1ae>
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	462b      	mov	r3, r5
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	4639      	mov	r1, r7
 8004ed8:	f7fb f97a 	bl	80001d0 <__aeabi_dsub>
 8004edc:	e00f      	b.n	8004efe <__ieee754_rem_pio2+0x1ce>
 8004ede:	462b      	mov	r3, r5
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	f7fb f973 	bl	80001d0 <__aeabi_dsub>
 8004eea:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004eee:	9303      	str	r3, [sp, #12]
 8004ef0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ef4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004ef8:	f1b8 0f10 	cmp.w	r8, #16
 8004efc:	dc02      	bgt.n	8004f04 <__ieee754_rem_pio2+0x1d4>
 8004efe:	e9ca 0100 	strd	r0, r1, [sl]
 8004f02:	e039      	b.n	8004f78 <__ieee754_rem_pio2+0x248>
 8004f04:	a34e      	add	r3, pc, #312	; (adr r3, 8005040 <__ieee754_rem_pio2+0x310>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	ec51 0b18 	vmov	r0, r1, d8
 8004f0e:	f7fb fb17 	bl	8000540 <__aeabi_dmul>
 8004f12:	4604      	mov	r4, r0
 8004f14:	460d      	mov	r5, r1
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	f7fb f957 	bl	80001d0 <__aeabi_dsub>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4680      	mov	r8, r0
 8004f28:	4689      	mov	r9, r1
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	f7fb f94f 	bl	80001d0 <__aeabi_dsub>
 8004f32:	4622      	mov	r2, r4
 8004f34:	462b      	mov	r3, r5
 8004f36:	f7fb f94b 	bl	80001d0 <__aeabi_dsub>
 8004f3a:	a343      	add	r3, pc, #268	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	4604      	mov	r4, r0
 8004f42:	460d      	mov	r5, r1
 8004f44:	ec51 0b18 	vmov	r0, r1, d8
 8004f48:	f7fb fafa 	bl	8000540 <__aeabi_dmul>
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	462b      	mov	r3, r5
 8004f50:	f7fb f93e 	bl	80001d0 <__aeabi_dsub>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4604      	mov	r4, r0
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	4649      	mov	r1, r9
 8004f60:	f7fb f936 	bl	80001d0 <__aeabi_dsub>
 8004f64:	9a03      	ldr	r2, [sp, #12]
 8004f66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b31      	cmp	r3, #49	; 0x31
 8004f6e:	dc24      	bgt.n	8004fba <__ieee754_rem_pio2+0x28a>
 8004f70:	e9ca 0100 	strd	r0, r1, [sl]
 8004f74:	4646      	mov	r6, r8
 8004f76:	464f      	mov	r7, r9
 8004f78:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4642      	mov	r2, r8
 8004f80:	464b      	mov	r3, r9
 8004f82:	4639      	mov	r1, r7
 8004f84:	f7fb f924 	bl	80001d0 <__aeabi_dsub>
 8004f88:	462b      	mov	r3, r5
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	f7fb f920 	bl	80001d0 <__aeabi_dsub>
 8004f90:	9b02      	ldr	r3, [sp, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f98:	f6bf af0a 	bge.w	8004db0 <__ieee754_rem_pio2+0x80>
 8004f9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004fa0:	f8ca 3004 	str.w	r3, [sl, #4]
 8004fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fa8:	f8ca 8000 	str.w	r8, [sl]
 8004fac:	f8ca 0008 	str.w	r0, [sl, #8]
 8004fb0:	f8ca 300c 	str.w	r3, [sl, #12]
 8004fb4:	f1cb 0b00 	rsb	fp, fp, #0
 8004fb8:	e6fa      	b.n	8004db0 <__ieee754_rem_pio2+0x80>
 8004fba:	a327      	add	r3, pc, #156	; (adr r3, 8005058 <__ieee754_rem_pio2+0x328>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	ec51 0b18 	vmov	r0, r1, d8
 8004fc4:	f7fb fabc 	bl	8000540 <__aeabi_dmul>
 8004fc8:	4604      	mov	r4, r0
 8004fca:	460d      	mov	r5, r1
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb f8fc 	bl	80001d0 <__aeabi_dsub>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4606      	mov	r6, r0
 8004fde:	460f      	mov	r7, r1
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	f7fb f8f4 	bl	80001d0 <__aeabi_dsub>
 8004fe8:	4622      	mov	r2, r4
 8004fea:	462b      	mov	r3, r5
 8004fec:	f7fb f8f0 	bl	80001d0 <__aeabi_dsub>
 8004ff0:	a31b      	add	r3, pc, #108	; (adr r3, 8005060 <__ieee754_rem_pio2+0x330>)
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	460d      	mov	r5, r1
 8004ffa:	ec51 0b18 	vmov	r0, r1, d8
 8004ffe:	f7fb fa9f 	bl	8000540 <__aeabi_dmul>
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	f7fb f8e3 	bl	80001d0 <__aeabi_dsub>
 800500a:	4604      	mov	r4, r0
 800500c:	460d      	mov	r5, r1
 800500e:	e75f      	b.n	8004ed0 <__ieee754_rem_pio2+0x1a0>
 8005010:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <__ieee754_rem_pio2+0x350>)
 8005012:	4598      	cmp	r8, r3
 8005014:	dd36      	ble.n	8005084 <__ieee754_rem_pio2+0x354>
 8005016:	ee10 2a10 	vmov	r2, s0
 800501a:	462b      	mov	r3, r5
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb f8d6 	bl	80001d0 <__aeabi_dsub>
 8005024:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005028:	e9ca 0100 	strd	r0, r1, [sl]
 800502c:	e694      	b.n	8004d58 <__ieee754_rem_pio2+0x28>
 800502e:	bf00      	nop
 8005030:	54400000 	.word	0x54400000
 8005034:	3ff921fb 	.word	0x3ff921fb
 8005038:	1a626331 	.word	0x1a626331
 800503c:	3dd0b461 	.word	0x3dd0b461
 8005040:	1a600000 	.word	0x1a600000
 8005044:	3dd0b461 	.word	0x3dd0b461
 8005048:	2e037073 	.word	0x2e037073
 800504c:	3ba3198a 	.word	0x3ba3198a
 8005050:	6dc9c883 	.word	0x6dc9c883
 8005054:	3fe45f30 	.word	0x3fe45f30
 8005058:	2e000000 	.word	0x2e000000
 800505c:	3ba3198a 	.word	0x3ba3198a
 8005060:	252049c1 	.word	0x252049c1
 8005064:	397b839a 	.word	0x397b839a
 8005068:	3fe921fb 	.word	0x3fe921fb
 800506c:	4002d97b 	.word	0x4002d97b
 8005070:	3ff921fb 	.word	0x3ff921fb
 8005074:	413921fb 	.word	0x413921fb
 8005078:	3fe00000 	.word	0x3fe00000
 800507c:	08005f78 	.word	0x08005f78
 8005080:	7fefffff 	.word	0x7fefffff
 8005084:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005088:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800508c:	ee10 0a10 	vmov	r0, s0
 8005090:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005094:	ee10 6a10 	vmov	r6, s0
 8005098:	460f      	mov	r7, r1
 800509a:	f7fb fd01 	bl	8000aa0 <__aeabi_d2iz>
 800509e:	f7fb f9e5 	bl	800046c <__aeabi_i2d>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4630      	mov	r0, r6
 80050a8:	4639      	mov	r1, r7
 80050aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050ae:	f7fb f88f 	bl	80001d0 <__aeabi_dsub>
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <__ieee754_rem_pio2+0x410>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	f7fb fa43 	bl	8000540 <__aeabi_dmul>
 80050ba:	460f      	mov	r7, r1
 80050bc:	4606      	mov	r6, r0
 80050be:	f7fb fcef 	bl	8000aa0 <__aeabi_d2iz>
 80050c2:	f7fb f9d3 	bl	800046c <__aeabi_i2d>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4630      	mov	r0, r6
 80050cc:	4639      	mov	r1, r7
 80050ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050d2:	f7fb f87d 	bl	80001d0 <__aeabi_dsub>
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <__ieee754_rem_pio2+0x410>)
 80050d8:	2200      	movs	r2, #0
 80050da:	f7fb fa31 	bl	8000540 <__aeabi_dmul>
 80050de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80050e2:	ad04      	add	r5, sp, #16
 80050e4:	f04f 0803 	mov.w	r8, #3
 80050e8:	46a9      	mov	r9, r5
 80050ea:	2600      	movs	r6, #0
 80050ec:	2700      	movs	r7, #0
 80050ee:	4632      	mov	r2, r6
 80050f0:	463b      	mov	r3, r7
 80050f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80050f6:	46c3      	mov	fp, r8
 80050f8:	3d08      	subs	r5, #8
 80050fa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80050fe:	f7fb fc87 	bl	8000a10 <__aeabi_dcmpeq>
 8005102:	2800      	cmp	r0, #0
 8005104:	d1f3      	bne.n	80050ee <__ieee754_rem_pio2+0x3be>
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <__ieee754_rem_pio2+0x414>)
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	2302      	movs	r3, #2
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	4622      	mov	r2, r4
 8005110:	465b      	mov	r3, fp
 8005112:	4651      	mov	r1, sl
 8005114:	4648      	mov	r0, r9
 8005116:	f000 f993 	bl	8005440 <__kernel_rem_pio2>
 800511a:	9b02      	ldr	r3, [sp, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	4683      	mov	fp, r0
 8005120:	f6bf ae46 	bge.w	8004db0 <__ieee754_rem_pio2+0x80>
 8005124:	e9da 2100 	ldrd	r2, r1, [sl]
 8005128:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800512c:	e9ca 2300 	strd	r2, r3, [sl]
 8005130:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005138:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800513c:	e73a      	b.n	8004fb4 <__ieee754_rem_pio2+0x284>
 800513e:	bf00      	nop
 8005140:	41700000 	.word	0x41700000
 8005144:	08005ff8 	.word	0x08005ff8

08005148 <__ieee754_sqrt>:
 8005148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800514c:	ec55 4b10 	vmov	r4, r5, d0
 8005150:	4e55      	ldr	r6, [pc, #340]	; (80052a8 <__ieee754_sqrt+0x160>)
 8005152:	43ae      	bics	r6, r5
 8005154:	ee10 0a10 	vmov	r0, s0
 8005158:	ee10 3a10 	vmov	r3, s0
 800515c:	462a      	mov	r2, r5
 800515e:	4629      	mov	r1, r5
 8005160:	d110      	bne.n	8005184 <__ieee754_sqrt+0x3c>
 8005162:	ee10 2a10 	vmov	r2, s0
 8005166:	462b      	mov	r3, r5
 8005168:	f7fb f9ea 	bl	8000540 <__aeabi_dmul>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4620      	mov	r0, r4
 8005172:	4629      	mov	r1, r5
 8005174:	f7fb f82e 	bl	80001d4 <__adddf3>
 8005178:	4604      	mov	r4, r0
 800517a:	460d      	mov	r5, r1
 800517c:	ec45 4b10 	vmov	d0, r4, r5
 8005180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005184:	2d00      	cmp	r5, #0
 8005186:	dc10      	bgt.n	80051aa <__ieee754_sqrt+0x62>
 8005188:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800518c:	4330      	orrs	r0, r6
 800518e:	d0f5      	beq.n	800517c <__ieee754_sqrt+0x34>
 8005190:	b15d      	cbz	r5, 80051aa <__ieee754_sqrt+0x62>
 8005192:	ee10 2a10 	vmov	r2, s0
 8005196:	462b      	mov	r3, r5
 8005198:	ee10 0a10 	vmov	r0, s0
 800519c:	f7fb f818 	bl	80001d0 <__aeabi_dsub>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	f7fb faf6 	bl	8000794 <__aeabi_ddiv>
 80051a8:	e7e6      	b.n	8005178 <__ieee754_sqrt+0x30>
 80051aa:	1512      	asrs	r2, r2, #20
 80051ac:	d074      	beq.n	8005298 <__ieee754_sqrt+0x150>
 80051ae:	07d4      	lsls	r4, r2, #31
 80051b0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80051b4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80051b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80051bc:	bf5e      	ittt	pl
 80051be:	0fda      	lsrpl	r2, r3, #31
 80051c0:	005b      	lslpl	r3, r3, #1
 80051c2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80051c6:	2400      	movs	r4, #0
 80051c8:	0fda      	lsrs	r2, r3, #31
 80051ca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80051ce:	107f      	asrs	r7, r7, #1
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	2516      	movs	r5, #22
 80051d4:	4620      	mov	r0, r4
 80051d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80051da:	1886      	adds	r6, r0, r2
 80051dc:	428e      	cmp	r6, r1
 80051de:	bfde      	ittt	le
 80051e0:	1b89      	suble	r1, r1, r6
 80051e2:	18b0      	addle	r0, r6, r2
 80051e4:	18a4      	addle	r4, r4, r2
 80051e6:	0049      	lsls	r1, r1, #1
 80051e8:	3d01      	subs	r5, #1
 80051ea:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80051ee:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80051f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051f6:	d1f0      	bne.n	80051da <__ieee754_sqrt+0x92>
 80051f8:	462a      	mov	r2, r5
 80051fa:	f04f 0e20 	mov.w	lr, #32
 80051fe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005202:	4281      	cmp	r1, r0
 8005204:	eb06 0c05 	add.w	ip, r6, r5
 8005208:	dc02      	bgt.n	8005210 <__ieee754_sqrt+0xc8>
 800520a:	d113      	bne.n	8005234 <__ieee754_sqrt+0xec>
 800520c:	459c      	cmp	ip, r3
 800520e:	d811      	bhi.n	8005234 <__ieee754_sqrt+0xec>
 8005210:	f1bc 0f00 	cmp.w	ip, #0
 8005214:	eb0c 0506 	add.w	r5, ip, r6
 8005218:	da43      	bge.n	80052a2 <__ieee754_sqrt+0x15a>
 800521a:	2d00      	cmp	r5, #0
 800521c:	db41      	blt.n	80052a2 <__ieee754_sqrt+0x15a>
 800521e:	f100 0801 	add.w	r8, r0, #1
 8005222:	1a09      	subs	r1, r1, r0
 8005224:	459c      	cmp	ip, r3
 8005226:	bf88      	it	hi
 8005228:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800522c:	eba3 030c 	sub.w	r3, r3, ip
 8005230:	4432      	add	r2, r6
 8005232:	4640      	mov	r0, r8
 8005234:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005238:	f1be 0e01 	subs.w	lr, lr, #1
 800523c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005240:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005244:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005248:	d1db      	bne.n	8005202 <__ieee754_sqrt+0xba>
 800524a:	430b      	orrs	r3, r1
 800524c:	d006      	beq.n	800525c <__ieee754_sqrt+0x114>
 800524e:	1c50      	adds	r0, r2, #1
 8005250:	bf13      	iteet	ne
 8005252:	3201      	addne	r2, #1
 8005254:	3401      	addeq	r4, #1
 8005256:	4672      	moveq	r2, lr
 8005258:	f022 0201 	bicne.w	r2, r2, #1
 800525c:	1063      	asrs	r3, r4, #1
 800525e:	0852      	lsrs	r2, r2, #1
 8005260:	07e1      	lsls	r1, r4, #31
 8005262:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005266:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800526a:	bf48      	it	mi
 800526c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005270:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005274:	4614      	mov	r4, r2
 8005276:	e781      	b.n	800517c <__ieee754_sqrt+0x34>
 8005278:	0ad9      	lsrs	r1, r3, #11
 800527a:	3815      	subs	r0, #21
 800527c:	055b      	lsls	r3, r3, #21
 800527e:	2900      	cmp	r1, #0
 8005280:	d0fa      	beq.n	8005278 <__ieee754_sqrt+0x130>
 8005282:	02cd      	lsls	r5, r1, #11
 8005284:	d50a      	bpl.n	800529c <__ieee754_sqrt+0x154>
 8005286:	f1c2 0420 	rsb	r4, r2, #32
 800528a:	fa23 f404 	lsr.w	r4, r3, r4
 800528e:	1e55      	subs	r5, r2, #1
 8005290:	4093      	lsls	r3, r2
 8005292:	4321      	orrs	r1, r4
 8005294:	1b42      	subs	r2, r0, r5
 8005296:	e78a      	b.n	80051ae <__ieee754_sqrt+0x66>
 8005298:	4610      	mov	r0, r2
 800529a:	e7f0      	b.n	800527e <__ieee754_sqrt+0x136>
 800529c:	0049      	lsls	r1, r1, #1
 800529e:	3201      	adds	r2, #1
 80052a0:	e7ef      	b.n	8005282 <__ieee754_sqrt+0x13a>
 80052a2:	4680      	mov	r8, r0
 80052a4:	e7bd      	b.n	8005222 <__ieee754_sqrt+0xda>
 80052a6:	bf00      	nop
 80052a8:	7ff00000 	.word	0x7ff00000
 80052ac:	00000000 	.word	0x00000000

080052b0 <__kernel_cos>:
 80052b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	ec57 6b10 	vmov	r6, r7, d0
 80052b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80052bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80052c0:	ed8d 1b00 	vstr	d1, [sp]
 80052c4:	da07      	bge.n	80052d6 <__kernel_cos+0x26>
 80052c6:	ee10 0a10 	vmov	r0, s0
 80052ca:	4639      	mov	r1, r7
 80052cc:	f7fb fbe8 	bl	8000aa0 <__aeabi_d2iz>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f000 8088 	beq.w	80053e6 <__kernel_cos+0x136>
 80052d6:	4632      	mov	r2, r6
 80052d8:	463b      	mov	r3, r7
 80052da:	4630      	mov	r0, r6
 80052dc:	4639      	mov	r1, r7
 80052de:	f7fb f92f 	bl	8000540 <__aeabi_dmul>
 80052e2:	4b51      	ldr	r3, [pc, #324]	; (8005428 <__kernel_cos+0x178>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	4604      	mov	r4, r0
 80052e8:	460d      	mov	r5, r1
 80052ea:	f7fb f929 	bl	8000540 <__aeabi_dmul>
 80052ee:	a340      	add	r3, pc, #256	; (adr r3, 80053f0 <__kernel_cos+0x140>)
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	4682      	mov	sl, r0
 80052f6:	468b      	mov	fp, r1
 80052f8:	4620      	mov	r0, r4
 80052fa:	4629      	mov	r1, r5
 80052fc:	f7fb f920 	bl	8000540 <__aeabi_dmul>
 8005300:	a33d      	add	r3, pc, #244	; (adr r3, 80053f8 <__kernel_cos+0x148>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fa ff65 	bl	80001d4 <__adddf3>
 800530a:	4622      	mov	r2, r4
 800530c:	462b      	mov	r3, r5
 800530e:	f7fb f917 	bl	8000540 <__aeabi_dmul>
 8005312:	a33b      	add	r3, pc, #236	; (adr r3, 8005400 <__kernel_cos+0x150>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f7fa ff5a 	bl	80001d0 <__aeabi_dsub>
 800531c:	4622      	mov	r2, r4
 800531e:	462b      	mov	r3, r5
 8005320:	f7fb f90e 	bl	8000540 <__aeabi_dmul>
 8005324:	a338      	add	r3, pc, #224	; (adr r3, 8005408 <__kernel_cos+0x158>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fa ff53 	bl	80001d4 <__adddf3>
 800532e:	4622      	mov	r2, r4
 8005330:	462b      	mov	r3, r5
 8005332:	f7fb f905 	bl	8000540 <__aeabi_dmul>
 8005336:	a336      	add	r3, pc, #216	; (adr r3, 8005410 <__kernel_cos+0x160>)
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	f7fa ff48 	bl	80001d0 <__aeabi_dsub>
 8005340:	4622      	mov	r2, r4
 8005342:	462b      	mov	r3, r5
 8005344:	f7fb f8fc 	bl	8000540 <__aeabi_dmul>
 8005348:	a333      	add	r3, pc, #204	; (adr r3, 8005418 <__kernel_cos+0x168>)
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f7fa ff41 	bl	80001d4 <__adddf3>
 8005352:	4622      	mov	r2, r4
 8005354:	462b      	mov	r3, r5
 8005356:	f7fb f8f3 	bl	8000540 <__aeabi_dmul>
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	f7fb f8ef 	bl	8000540 <__aeabi_dmul>
 8005362:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005366:	4604      	mov	r4, r0
 8005368:	460d      	mov	r5, r1
 800536a:	4630      	mov	r0, r6
 800536c:	4639      	mov	r1, r7
 800536e:	f7fb f8e7 	bl	8000540 <__aeabi_dmul>
 8005372:	460b      	mov	r3, r1
 8005374:	4602      	mov	r2, r0
 8005376:	4629      	mov	r1, r5
 8005378:	4620      	mov	r0, r4
 800537a:	f7fa ff29 	bl	80001d0 <__aeabi_dsub>
 800537e:	4b2b      	ldr	r3, [pc, #172]	; (800542c <__kernel_cos+0x17c>)
 8005380:	4598      	cmp	r8, r3
 8005382:	4606      	mov	r6, r0
 8005384:	460f      	mov	r7, r1
 8005386:	dc10      	bgt.n	80053aa <__kernel_cos+0xfa>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4650      	mov	r0, sl
 800538e:	4659      	mov	r1, fp
 8005390:	f7fa ff1e 	bl	80001d0 <__aeabi_dsub>
 8005394:	460b      	mov	r3, r1
 8005396:	4926      	ldr	r1, [pc, #152]	; (8005430 <__kernel_cos+0x180>)
 8005398:	4602      	mov	r2, r0
 800539a:	2000      	movs	r0, #0
 800539c:	f7fa ff18 	bl	80001d0 <__aeabi_dsub>
 80053a0:	ec41 0b10 	vmov	d0, r0, r1
 80053a4:	b003      	add	sp, #12
 80053a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053aa:	4b22      	ldr	r3, [pc, #136]	; (8005434 <__kernel_cos+0x184>)
 80053ac:	4920      	ldr	r1, [pc, #128]	; (8005430 <__kernel_cos+0x180>)
 80053ae:	4598      	cmp	r8, r3
 80053b0:	bfcc      	ite	gt
 80053b2:	4d21      	ldrgt	r5, [pc, #132]	; (8005438 <__kernel_cos+0x188>)
 80053b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80053b8:	2400      	movs	r4, #0
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	2000      	movs	r0, #0
 80053c0:	f7fa ff06 	bl	80001d0 <__aeabi_dsub>
 80053c4:	4622      	mov	r2, r4
 80053c6:	4680      	mov	r8, r0
 80053c8:	4689      	mov	r9, r1
 80053ca:	462b      	mov	r3, r5
 80053cc:	4650      	mov	r0, sl
 80053ce:	4659      	mov	r1, fp
 80053d0:	f7fa fefe 	bl	80001d0 <__aeabi_dsub>
 80053d4:	4632      	mov	r2, r6
 80053d6:	463b      	mov	r3, r7
 80053d8:	f7fa fefa 	bl	80001d0 <__aeabi_dsub>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4640      	mov	r0, r8
 80053e2:	4649      	mov	r1, r9
 80053e4:	e7da      	b.n	800539c <__kernel_cos+0xec>
 80053e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005420 <__kernel_cos+0x170>
 80053ea:	e7db      	b.n	80053a4 <__kernel_cos+0xf4>
 80053ec:	f3af 8000 	nop.w
 80053f0:	be8838d4 	.word	0xbe8838d4
 80053f4:	bda8fae9 	.word	0xbda8fae9
 80053f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80053fc:	3e21ee9e 	.word	0x3e21ee9e
 8005400:	809c52ad 	.word	0x809c52ad
 8005404:	3e927e4f 	.word	0x3e927e4f
 8005408:	19cb1590 	.word	0x19cb1590
 800540c:	3efa01a0 	.word	0x3efa01a0
 8005410:	16c15177 	.word	0x16c15177
 8005414:	3f56c16c 	.word	0x3f56c16c
 8005418:	5555554c 	.word	0x5555554c
 800541c:	3fa55555 	.word	0x3fa55555
 8005420:	00000000 	.word	0x00000000
 8005424:	3ff00000 	.word	0x3ff00000
 8005428:	3fe00000 	.word	0x3fe00000
 800542c:	3fd33332 	.word	0x3fd33332
 8005430:	3ff00000 	.word	0x3ff00000
 8005434:	3fe90000 	.word	0x3fe90000
 8005438:	3fd20000 	.word	0x3fd20000
 800543c:	00000000 	.word	0x00000000

08005440 <__kernel_rem_pio2>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	ed2d 8b02 	vpush	{d8}
 8005448:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800544c:	f112 0f14 	cmn.w	r2, #20
 8005450:	9308      	str	r3, [sp, #32]
 8005452:	9101      	str	r1, [sp, #4]
 8005454:	4bc4      	ldr	r3, [pc, #784]	; (8005768 <__kernel_rem_pio2+0x328>)
 8005456:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005458:	900b      	str	r0, [sp, #44]	; 0x2c
 800545a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800545e:	9302      	str	r3, [sp, #8]
 8005460:	9b08      	ldr	r3, [sp, #32]
 8005462:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005466:	bfa8      	it	ge
 8005468:	1ed4      	subge	r4, r2, #3
 800546a:	9306      	str	r3, [sp, #24]
 800546c:	bfb2      	itee	lt
 800546e:	2400      	movlt	r4, #0
 8005470:	2318      	movge	r3, #24
 8005472:	fb94 f4f3 	sdivge	r4, r4, r3
 8005476:	f06f 0317 	mvn.w	r3, #23
 800547a:	fb04 3303 	mla	r3, r4, r3, r3
 800547e:	eb03 0a02 	add.w	sl, r3, r2
 8005482:	9b02      	ldr	r3, [sp, #8]
 8005484:	9a06      	ldr	r2, [sp, #24]
 8005486:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005758 <__kernel_rem_pio2+0x318>
 800548a:	eb03 0802 	add.w	r8, r3, r2
 800548e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005490:	1aa7      	subs	r7, r4, r2
 8005492:	ae22      	add	r6, sp, #136	; 0x88
 8005494:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005498:	2500      	movs	r5, #0
 800549a:	4545      	cmp	r5, r8
 800549c:	dd13      	ble.n	80054c6 <__kernel_rem_pio2+0x86>
 800549e:	9b08      	ldr	r3, [sp, #32]
 80054a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005758 <__kernel_rem_pio2+0x318>
 80054a4:	aa22      	add	r2, sp, #136	; 0x88
 80054a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80054aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80054ae:	f04f 0800 	mov.w	r8, #0
 80054b2:	9b02      	ldr	r3, [sp, #8]
 80054b4:	4598      	cmp	r8, r3
 80054b6:	dc2f      	bgt.n	8005518 <__kernel_rem_pio2+0xd8>
 80054b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80054bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80054c0:	462f      	mov	r7, r5
 80054c2:	2600      	movs	r6, #0
 80054c4:	e01b      	b.n	80054fe <__kernel_rem_pio2+0xbe>
 80054c6:	42ef      	cmn	r7, r5
 80054c8:	d407      	bmi.n	80054da <__kernel_rem_pio2+0x9a>
 80054ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80054ce:	f7fa ffcd 	bl	800046c <__aeabi_i2d>
 80054d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80054d6:	3501      	adds	r5, #1
 80054d8:	e7df      	b.n	800549a <__kernel_rem_pio2+0x5a>
 80054da:	ec51 0b18 	vmov	r0, r1, d8
 80054de:	e7f8      	b.n	80054d2 <__kernel_rem_pio2+0x92>
 80054e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80054e8:	f7fb f82a 	bl	8000540 <__aeabi_dmul>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054f4:	f7fa fe6e 	bl	80001d4 <__adddf3>
 80054f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054fc:	3601      	adds	r6, #1
 80054fe:	9b06      	ldr	r3, [sp, #24]
 8005500:	429e      	cmp	r6, r3
 8005502:	f1a7 0708 	sub.w	r7, r7, #8
 8005506:	ddeb      	ble.n	80054e0 <__kernel_rem_pio2+0xa0>
 8005508:	ed9d 7b04 	vldr	d7, [sp, #16]
 800550c:	f108 0801 	add.w	r8, r8, #1
 8005510:	ecab 7b02 	vstmia	fp!, {d7}
 8005514:	3508      	adds	r5, #8
 8005516:	e7cc      	b.n	80054b2 <__kernel_rem_pio2+0x72>
 8005518:	9b02      	ldr	r3, [sp, #8]
 800551a:	aa0e      	add	r2, sp, #56	; 0x38
 800551c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005520:	930d      	str	r3, [sp, #52]	; 0x34
 8005522:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005524:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005528:	9c02      	ldr	r4, [sp, #8]
 800552a:	930c      	str	r3, [sp, #48]	; 0x30
 800552c:	00e3      	lsls	r3, r4, #3
 800552e:	930a      	str	r3, [sp, #40]	; 0x28
 8005530:	ab9a      	add	r3, sp, #616	; 0x268
 8005532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005536:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800553a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800553e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005540:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005544:	46c3      	mov	fp, r8
 8005546:	46a1      	mov	r9, r4
 8005548:	f1b9 0f00 	cmp.w	r9, #0
 800554c:	f1a5 0508 	sub.w	r5, r5, #8
 8005550:	dc77      	bgt.n	8005642 <__kernel_rem_pio2+0x202>
 8005552:	ec47 6b10 	vmov	d0, r6, r7
 8005556:	4650      	mov	r0, sl
 8005558:	f000 fc46 	bl	8005de8 <scalbn>
 800555c:	ec57 6b10 	vmov	r6, r7, d0
 8005560:	2200      	movs	r2, #0
 8005562:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005566:	ee10 0a10 	vmov	r0, s0
 800556a:	4639      	mov	r1, r7
 800556c:	f7fa ffe8 	bl	8000540 <__aeabi_dmul>
 8005570:	ec41 0b10 	vmov	d0, r0, r1
 8005574:	f000 fbb8 	bl	8005ce8 <floor>
 8005578:	4b7c      	ldr	r3, [pc, #496]	; (800576c <__kernel_rem_pio2+0x32c>)
 800557a:	ec51 0b10 	vmov	r0, r1, d0
 800557e:	2200      	movs	r2, #0
 8005580:	f7fa ffde 	bl	8000540 <__aeabi_dmul>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4630      	mov	r0, r6
 800558a:	4639      	mov	r1, r7
 800558c:	f7fa fe20 	bl	80001d0 <__aeabi_dsub>
 8005590:	460f      	mov	r7, r1
 8005592:	4606      	mov	r6, r0
 8005594:	f7fb fa84 	bl	8000aa0 <__aeabi_d2iz>
 8005598:	9004      	str	r0, [sp, #16]
 800559a:	f7fa ff67 	bl	800046c <__aeabi_i2d>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4630      	mov	r0, r6
 80055a4:	4639      	mov	r1, r7
 80055a6:	f7fa fe13 	bl	80001d0 <__aeabi_dsub>
 80055aa:	f1ba 0f00 	cmp.w	sl, #0
 80055ae:	4606      	mov	r6, r0
 80055b0:	460f      	mov	r7, r1
 80055b2:	dd6d      	ble.n	8005690 <__kernel_rem_pio2+0x250>
 80055b4:	1e62      	subs	r2, r4, #1
 80055b6:	ab0e      	add	r3, sp, #56	; 0x38
 80055b8:	9d04      	ldr	r5, [sp, #16]
 80055ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80055be:	f1ca 0118 	rsb	r1, sl, #24
 80055c2:	fa40 f301 	asr.w	r3, r0, r1
 80055c6:	441d      	add	r5, r3
 80055c8:	408b      	lsls	r3, r1
 80055ca:	1ac0      	subs	r0, r0, r3
 80055cc:	ab0e      	add	r3, sp, #56	; 0x38
 80055ce:	9504      	str	r5, [sp, #16]
 80055d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80055d4:	f1ca 0317 	rsb	r3, sl, #23
 80055d8:	fa40 fb03 	asr.w	fp, r0, r3
 80055dc:	f1bb 0f00 	cmp.w	fp, #0
 80055e0:	dd65      	ble.n	80056ae <__kernel_rem_pio2+0x26e>
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	2200      	movs	r2, #0
 80055e6:	3301      	adds	r3, #1
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	4615      	mov	r5, r2
 80055ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80055f0:	4294      	cmp	r4, r2
 80055f2:	f300 809c 	bgt.w	800572e <__kernel_rem_pio2+0x2ee>
 80055f6:	f1ba 0f00 	cmp.w	sl, #0
 80055fa:	dd07      	ble.n	800560c <__kernel_rem_pio2+0x1cc>
 80055fc:	f1ba 0f01 	cmp.w	sl, #1
 8005600:	f000 80c0 	beq.w	8005784 <__kernel_rem_pio2+0x344>
 8005604:	f1ba 0f02 	cmp.w	sl, #2
 8005608:	f000 80c6 	beq.w	8005798 <__kernel_rem_pio2+0x358>
 800560c:	f1bb 0f02 	cmp.w	fp, #2
 8005610:	d14d      	bne.n	80056ae <__kernel_rem_pio2+0x26e>
 8005612:	4632      	mov	r2, r6
 8005614:	463b      	mov	r3, r7
 8005616:	4956      	ldr	r1, [pc, #344]	; (8005770 <__kernel_rem_pio2+0x330>)
 8005618:	2000      	movs	r0, #0
 800561a:	f7fa fdd9 	bl	80001d0 <__aeabi_dsub>
 800561e:	4606      	mov	r6, r0
 8005620:	460f      	mov	r7, r1
 8005622:	2d00      	cmp	r5, #0
 8005624:	d043      	beq.n	80056ae <__kernel_rem_pio2+0x26e>
 8005626:	4650      	mov	r0, sl
 8005628:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005760 <__kernel_rem_pio2+0x320>
 800562c:	f000 fbdc 	bl	8005de8 <scalbn>
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	ec53 2b10 	vmov	r2, r3, d0
 8005638:	f7fa fdca 	bl	80001d0 <__aeabi_dsub>
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	e035      	b.n	80056ae <__kernel_rem_pio2+0x26e>
 8005642:	4b4c      	ldr	r3, [pc, #304]	; (8005774 <__kernel_rem_pio2+0x334>)
 8005644:	2200      	movs	r2, #0
 8005646:	4630      	mov	r0, r6
 8005648:	4639      	mov	r1, r7
 800564a:	f7fa ff79 	bl	8000540 <__aeabi_dmul>
 800564e:	f7fb fa27 	bl	8000aa0 <__aeabi_d2iz>
 8005652:	f7fa ff0b 	bl	800046c <__aeabi_i2d>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	ec43 2b18 	vmov	d8, r2, r3
 800565e:	4b46      	ldr	r3, [pc, #280]	; (8005778 <__kernel_rem_pio2+0x338>)
 8005660:	2200      	movs	r2, #0
 8005662:	f7fa ff6d 	bl	8000540 <__aeabi_dmul>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4630      	mov	r0, r6
 800566c:	4639      	mov	r1, r7
 800566e:	f7fa fdaf 	bl	80001d0 <__aeabi_dsub>
 8005672:	f7fb fa15 	bl	8000aa0 <__aeabi_d2iz>
 8005676:	e9d5 2300 	ldrd	r2, r3, [r5]
 800567a:	f84b 0b04 	str.w	r0, [fp], #4
 800567e:	ec51 0b18 	vmov	r0, r1, d8
 8005682:	f7fa fda7 	bl	80001d4 <__adddf3>
 8005686:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800568a:	4606      	mov	r6, r0
 800568c:	460f      	mov	r7, r1
 800568e:	e75b      	b.n	8005548 <__kernel_rem_pio2+0x108>
 8005690:	d106      	bne.n	80056a0 <__kernel_rem_pio2+0x260>
 8005692:	1e63      	subs	r3, r4, #1
 8005694:	aa0e      	add	r2, sp, #56	; 0x38
 8005696:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800569a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800569e:	e79d      	b.n	80055dc <__kernel_rem_pio2+0x19c>
 80056a0:	4b36      	ldr	r3, [pc, #216]	; (800577c <__kernel_rem_pio2+0x33c>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	f7fb f9d2 	bl	8000a4c <__aeabi_dcmpge>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d13d      	bne.n	8005728 <__kernel_rem_pio2+0x2e8>
 80056ac:	4683      	mov	fp, r0
 80056ae:	2200      	movs	r2, #0
 80056b0:	2300      	movs	r3, #0
 80056b2:	4630      	mov	r0, r6
 80056b4:	4639      	mov	r1, r7
 80056b6:	f7fb f9ab 	bl	8000a10 <__aeabi_dcmpeq>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	f000 80c0 	beq.w	8005840 <__kernel_rem_pio2+0x400>
 80056c0:	1e65      	subs	r5, r4, #1
 80056c2:	462b      	mov	r3, r5
 80056c4:	2200      	movs	r2, #0
 80056c6:	9902      	ldr	r1, [sp, #8]
 80056c8:	428b      	cmp	r3, r1
 80056ca:	da6c      	bge.n	80057a6 <__kernel_rem_pio2+0x366>
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	f000 8089 	beq.w	80057e4 <__kernel_rem_pio2+0x3a4>
 80056d2:	ab0e      	add	r3, sp, #56	; 0x38
 80056d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80056d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80ad 	beq.w	800583c <__kernel_rem_pio2+0x3fc>
 80056e2:	4650      	mov	r0, sl
 80056e4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005760 <__kernel_rem_pio2+0x320>
 80056e8:	f000 fb7e 	bl	8005de8 <scalbn>
 80056ec:	ab9a      	add	r3, sp, #616	; 0x268
 80056ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80056f2:	ec57 6b10 	vmov	r6, r7, d0
 80056f6:	00ec      	lsls	r4, r5, #3
 80056f8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80056fc:	46aa      	mov	sl, r5
 80056fe:	f1ba 0f00 	cmp.w	sl, #0
 8005702:	f280 80d6 	bge.w	80058b2 <__kernel_rem_pio2+0x472>
 8005706:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005758 <__kernel_rem_pio2+0x318>
 800570a:	462e      	mov	r6, r5
 800570c:	2e00      	cmp	r6, #0
 800570e:	f2c0 8104 	blt.w	800591a <__kernel_rem_pio2+0x4da>
 8005712:	ab72      	add	r3, sp, #456	; 0x1c8
 8005714:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005718:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005780 <__kernel_rem_pio2+0x340>
 800571c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005720:	f04f 0800 	mov.w	r8, #0
 8005724:	1baf      	subs	r7, r5, r6
 8005726:	e0ea      	b.n	80058fe <__kernel_rem_pio2+0x4be>
 8005728:	f04f 0b02 	mov.w	fp, #2
 800572c:	e759      	b.n	80055e2 <__kernel_rem_pio2+0x1a2>
 800572e:	f8d8 3000 	ldr.w	r3, [r8]
 8005732:	b955      	cbnz	r5, 800574a <__kernel_rem_pio2+0x30a>
 8005734:	b123      	cbz	r3, 8005740 <__kernel_rem_pio2+0x300>
 8005736:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800573a:	f8c8 3000 	str.w	r3, [r8]
 800573e:	2301      	movs	r3, #1
 8005740:	3201      	adds	r2, #1
 8005742:	f108 0804 	add.w	r8, r8, #4
 8005746:	461d      	mov	r5, r3
 8005748:	e752      	b.n	80055f0 <__kernel_rem_pio2+0x1b0>
 800574a:	1acb      	subs	r3, r1, r3
 800574c:	f8c8 3000 	str.w	r3, [r8]
 8005750:	462b      	mov	r3, r5
 8005752:	e7f5      	b.n	8005740 <__kernel_rem_pio2+0x300>
 8005754:	f3af 8000 	nop.w
	...
 8005764:	3ff00000 	.word	0x3ff00000
 8005768:	08006140 	.word	0x08006140
 800576c:	40200000 	.word	0x40200000
 8005770:	3ff00000 	.word	0x3ff00000
 8005774:	3e700000 	.word	0x3e700000
 8005778:	41700000 	.word	0x41700000
 800577c:	3fe00000 	.word	0x3fe00000
 8005780:	08006100 	.word	0x08006100
 8005784:	1e62      	subs	r2, r4, #1
 8005786:	ab0e      	add	r3, sp, #56	; 0x38
 8005788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005790:	a90e      	add	r1, sp, #56	; 0x38
 8005792:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005796:	e739      	b.n	800560c <__kernel_rem_pio2+0x1cc>
 8005798:	1e62      	subs	r2, r4, #1
 800579a:	ab0e      	add	r3, sp, #56	; 0x38
 800579c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80057a4:	e7f4      	b.n	8005790 <__kernel_rem_pio2+0x350>
 80057a6:	a90e      	add	r1, sp, #56	; 0x38
 80057a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	430a      	orrs	r2, r1
 80057b0:	e789      	b.n	80056c6 <__kernel_rem_pio2+0x286>
 80057b2:	3301      	adds	r3, #1
 80057b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80057b8:	2900      	cmp	r1, #0
 80057ba:	d0fa      	beq.n	80057b2 <__kernel_rem_pio2+0x372>
 80057bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057be:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80057c2:	446a      	add	r2, sp
 80057c4:	3a98      	subs	r2, #152	; 0x98
 80057c6:	920a      	str	r2, [sp, #40]	; 0x28
 80057c8:	9a08      	ldr	r2, [sp, #32]
 80057ca:	18e3      	adds	r3, r4, r3
 80057cc:	18a5      	adds	r5, r4, r2
 80057ce:	aa22      	add	r2, sp, #136	; 0x88
 80057d0:	f104 0801 	add.w	r8, r4, #1
 80057d4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80057d8:	9304      	str	r3, [sp, #16]
 80057da:	9b04      	ldr	r3, [sp, #16]
 80057dc:	4543      	cmp	r3, r8
 80057de:	da04      	bge.n	80057ea <__kernel_rem_pio2+0x3aa>
 80057e0:	461c      	mov	r4, r3
 80057e2:	e6a3      	b.n	800552c <__kernel_rem_pio2+0xec>
 80057e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057e6:	2301      	movs	r3, #1
 80057e8:	e7e4      	b.n	80057b4 <__kernel_rem_pio2+0x374>
 80057ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80057f0:	f7fa fe3c 	bl	800046c <__aeabi_i2d>
 80057f4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80057f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057fa:	46ab      	mov	fp, r5
 80057fc:	461c      	mov	r4, r3
 80057fe:	f04f 0900 	mov.w	r9, #0
 8005802:	2600      	movs	r6, #0
 8005804:	2700      	movs	r7, #0
 8005806:	9b06      	ldr	r3, [sp, #24]
 8005808:	4599      	cmp	r9, r3
 800580a:	dd06      	ble.n	800581a <__kernel_rem_pio2+0x3da>
 800580c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800580e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005812:	f108 0801 	add.w	r8, r8, #1
 8005816:	930a      	str	r3, [sp, #40]	; 0x28
 8005818:	e7df      	b.n	80057da <__kernel_rem_pio2+0x39a>
 800581a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800581e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005822:	f7fa fe8d 	bl	8000540 <__aeabi_dmul>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4630      	mov	r0, r6
 800582c:	4639      	mov	r1, r7
 800582e:	f7fa fcd1 	bl	80001d4 <__adddf3>
 8005832:	f109 0901 	add.w	r9, r9, #1
 8005836:	4606      	mov	r6, r0
 8005838:	460f      	mov	r7, r1
 800583a:	e7e4      	b.n	8005806 <__kernel_rem_pio2+0x3c6>
 800583c:	3d01      	subs	r5, #1
 800583e:	e748      	b.n	80056d2 <__kernel_rem_pio2+0x292>
 8005840:	ec47 6b10 	vmov	d0, r6, r7
 8005844:	f1ca 0000 	rsb	r0, sl, #0
 8005848:	f000 face 	bl	8005de8 <scalbn>
 800584c:	ec57 6b10 	vmov	r6, r7, d0
 8005850:	4ba0      	ldr	r3, [pc, #640]	; (8005ad4 <__kernel_rem_pio2+0x694>)
 8005852:	ee10 0a10 	vmov	r0, s0
 8005856:	2200      	movs	r2, #0
 8005858:	4639      	mov	r1, r7
 800585a:	f7fb f8f7 	bl	8000a4c <__aeabi_dcmpge>
 800585e:	b1f8      	cbz	r0, 80058a0 <__kernel_rem_pio2+0x460>
 8005860:	4b9d      	ldr	r3, [pc, #628]	; (8005ad8 <__kernel_rem_pio2+0x698>)
 8005862:	2200      	movs	r2, #0
 8005864:	4630      	mov	r0, r6
 8005866:	4639      	mov	r1, r7
 8005868:	f7fa fe6a 	bl	8000540 <__aeabi_dmul>
 800586c:	f7fb f918 	bl	8000aa0 <__aeabi_d2iz>
 8005870:	4680      	mov	r8, r0
 8005872:	f7fa fdfb 	bl	800046c <__aeabi_i2d>
 8005876:	4b97      	ldr	r3, [pc, #604]	; (8005ad4 <__kernel_rem_pio2+0x694>)
 8005878:	2200      	movs	r2, #0
 800587a:	f7fa fe61 	bl	8000540 <__aeabi_dmul>
 800587e:	460b      	mov	r3, r1
 8005880:	4602      	mov	r2, r0
 8005882:	4639      	mov	r1, r7
 8005884:	4630      	mov	r0, r6
 8005886:	f7fa fca3 	bl	80001d0 <__aeabi_dsub>
 800588a:	f7fb f909 	bl	8000aa0 <__aeabi_d2iz>
 800588e:	1c65      	adds	r5, r4, #1
 8005890:	ab0e      	add	r3, sp, #56	; 0x38
 8005892:	f10a 0a18 	add.w	sl, sl, #24
 8005896:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800589a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800589e:	e720      	b.n	80056e2 <__kernel_rem_pio2+0x2a2>
 80058a0:	4630      	mov	r0, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7fb f8fc 	bl	8000aa0 <__aeabi_d2iz>
 80058a8:	ab0e      	add	r3, sp, #56	; 0x38
 80058aa:	4625      	mov	r5, r4
 80058ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80058b0:	e717      	b.n	80056e2 <__kernel_rem_pio2+0x2a2>
 80058b2:	ab0e      	add	r3, sp, #56	; 0x38
 80058b4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80058b8:	f7fa fdd8 	bl	800046c <__aeabi_i2d>
 80058bc:	4632      	mov	r2, r6
 80058be:	463b      	mov	r3, r7
 80058c0:	f7fa fe3e 	bl	8000540 <__aeabi_dmul>
 80058c4:	4b84      	ldr	r3, [pc, #528]	; (8005ad8 <__kernel_rem_pio2+0x698>)
 80058c6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80058ca:	2200      	movs	r2, #0
 80058cc:	4630      	mov	r0, r6
 80058ce:	4639      	mov	r1, r7
 80058d0:	f7fa fe36 	bl	8000540 <__aeabi_dmul>
 80058d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058d8:	4606      	mov	r6, r0
 80058da:	460f      	mov	r7, r1
 80058dc:	e70f      	b.n	80056fe <__kernel_rem_pio2+0x2be>
 80058de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80058e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80058e6:	f7fa fe2b 	bl	8000540 <__aeabi_dmul>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058f2:	f7fa fc6f 	bl	80001d4 <__adddf3>
 80058f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058fa:	f108 0801 	add.w	r8, r8, #1
 80058fe:	9b02      	ldr	r3, [sp, #8]
 8005900:	4598      	cmp	r8, r3
 8005902:	dc01      	bgt.n	8005908 <__kernel_rem_pio2+0x4c8>
 8005904:	45b8      	cmp	r8, r7
 8005906:	ddea      	ble.n	80058de <__kernel_rem_pio2+0x49e>
 8005908:	ed9d 7b06 	vldr	d7, [sp, #24]
 800590c:	ab4a      	add	r3, sp, #296	; 0x128
 800590e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005912:	ed87 7b00 	vstr	d7, [r7]
 8005916:	3e01      	subs	r6, #1
 8005918:	e6f8      	b.n	800570c <__kernel_rem_pio2+0x2cc>
 800591a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800591c:	2b02      	cmp	r3, #2
 800591e:	dc0b      	bgt.n	8005938 <__kernel_rem_pio2+0x4f8>
 8005920:	2b00      	cmp	r3, #0
 8005922:	dc35      	bgt.n	8005990 <__kernel_rem_pio2+0x550>
 8005924:	d059      	beq.n	80059da <__kernel_rem_pio2+0x59a>
 8005926:	9b04      	ldr	r3, [sp, #16]
 8005928:	f003 0007 	and.w	r0, r3, #7
 800592c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005930:	ecbd 8b02 	vpop	{d8}
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005938:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800593a:	2b03      	cmp	r3, #3
 800593c:	d1f3      	bne.n	8005926 <__kernel_rem_pio2+0x4e6>
 800593e:	ab4a      	add	r3, sp, #296	; 0x128
 8005940:	4423      	add	r3, r4
 8005942:	9306      	str	r3, [sp, #24]
 8005944:	461c      	mov	r4, r3
 8005946:	469a      	mov	sl, r3
 8005948:	9502      	str	r5, [sp, #8]
 800594a:	9b02      	ldr	r3, [sp, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f1aa 0a08 	sub.w	sl, sl, #8
 8005952:	dc6b      	bgt.n	8005a2c <__kernel_rem_pio2+0x5ec>
 8005954:	46aa      	mov	sl, r5
 8005956:	f1ba 0f01 	cmp.w	sl, #1
 800595a:	f1a4 0408 	sub.w	r4, r4, #8
 800595e:	f300 8085 	bgt.w	8005a6c <__kernel_rem_pio2+0x62c>
 8005962:	9c06      	ldr	r4, [sp, #24]
 8005964:	2000      	movs	r0, #0
 8005966:	3408      	adds	r4, #8
 8005968:	2100      	movs	r1, #0
 800596a:	2d01      	cmp	r5, #1
 800596c:	f300 809d 	bgt.w	8005aaa <__kernel_rem_pio2+0x66a>
 8005970:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005974:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005978:	f1bb 0f00 	cmp.w	fp, #0
 800597c:	f040 809b 	bne.w	8005ab6 <__kernel_rem_pio2+0x676>
 8005980:	9b01      	ldr	r3, [sp, #4]
 8005982:	e9c3 5600 	strd	r5, r6, [r3]
 8005986:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800598a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800598e:	e7ca      	b.n	8005926 <__kernel_rem_pio2+0x4e6>
 8005990:	3408      	adds	r4, #8
 8005992:	ab4a      	add	r3, sp, #296	; 0x128
 8005994:	441c      	add	r4, r3
 8005996:	462e      	mov	r6, r5
 8005998:	2000      	movs	r0, #0
 800599a:	2100      	movs	r1, #0
 800599c:	2e00      	cmp	r6, #0
 800599e:	da36      	bge.n	8005a0e <__kernel_rem_pio2+0x5ce>
 80059a0:	f1bb 0f00 	cmp.w	fp, #0
 80059a4:	d039      	beq.n	8005a1a <__kernel_rem_pio2+0x5da>
 80059a6:	4602      	mov	r2, r0
 80059a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059ac:	9c01      	ldr	r4, [sp, #4]
 80059ae:	e9c4 2300 	strd	r2, r3, [r4]
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80059ba:	f7fa fc09 	bl	80001d0 <__aeabi_dsub>
 80059be:	ae4c      	add	r6, sp, #304	; 0x130
 80059c0:	2401      	movs	r4, #1
 80059c2:	42a5      	cmp	r5, r4
 80059c4:	da2c      	bge.n	8005a20 <__kernel_rem_pio2+0x5e0>
 80059c6:	f1bb 0f00 	cmp.w	fp, #0
 80059ca:	d002      	beq.n	80059d2 <__kernel_rem_pio2+0x592>
 80059cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059d0:	4619      	mov	r1, r3
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80059d8:	e7a5      	b.n	8005926 <__kernel_rem_pio2+0x4e6>
 80059da:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80059de:	eb0d 0403 	add.w	r4, sp, r3
 80059e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80059e6:	2000      	movs	r0, #0
 80059e8:	2100      	movs	r1, #0
 80059ea:	2d00      	cmp	r5, #0
 80059ec:	da09      	bge.n	8005a02 <__kernel_rem_pio2+0x5c2>
 80059ee:	f1bb 0f00 	cmp.w	fp, #0
 80059f2:	d002      	beq.n	80059fa <__kernel_rem_pio2+0x5ba>
 80059f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059f8:	4619      	mov	r1, r3
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	e9c3 0100 	strd	r0, r1, [r3]
 8005a00:	e791      	b.n	8005926 <__kernel_rem_pio2+0x4e6>
 8005a02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005a06:	f7fa fbe5 	bl	80001d4 <__adddf3>
 8005a0a:	3d01      	subs	r5, #1
 8005a0c:	e7ed      	b.n	80059ea <__kernel_rem_pio2+0x5aa>
 8005a0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005a12:	f7fa fbdf 	bl	80001d4 <__adddf3>
 8005a16:	3e01      	subs	r6, #1
 8005a18:	e7c0      	b.n	800599c <__kernel_rem_pio2+0x55c>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	e7c5      	b.n	80059ac <__kernel_rem_pio2+0x56c>
 8005a20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005a24:	f7fa fbd6 	bl	80001d4 <__adddf3>
 8005a28:	3401      	adds	r4, #1
 8005a2a:	e7ca      	b.n	80059c2 <__kernel_rem_pio2+0x582>
 8005a2c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005a30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005a34:	9b02      	ldr	r3, [sp, #8]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	4640      	mov	r0, r8
 8005a40:	4649      	mov	r1, r9
 8005a42:	f7fa fbc7 	bl	80001d4 <__adddf3>
 8005a46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4640      	mov	r0, r8
 8005a50:	4649      	mov	r1, r9
 8005a52:	f7fa fbbd 	bl	80001d0 <__aeabi_dsub>
 8005a56:	4632      	mov	r2, r6
 8005a58:	463b      	mov	r3, r7
 8005a5a:	f7fa fbbb 	bl	80001d4 <__adddf3>
 8005a5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005a62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a66:	ed8a 7b00 	vstr	d7, [sl]
 8005a6a:	e76e      	b.n	800594a <__kernel_rem_pio2+0x50a>
 8005a6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005a70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005a74:	4640      	mov	r0, r8
 8005a76:	4632      	mov	r2, r6
 8005a78:	463b      	mov	r3, r7
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fa fbaa 	bl	80001d4 <__adddf3>
 8005a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4640      	mov	r0, r8
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	f7fa fba0 	bl	80001d0 <__aeabi_dsub>
 8005a90:	4632      	mov	r2, r6
 8005a92:	463b      	mov	r3, r7
 8005a94:	f7fa fb9e 	bl	80001d4 <__adddf3>
 8005a98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005aa0:	ed84 7b00 	vstr	d7, [r4]
 8005aa4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005aa8:	e755      	b.n	8005956 <__kernel_rem_pio2+0x516>
 8005aaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005aae:	f7fa fb91 	bl	80001d4 <__adddf3>
 8005ab2:	3d01      	subs	r5, #1
 8005ab4:	e759      	b.n	800596a <__kernel_rem_pio2+0x52a>
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	9a01      	ldr	r2, [sp, #4]
 8005aba:	601d      	str	r5, [r3, #0]
 8005abc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005ac0:	605c      	str	r4, [r3, #4]
 8005ac2:	609f      	str	r7, [r3, #8]
 8005ac4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005ac8:	60d3      	str	r3, [r2, #12]
 8005aca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ace:	6110      	str	r0, [r2, #16]
 8005ad0:	6153      	str	r3, [r2, #20]
 8005ad2:	e728      	b.n	8005926 <__kernel_rem_pio2+0x4e6>
 8005ad4:	41700000 	.word	0x41700000
 8005ad8:	3e700000 	.word	0x3e700000
 8005adc:	00000000 	.word	0x00000000

08005ae0 <__kernel_sin>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	ed2d 8b04 	vpush	{d8-d9}
 8005ae8:	eeb0 8a41 	vmov.f32	s16, s2
 8005aec:	eef0 8a61 	vmov.f32	s17, s3
 8005af0:	ec55 4b10 	vmov	r4, r5, d0
 8005af4:	b083      	sub	sp, #12
 8005af6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005afa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005afe:	9001      	str	r0, [sp, #4]
 8005b00:	da06      	bge.n	8005b10 <__kernel_sin+0x30>
 8005b02:	ee10 0a10 	vmov	r0, s0
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa ffca 	bl	8000aa0 <__aeabi_d2iz>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d051      	beq.n	8005bb4 <__kernel_sin+0xd4>
 8005b10:	4622      	mov	r2, r4
 8005b12:	462b      	mov	r3, r5
 8005b14:	4620      	mov	r0, r4
 8005b16:	4629      	mov	r1, r5
 8005b18:	f7fa fd12 	bl	8000540 <__aeabi_dmul>
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	468b      	mov	fp, r1
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4620      	mov	r0, r4
 8005b26:	4629      	mov	r1, r5
 8005b28:	f7fa fd0a 	bl	8000540 <__aeabi_dmul>
 8005b2c:	a341      	add	r3, pc, #260	; (adr r3, 8005c34 <__kernel_sin+0x154>)
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	4680      	mov	r8, r0
 8005b34:	4689      	mov	r9, r1
 8005b36:	4650      	mov	r0, sl
 8005b38:	4659      	mov	r1, fp
 8005b3a:	f7fa fd01 	bl	8000540 <__aeabi_dmul>
 8005b3e:	a33f      	add	r3, pc, #252	; (adr r3, 8005c3c <__kernel_sin+0x15c>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f7fa fb44 	bl	80001d0 <__aeabi_dsub>
 8005b48:	4652      	mov	r2, sl
 8005b4a:	465b      	mov	r3, fp
 8005b4c:	f7fa fcf8 	bl	8000540 <__aeabi_dmul>
 8005b50:	a33c      	add	r3, pc, #240	; (adr r3, 8005c44 <__kernel_sin+0x164>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fb3d 	bl	80001d4 <__adddf3>
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	465b      	mov	r3, fp
 8005b5e:	f7fa fcef 	bl	8000540 <__aeabi_dmul>
 8005b62:	a33a      	add	r3, pc, #232	; (adr r3, 8005c4c <__kernel_sin+0x16c>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa fb32 	bl	80001d0 <__aeabi_dsub>
 8005b6c:	4652      	mov	r2, sl
 8005b6e:	465b      	mov	r3, fp
 8005b70:	f7fa fce6 	bl	8000540 <__aeabi_dmul>
 8005b74:	a337      	add	r3, pc, #220	; (adr r3, 8005c54 <__kernel_sin+0x174>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f7fa fb2b 	bl	80001d4 <__adddf3>
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	4606      	mov	r6, r0
 8005b82:	460f      	mov	r7, r1
 8005b84:	b9eb      	cbnz	r3, 8005bc2 <__kernel_sin+0xe2>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4650      	mov	r0, sl
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	f7fa fcd7 	bl	8000540 <__aeabi_dmul>
 8005b92:	a325      	add	r3, pc, #148	; (adr r3, 8005c28 <__kernel_sin+0x148>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fb1a 	bl	80001d0 <__aeabi_dsub>
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	f7fa fcce 	bl	8000540 <__aeabi_dmul>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	f7fa fb12 	bl	80001d4 <__adddf3>
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	ec45 4b10 	vmov	d0, r4, r5
 8005bb8:	b003      	add	sp, #12
 8005bba:	ecbd 8b04 	vpop	{d8-d9}
 8005bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc2:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <__kernel_sin+0x150>)
 8005bc4:	ec51 0b18 	vmov	r0, r1, d8
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f7fa fcb9 	bl	8000540 <__aeabi_dmul>
 8005bce:	4632      	mov	r2, r6
 8005bd0:	ec41 0b19 	vmov	d9, r0, r1
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa fcb1 	bl	8000540 <__aeabi_dmul>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	ec51 0b19 	vmov	r0, r1, d9
 8005be6:	f7fa faf3 	bl	80001d0 <__aeabi_dsub>
 8005bea:	4652      	mov	r2, sl
 8005bec:	465b      	mov	r3, fp
 8005bee:	f7fa fca7 	bl	8000540 <__aeabi_dmul>
 8005bf2:	ec53 2b18 	vmov	r2, r3, d8
 8005bf6:	f7fa faeb 	bl	80001d0 <__aeabi_dsub>
 8005bfa:	a30b      	add	r3, pc, #44	; (adr r3, 8005c28 <__kernel_sin+0x148>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	4606      	mov	r6, r0
 8005c02:	460f      	mov	r7, r1
 8005c04:	4640      	mov	r0, r8
 8005c06:	4649      	mov	r1, r9
 8005c08:	f7fa fc9a 	bl	8000540 <__aeabi_dmul>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4630      	mov	r0, r6
 8005c12:	4639      	mov	r1, r7
 8005c14:	f7fa fade 	bl	80001d4 <__adddf3>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	4629      	mov	r1, r5
 8005c20:	f7fa fad6 	bl	80001d0 <__aeabi_dsub>
 8005c24:	e7c4      	b.n	8005bb0 <__kernel_sin+0xd0>
 8005c26:	bf00      	nop
 8005c28:	55555549 	.word	0x55555549
 8005c2c:	3fc55555 	.word	0x3fc55555
 8005c30:	3fe00000 	.word	0x3fe00000
 8005c34:	5acfd57c 	.word	0x5acfd57c
 8005c38:	3de5d93a 	.word	0x3de5d93a
 8005c3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005c40:	3e5ae5e6 	.word	0x3e5ae5e6
 8005c44:	57b1fe7d 	.word	0x57b1fe7d
 8005c48:	3ec71de3 	.word	0x3ec71de3
 8005c4c:	19c161d5 	.word	0x19c161d5
 8005c50:	3f2a01a0 	.word	0x3f2a01a0
 8005c54:	1110f8a6 	.word	0x1110f8a6
 8005c58:	3f811111 	.word	0x3f811111

08005c5c <with_errno>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4604      	mov	r4, r0
 8005c60:	460d      	mov	r5, r1
 8005c62:	4616      	mov	r6, r2
 8005c64:	f7fe f96c 	bl	8003f40 <__errno>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	6006      	str	r6, [r0, #0]
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}

08005c70 <xflow>:
 8005c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c72:	4614      	mov	r4, r2
 8005c74:	461d      	mov	r5, r3
 8005c76:	b108      	cbz	r0, 8005c7c <xflow+0xc>
 8005c78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005c7c:	e9cd 2300 	strd	r2, r3, [sp]
 8005c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c84:	4620      	mov	r0, r4
 8005c86:	4629      	mov	r1, r5
 8005c88:	f7fa fc5a 	bl	8000540 <__aeabi_dmul>
 8005c8c:	2222      	movs	r2, #34	; 0x22
 8005c8e:	b003      	add	sp, #12
 8005c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c94:	f7ff bfe2 	b.w	8005c5c <with_errno>

08005c98 <__math_uflow>:
 8005c98:	b508      	push	{r3, lr}
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ca0:	f7ff ffe6 	bl	8005c70 <xflow>
 8005ca4:	ec41 0b10 	vmov	d0, r0, r1
 8005ca8:	bd08      	pop	{r3, pc}

08005caa <__math_oflow>:
 8005caa:	b508      	push	{r3, lr}
 8005cac:	2200      	movs	r2, #0
 8005cae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005cb2:	f7ff ffdd 	bl	8005c70 <xflow>
 8005cb6:	ec41 0b10 	vmov	d0, r0, r1
 8005cba:	bd08      	pop	{r3, pc}

08005cbc <fabs>:
 8005cbc:	ec51 0b10 	vmov	r0, r1, d0
 8005cc0:	ee10 2a10 	vmov	r2, s0
 8005cc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cc8:	ec43 2b10 	vmov	d0, r2, r3
 8005ccc:	4770      	bx	lr

08005cce <finite>:
 8005cce:	b082      	sub	sp, #8
 8005cd0:	ed8d 0b00 	vstr	d0, [sp]
 8005cd4:	9801      	ldr	r0, [sp, #4]
 8005cd6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005cda:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005cde:	0fc0      	lsrs	r0, r0, #31
 8005ce0:	b002      	add	sp, #8
 8005ce2:	4770      	bx	lr
 8005ce4:	0000      	movs	r0, r0
	...

08005ce8 <floor>:
 8005ce8:	ec51 0b10 	vmov	r0, r1, d0
 8005cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005cf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005cf8:	2e13      	cmp	r6, #19
 8005cfa:	ee10 5a10 	vmov	r5, s0
 8005cfe:	ee10 8a10 	vmov	r8, s0
 8005d02:	460c      	mov	r4, r1
 8005d04:	dc32      	bgt.n	8005d6c <floor+0x84>
 8005d06:	2e00      	cmp	r6, #0
 8005d08:	da14      	bge.n	8005d34 <floor+0x4c>
 8005d0a:	a333      	add	r3, pc, #204	; (adr r3, 8005dd8 <floor+0xf0>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fa60 	bl	80001d4 <__adddf3>
 8005d14:	2200      	movs	r2, #0
 8005d16:	2300      	movs	r3, #0
 8005d18:	f7fa fea2 	bl	8000a60 <__aeabi_dcmpgt>
 8005d1c:	b138      	cbz	r0, 8005d2e <floor+0x46>
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	da57      	bge.n	8005dd2 <floor+0xea>
 8005d22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005d26:	431d      	orrs	r5, r3
 8005d28:	d001      	beq.n	8005d2e <floor+0x46>
 8005d2a:	4c2d      	ldr	r4, [pc, #180]	; (8005de0 <floor+0xf8>)
 8005d2c:	2500      	movs	r5, #0
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4628      	mov	r0, r5
 8005d32:	e025      	b.n	8005d80 <floor+0x98>
 8005d34:	4f2b      	ldr	r7, [pc, #172]	; (8005de4 <floor+0xfc>)
 8005d36:	4137      	asrs	r7, r6
 8005d38:	ea01 0307 	and.w	r3, r1, r7
 8005d3c:	4303      	orrs	r3, r0
 8005d3e:	d01f      	beq.n	8005d80 <floor+0x98>
 8005d40:	a325      	add	r3, pc, #148	; (adr r3, 8005dd8 <floor+0xf0>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	f7fa fa45 	bl	80001d4 <__adddf3>
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f7fa fe87 	bl	8000a60 <__aeabi_dcmpgt>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d0eb      	beq.n	8005d2e <floor+0x46>
 8005d56:	2c00      	cmp	r4, #0
 8005d58:	bfbe      	ittt	lt
 8005d5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005d5e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005d62:	19a4      	addlt	r4, r4, r6
 8005d64:	ea24 0407 	bic.w	r4, r4, r7
 8005d68:	2500      	movs	r5, #0
 8005d6a:	e7e0      	b.n	8005d2e <floor+0x46>
 8005d6c:	2e33      	cmp	r6, #51	; 0x33
 8005d6e:	dd0b      	ble.n	8005d88 <floor+0xa0>
 8005d70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005d74:	d104      	bne.n	8005d80 <floor+0x98>
 8005d76:	ee10 2a10 	vmov	r2, s0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	f7fa fa2a 	bl	80001d4 <__adddf3>
 8005d80:	ec41 0b10 	vmov	d0, r0, r1
 8005d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d88:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d90:	fa23 f707 	lsr.w	r7, r3, r7
 8005d94:	4207      	tst	r7, r0
 8005d96:	d0f3      	beq.n	8005d80 <floor+0x98>
 8005d98:	a30f      	add	r3, pc, #60	; (adr r3, 8005dd8 <floor+0xf0>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fa19 	bl	80001d4 <__adddf3>
 8005da2:	2200      	movs	r2, #0
 8005da4:	2300      	movs	r3, #0
 8005da6:	f7fa fe5b 	bl	8000a60 <__aeabi_dcmpgt>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d0bf      	beq.n	8005d2e <floor+0x46>
 8005dae:	2c00      	cmp	r4, #0
 8005db0:	da02      	bge.n	8005db8 <floor+0xd0>
 8005db2:	2e14      	cmp	r6, #20
 8005db4:	d103      	bne.n	8005dbe <floor+0xd6>
 8005db6:	3401      	adds	r4, #1
 8005db8:	ea25 0507 	bic.w	r5, r5, r7
 8005dbc:	e7b7      	b.n	8005d2e <floor+0x46>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005dc4:	fa03 f606 	lsl.w	r6, r3, r6
 8005dc8:	4435      	add	r5, r6
 8005dca:	4545      	cmp	r5, r8
 8005dcc:	bf38      	it	cc
 8005dce:	18e4      	addcc	r4, r4, r3
 8005dd0:	e7f2      	b.n	8005db8 <floor+0xd0>
 8005dd2:	2500      	movs	r5, #0
 8005dd4:	462c      	mov	r4, r5
 8005dd6:	e7aa      	b.n	8005d2e <floor+0x46>
 8005dd8:	8800759c 	.word	0x8800759c
 8005ddc:	7e37e43c 	.word	0x7e37e43c
 8005de0:	bff00000 	.word	0xbff00000
 8005de4:	000fffff 	.word	0x000fffff

08005de8 <scalbn>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	ec55 4b10 	vmov	r4, r5, d0
 8005dee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005df2:	4606      	mov	r6, r0
 8005df4:	462b      	mov	r3, r5
 8005df6:	b99a      	cbnz	r2, 8005e20 <scalbn+0x38>
 8005df8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005dfc:	4323      	orrs	r3, r4
 8005dfe:	d036      	beq.n	8005e6e <scalbn+0x86>
 8005e00:	4b39      	ldr	r3, [pc, #228]	; (8005ee8 <scalbn+0x100>)
 8005e02:	4629      	mov	r1, r5
 8005e04:	ee10 0a10 	vmov	r0, s0
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f7fa fb99 	bl	8000540 <__aeabi_dmul>
 8005e0e:	4b37      	ldr	r3, [pc, #220]	; (8005eec <scalbn+0x104>)
 8005e10:	429e      	cmp	r6, r3
 8005e12:	4604      	mov	r4, r0
 8005e14:	460d      	mov	r5, r1
 8005e16:	da10      	bge.n	8005e3a <scalbn+0x52>
 8005e18:	a32b      	add	r3, pc, #172	; (adr r3, 8005ec8 <scalbn+0xe0>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	e03a      	b.n	8005e96 <scalbn+0xae>
 8005e20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005e24:	428a      	cmp	r2, r1
 8005e26:	d10c      	bne.n	8005e42 <scalbn+0x5a>
 8005e28:	ee10 2a10 	vmov	r2, s0
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7fa f9d0 	bl	80001d4 <__adddf3>
 8005e34:	4604      	mov	r4, r0
 8005e36:	460d      	mov	r5, r1
 8005e38:	e019      	b.n	8005e6e <scalbn+0x86>
 8005e3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005e3e:	460b      	mov	r3, r1
 8005e40:	3a36      	subs	r2, #54	; 0x36
 8005e42:	4432      	add	r2, r6
 8005e44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005e48:	428a      	cmp	r2, r1
 8005e4a:	dd08      	ble.n	8005e5e <scalbn+0x76>
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	a120      	add	r1, pc, #128	; (adr r1, 8005ed0 <scalbn+0xe8>)
 8005e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e54:	da1c      	bge.n	8005e90 <scalbn+0xa8>
 8005e56:	a120      	add	r1, pc, #128	; (adr r1, 8005ed8 <scalbn+0xf0>)
 8005e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e5c:	e018      	b.n	8005e90 <scalbn+0xa8>
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	dd08      	ble.n	8005e74 <scalbn+0x8c>
 8005e62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e6e:	ec45 4b10 	vmov	d0, r4, r5
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005e78:	da19      	bge.n	8005eae <scalbn+0xc6>
 8005e7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e7e:	429e      	cmp	r6, r3
 8005e80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005e84:	dd0a      	ble.n	8005e9c <scalbn+0xb4>
 8005e86:	a112      	add	r1, pc, #72	; (adr r1, 8005ed0 <scalbn+0xe8>)
 8005e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e2      	bne.n	8005e56 <scalbn+0x6e>
 8005e90:	a30f      	add	r3, pc, #60	; (adr r3, 8005ed0 <scalbn+0xe8>)
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f7fa fb53 	bl	8000540 <__aeabi_dmul>
 8005e9a:	e7cb      	b.n	8005e34 <scalbn+0x4c>
 8005e9c:	a10a      	add	r1, pc, #40	; (adr r1, 8005ec8 <scalbn+0xe0>)
 8005e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0b8      	beq.n	8005e18 <scalbn+0x30>
 8005ea6:	a10e      	add	r1, pc, #56	; (adr r1, 8005ee0 <scalbn+0xf8>)
 8005ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eac:	e7b4      	b.n	8005e18 <scalbn+0x30>
 8005eae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005eb2:	3236      	adds	r2, #54	; 0x36
 8005eb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005eb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <scalbn+0x108>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	e7e8      	b.n	8005e96 <scalbn+0xae>
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	c2f8f359 	.word	0xc2f8f359
 8005ecc:	01a56e1f 	.word	0x01a56e1f
 8005ed0:	8800759c 	.word	0x8800759c
 8005ed4:	7e37e43c 	.word	0x7e37e43c
 8005ed8:	8800759c 	.word	0x8800759c
 8005edc:	fe37e43c 	.word	0xfe37e43c
 8005ee0:	c2f8f359 	.word	0xc2f8f359
 8005ee4:	81a56e1f 	.word	0x81a56e1f
 8005ee8:	43500000 	.word	0x43500000
 8005eec:	ffff3cb0 	.word	0xffff3cb0
 8005ef0:	3c900000 	.word	0x3c900000

08005ef4 <_init>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	bf00      	nop
 8005ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efa:	bc08      	pop	{r3}
 8005efc:	469e      	mov	lr, r3
 8005efe:	4770      	bx	lr

08005f00 <_fini>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	bf00      	nop
 8005f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f06:	bc08      	pop	{r3}
 8005f08:	469e      	mov	lr, r3
 8005f0a:	4770      	bx	lr
